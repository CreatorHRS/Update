/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.6";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    UNICODE_INPUT = true;
}
PARSER_BEGIN(ProgramParser)
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.program;

import java.lang.reflect.InvocationTargetException;

import org.mxupdate.update.program.ProgramCI_mxJPO.Execute;
import org.mxupdate.update.program.ProgramCI_mxJPO.Kind;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link ProgramCI_mxJPO}.
 */
@SuppressWarnings("unused")
class ProgramParser
    extends AbstractParser_mxJPO
{
}
PARSER_END(ProgramParser)<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

<DEFAULT> TOKEN :
{
      <PACKAGE:                             "package">                                      : STRING_EXPECTED

    | <KIND:                                "kind">
    | <EKL:                                 "ekl">
    | <EXTERNAL:                            "external">
    | <JAVA:                                "java">
    | <MQL:                                 "mql">

    | <UUID:                                "uuid">                                         : STRING_EXPECTED

    | <SYMBOLICNAME:                        "symbolicname">                                 : STRING_EXPECTED

    | <DESCRIPTION:                         "description">                                  : MULTILINESTRING_EXPECTED

    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_FALSE:                        "!hidden">

    | <NEEDSBUSINESSOBJECT_TRUE:            "needsbusinessobject">
    | <NEEDSBUSINESSOBJECT_FALSE:           "!needsbusinessobject">

    | <DOWNLOADABLE_TRUE:                   "downloadable">
    | <DOWNLOADABLE_FALSE:                  "!downloadable">

    | <PIPE_TRUE:                           "pipe">
    | <PIPE_FALSE:                          "!pipe">

    | <POOLED_TRUE:                         "pooled">
    | <POOLED_FALSE:                        "!pooled">

    | <RULE:                                "rule">                                         : STRING_EXPECTED

    | <EXECUTE:                             "execute">
    | <IMMEDIATE:                           "immediate">
    | <DEFERRED:                            "deferred">
    | <USER:                                "user">                                         : STRING_EXPECTED

    | <CODE:                                "code">                                         : MULTILINESTRING_EXPECTED
    | <FILE:                                "file">                                         : STRING_EXPECTED
}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\n" | "\t" | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" | "\\t" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : ADMINREF_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED
}

/**************************************************************************** */
/**
 * Parses one complete page definition.
 *
 * @param _page     target page to update with parsed values
 */
void parse(final ProgramCI_mxJPO _prog)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException : 
{
    String str;
    Token tmp;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_prog, "packageRef", str);} )

      | ( <KIND>                    ( <EKL>                                     {this.setValue(_prog, "kind", Kind.EKL);}
                                    | <EXTERNAL>                                {this.setValue(_prog, "kind", Kind.EXTERNAL);}
                                    | <MQL>                                     {this.setValue(_prog, "kind", Kind.MQL);}
                                    | <JAVA>                                    {this.setValue(_prog, "kind", Kind.JAVA);} ) )

      | ( <UUID>                      property = uuid()                         {this.appendValue(_prog, "properties", "propertiesStack", property);} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_prog, "symbolicNames", str);} )

      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_prog, "description", str);} )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_prog, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_prog, "hidden", false);} )

      | ( <NEEDSBUSINESSOBJECT_TRUE>                                            {this.setValue(_prog, "needsBusinessObjectContext", true);} )
      | ( <NEEDSBUSINESSOBJECT_FALSE>                                           {this.setValue(_prog, "needsBusinessObjectContext", false);} )

      | ( <DOWNLOADABLE_TRUE>                                                   {this.setValue(_prog, "downloadable", true);} )
      | ( <DOWNLOADABLE_FALSE>                                                  {this.setValue(_prog, "downloadable", false);} )

      | ( <PIPE_TRUE>                                                           {this.setValue(_prog, "pipe", true);} )
      | ( <PIPE_FALSE>                                                          {this.setValue(_prog, "pipe", false);} )

      | ( <POOLED_TRUE>                                                         {this.setValue(_prog, "pooled", true);} )
      | ( <POOLED_FALSE>                                                        {this.setValue(_prog, "pooled", false);} )

      | ( <RULE>                      str = string()                            {this.setValue(_prog, "rule", str);} )

      | ( <EXECUTE>     ( <IMMEDIATE>                                           {this.setValue(_prog, "execute", Execute.IMMEDIATE);}
                        | <DEFERRED>                                            {this.setValue(_prog, "execute", Execute.DEFERRED);}
                        | ( <USER>            str = string()                    {this.setValue(_prog, "user", str);} ) ) )

      | ( <CODE>                      str = multiLineString()                   {this.setValue(_prog, "code", str);} )
      | ( <FILE>                      str = string()                            {this.setValue(_prog, "file", str);} )

      | ( <PROPERTY>                  property = property()                     {this.appendValue(_prog, "properties", "propertiesStack", property);} )
    )*
}

/**
 * Parses the UUID property definition.
 */
AdminProperty uuid() :
{
    String str;
    AdminProperty property = new AdminProperty();
}
{
    str = string()
    {this.setValue(property, "value", str);}
    {this.setValue(property, "name",  "UUID");}
    {return property;}
}

/**
 * Parses the properties definition.
 */
AdminProperty property() :
{
    String str;
    Token tmp;
    AdminProperty property = new AdminProperty();
}
{
    str = string()                                 {this.setValue(property, "name", str);}
    ( ( <PROPERTYVAL>  str = string()              {this.setValue(property, "value", str);} )
    | ( <PROPERTYTO>   ( tmp = <ADMINTYPE_STRING>  {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                       | tmp = <ADMINTYPE_SINGLE>  {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                   str = string()  {this.setValue(property, "refAdminName", str);} ) )*
    {return property;}
}

/**
 * Evaluates multi-line string.
 *
 * @return string
 */
String multiLineString() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <MULTILINESTRING>  {ret = this.getString(tmp.image);}
    | tmp = <MULTILINESINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}

/**
 * Evaluates single-line string.
 *
 * @return string
 */
String string() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <STRING>  {ret = this.getString(tmp.image);}
    | tmp = <SINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}
