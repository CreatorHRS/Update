/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.6";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    UNICODE_INPUT = true;
}
PARSER_BEGIN(PackageParser)
package org.mxupdate.update.system;

import java.lang.reflect.InvocationTargetException;

import org.mxupdate.update.system.PackageCI_mxJPO.MemberRef;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link PackageCI_mxJPO}. */
@SuppressWarnings("unused")
class PackageParser
    extends AbstractParser_mxJPO
{
}
PARSER_END(PackageParser)<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

<DEFAULT> TOKEN :
{
      <DESCRIPTION:                         "description">                                  : MULTILINESTRING_EXPECTED

    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_FALSE:                        "!hidden">

    | <CUSTOM_TRUE:                         "custom">
    | <CUSTOM_FALSE:                        "!custom">

    | <USESPACKAGE:                         "usespackage">                                  : STRING_EXPECTED

}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u0009","\u000b"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/********************************************************************* Member */
<DEFAULT> TOKEN :
{
      <MEMBER:                              "member">                                       : MEMBERREF_EXPECTED
}

<MEMBERREF_EXPECTED> TOKEN :
{
      <MEMBERTYPE_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <MEMBERTYPE_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED
}

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : ADMINREF_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED
}

/**************************************************************************** */
/**
 * Parses one complete package definition.
 *
 * @param _package      target package to update with parsed values
 */
void parse(final PackageCI_mxJPO _package)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    Token tmp;
    MemberRef member;
    AdminProperty property;
} {
    (   ( <DESCRIPTION>             ( tmp = <MULTILINESTRING>               {this.setValue(_package, "description",                    this.getString(tmp.image));}
                                    | tmp = <MULTILINESINGLE>               {this.setValue(_package, "description",                    this.getSingle(tmp.image));} ) )

      | ( <HIDDEN_TRUE>                                                     {this.setValue(_package, "hidden",                         true);} )
      | ( <HIDDEN_FALSE>                                                    {this.setValue(_package, "hidden",                         false);} )

      | ( <CUSTOM_TRUE>                                                     {this.setValue(_package, "custom",                         true);} )
      | ( <CUSTOM_FALSE>                                                    {this.setValue(_package, "custom",                         false);} )

      | ( <USESPACKAGE>             ( tmp = <STRING>                        {this.appendValue(_package, "usesPackages",                this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_package, "usesPackages",                this.getSingle(tmp.image));} ) )


      | ( <MEMBER>                                                          {member = new MemberRef();this.appendValue(_package, "members", member);}
                    ( tmp = <MEMBERTYPE_STRING>                             {this.setValue(member, "refAdminType",                      this.getString(tmp.image));}
                    | tmp = <MEMBERTYPE_SINGLE>                             {this.setValue(member, "refAdminType",                      this.getSingle(tmp.image));} )
                                    ( tmp = <STRING>                        {this.setValue(member, "refAdminName",                      this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(member, "refAdminName",                      this.getSingle(tmp.image));} ) )

      | ( <PROPERTY>                                                        {property = new AdminProperty();this.appendValue(_package, "properties", "propertiesStack", property);}
                                    ( tmp = <STRING>                        {this.setValue(property, "name", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "name", this.getSingle(tmp.image));} )
              (   ( <PROPERTYVAL>   ( tmp = <STRING>                        {this.setValue(property, "value", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "value", this.getSingle(tmp.image));} ) )
                | ( <PROPERTYTO>    ( tmp = <ADMINTYPE_STRING>              {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                                    | tmp = <ADMINTYPE_SINGLE>              {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                    ( tmp = <STRING>                        {this.setValue(property, "refAdminName", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "refAdminName", this.getSingle(tmp.image));} ) ) )* )
    )*
}
