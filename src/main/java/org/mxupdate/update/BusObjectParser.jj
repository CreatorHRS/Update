/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.6";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(BusObjectParser)
package org.mxupdate.update;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;

import org.mxupdate.mapping.TypeDef_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.BusObject_mxJPO.Connection;
import org.mxupdate.update.util.ParameterCache_mxJPO;


/**
 * Parses the update format for {@link BusObject_mxJPO}.
 */
@SuppressWarnings("unused")
class BusObjectParser
    extends AbstractParser_mxJPO<BusObject_mxJPO>
{
}

PARSER_END(BusObjectParser)

<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

TOKEN :
{

      <TYPE:                    "type">                                         : STRING_EXPECTED
    | <DESCRIPTION:             "description">                                  : MULTILINESTRING_EXPECTED
    | <CURRENT:                 "current">                                      : STRING_EXPECTED
    | <ATTRIBUTE:               "attribute">                                    : ATTRIBUTE_EXPECTED
}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u0009","\u000b"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/********************************************************* Attribute Name String */
<ATTRIBUTE_EXPECTED> TOKEN :
{
      <ATTRIBUTE_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : MULTILINESTRING_EXPECTED
    | <ATTRIBUTE_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : MULTILINESTRING_EXPECTED
}

/******************************************************************* Connection */
<DEFAULT> TOKEN :
{
      <CONNECTION:                        "connection">                                   : STRING_EXPECTED
    | <CONNECTIONTO:                      "to">                                           : CON_TYPE_EXPECTED
    | <CONNECTIONFROM:                    "from">                                         : CON_TYPE_EXPECTED
}

<CON_TYPE_EXPECTED> TOKEN :
{
      <CON_TYPE_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : CON_NAME_EXPECTED
    | <CON_TYPE_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : CON_NAME_EXPECTED
}

<CON_NAME_EXPECTED> TOKEN :
{
      <CON_NAME_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : CON_REVISION_EXPECTED
    | <CON_NAME_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : CON_REVISION_EXPECTED
}

<CON_REVISION_EXPECTED> TOKEN :
{
      <CON_REVISION_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <CON_REVISION_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/**************************************************************************** */

/**
 * Parses one complete command definition.
 *
 * @param _command  target command to update with parsed values
 */
void parse(BusObject_mxJPO _busObject)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    Token tmp;
    Connection connection;
    String attrName;
} {
    (   ( <TYPE>                    ( tmp = <STRING>                    {this.setValue(_busObject, "busType", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                    {this.setValue(_busObject, "busType", this.getSingle(tmp.image));} ) )

      | (<DESCRIPTION>              ( tmp = <MULTILINESTRING>           {this.setValue(_busObject, "description", this.getString(tmp.image));}
                                    | tmp = <MULTILINESINGLE>           {this.setValue(_busObject, "description", this.getSingle(tmp.image));} ) )

      | (<CURRENT>                  ( tmp = <STRING>                    {this.setValue(_busObject, "busCurrent", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                    {this.setValue(_busObject, "busCurrent", this.getSingle(tmp.image));} ) )

      | ( <ATTRIBUTE>
            ( tmp = <ATTRIBUTE_STRING>                                  {attrName = this.getString(tmp.image);}
            | tmp = <ATTRIBUTE_SINGLE>                                  {attrName = this.getSingle(tmp.image);} )
                    ( tmp = <MULTILINESTRING>                           {this.putValue(_busObject, "attrValues", attrName, this.getString(tmp.image));}
                    | tmp = <MULTILINESINGLE>                           {this.putValue(_busObject, "attrValues", attrName, this.getSingle(tmp.image));} ) )

      | ( <CONNECTION>                                                  {connection = new Connection();this.appendValue(_busObject, "connections", connection);  }
            ( tmp = <STRING>                                            {this.setValue(connection, "relName", this.getString(tmp.image));}
            | tmp = <SINGLE>                                            {this.setValue(connection, "relName", this.getSingle(tmp.image));} )
                ( <CONNECTIONFROM>                                      {this.setValue(connection, "direction", "from");}
                | <CONNECTIONTO>                                        {this.setValue(connection, "direction", "to");} )
                    ( tmp = <CON_TYPE_STRING>                           {this.setValue(connection, "type", this.getString(tmp.image));}
                    | tmp = <CON_TYPE_SINGLE>                           {this.setValue(connection, "type", this.getSingle(tmp.image));} )
                        ( tmp = <CON_NAME_STRING>                       {this.setValue(connection, "name", this.getString(tmp.image));}
                        | tmp = <CON_NAME_SINGLE>                       {this.setValue(connection, "name", this.getSingle(tmp.image));} )
                                ( tmp = <CON_REVISION_STRING>           {this.setValue(connection, "revision", this.getString(tmp.image));}
                                | tmp = <CON_REVISION_SINGLE>           {this.setValue(connection, "revision", this.getSingle(tmp.image));} )
                                    ( "{"      ( <ATTRIBUTE>
            ( tmp = <ATTRIBUTE_STRING>                                  {attrName = this.getString(tmp.image);}
            | tmp = <ATTRIBUTE_SINGLE>                                  {attrName = this.getSingle(tmp.image);} )
                    ( tmp = <MULTILINESTRING>                           {this.putValue(connection, "attrValues", attrName, this.getString(tmp.image));}
                    | tmp = <MULTILINESINGLE>                           {this.putValue(connection, "attrValues", attrName, this.getSingle(tmp.image));} ) )* "}" )*

/*
                    <CONNECTION_OPEN>
                            ( <CONNECTION_TYPE>         ( tmp = <CONNECTION_STRING>             {this.setValue(connection, "type",           this.getString(tmp.image));}
                                                        | tmp = <CONNECTION_SINGLE>             {this.setValue(connection, "type",           this.getSingle(tmp.image));} )
                            | <CONNECTION_NAME>         ( tmp = <CONNECTION_STRING>             {this.setValue(connection, "name",           this.getString(tmp.image));}
                                                        | tmp = <CONNECTION_SINGLE>             {this.setValue(connection, "name",           this.getSingle(tmp.image));} )
                            | <CONNECTION_REVISION>     ( tmp = <CONNECTION_STRING>             {this.setValue(connection, "revision",       this.getString(tmp.image));}
                                                        | tmp = <CONNECTION_SINGLE>             {this.setValue(connection, "revision",       this.getSingle(tmp.image));} )
                            | (<CONNECTION_ATTRIBUTE>
                                         ( tmp = <CONNECTION_ATTRIBUTE_STRING>                  {attrName = this.getString(tmp.image);}
                                         | tmp = <CONNECTION_ATTRIBUTE_SINGLE>                  {attrName = this.getSingle(tmp.image);} )
                                                    ( tmp = <CONNECTION_MULTILINESTRING>        {this.putValue(_busObject, "attrValues", attrName, this.getString(tmp.image));}
                                                    | tmp = <CONNECTION_MULTILINESINGLE>        {this.putValue(_busObject, "attrValues", attrName, this.getSingle(tmp.image));} ) ) )* <CONNECTION_CLOSE>*/
        )
    )*
}
