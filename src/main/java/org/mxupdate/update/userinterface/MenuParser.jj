/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.7";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(MenuParser)
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.userinterface;

import java.lang.reflect.InvocationTargetException;

import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.AbstractRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.CommandRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.MenuRef;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Menu_mxJPO}.
 */
@SuppressWarnings("unused")
class MenuParser
    extends AbstractParser_mxJPO
{
}

PARSER_END(MenuParser)

<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

TOKEN :
{
      <PACKAGE:                             "package">                                      : STRING_EXPECTED

    | <UUID:                                "uuid">                                         : STRING_EXPECTED

    | <SYMBOLICNAME:                        "symbolicname">                                 : STRING_EXPECTED

    | <DESCRIPTION:                         "description">                                  : MULTILINESTRING_EXPECTED

    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_FALSE:                        "!hidden">

    | <TREEMENU_TRUE:                       "treemenu">
    | <TREEMENU_FALSE:                      "!treemenu">

    | <ALT:                                 "alt">                                          : STRING_EXPECTED

    | <HREF:                                "href">                                         : STRING_EXPECTED

    | <LABEL:                               "label">                                        : STRING_EXPECTED

    | <COMMAND:                             ("add" ([" ","\t","\n","\r"])+ )? "command">    : STRING_EXPECTED

    | <MENU:                                ("add" ([" ","\t","\n","\r"])+ )? "menu">       : STRING_EXPECTED
}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\n" | "\t" | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" | "\\t" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/********************************************************* Setting Key String */
<DEFAULT> TOKEN :
{
      <SETTING:                 ("add" ([" ","\t","\n","\r"])+ )? "setting">    : SETTING_EXPECTED
}

<SETTING_EXPECTED> TOKEN :
{
      <SETTING_STRING: ( "\"" ( ~["\u0000"-"\u0009","\u000b"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" )* "\"" )> : STRING_EXPECTED
    | <SETTING_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : ADMINREF_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED
}

/**************************************************************************** */

/**
 * Parses one complete menu definition.
 *
 * @param _menu     target menu to update with parsed values
 */
void parse(Menu_mxJPO _menu)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
    AbstractRef ref;
    int refIdx = 0;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_menu, "packageRef", str);} )

      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_menu, "properties", "propertiesStack", property);} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_menu, "symbolicNames", str);} )

      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_menu, "description", str);} )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_menu, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_menu, "hidden", false);} )

      | ( <TREEMENU_TRUE>                                                       {this.setValue(_menu, "treeMenu", true);} )
      | ( <TREEMENU_FALSE>                                                      {this.setValue(_menu, "treeMenu", false);} )

      | ( <ALT>                       str = string()                            {this.setValue(_menu, "alt", str);} )

      | ( <HREF>                      str = string()                            {this.setValue(_menu, "href", str);} )

      | ( <LABEL>                     str = string()                            {this.setValue(_menu, "label", str);} )

      | ( <SETTING>                   property = settingProperty()              {this.appendValue(_menu, "properties", "propertiesStack", property);} )

      | (<COMMAND>                    str = string()                            {ref = new CommandRef();this.setValue(ref, "column", refIdx++);this.appendValue(_menu, "children", "childrenStack", ref);this.setValue(ref, "name", str);} )
      | (<MENU>                       str = string()                            {ref = new MenuRef();   this.setValue(ref, "column", refIdx++);this.appendValue(_menu, "children", "childrenStack", ref);this.setValue(ref, "name", str);} )

      | (<PROPERTY>                   property = property()                     {this.appendValue(_menu, "properties", "propertiesStack", property);} )
    )*
}

/**
 * Parses the UUID property definition.
 */
AdminProperty uuidProperty() :
{
    String str;
    AdminProperty property = new AdminProperty();
}
{
    str = string()
    {this.setValue(property, "value", str);}
    {this.setValue(property, "name",  "UUID");}
    {return property;}
}

/**
 * Parses one setting.
 */
AdminProperty settingProperty() :
{
    String name, value;
    Token tmp;
    AdminProperty property = new AdminProperty();
}
{
    ( tmp = <SETTING_STRING>   {name = this.getString(tmp.image);}
    | tmp = <SETTING_SINGLE>   {name = this.getSingle(tmp.image);} )

    value = string()
    
    {this.setValue(property, "name", "%" + name);}
    {this.setValue(property, "value", value);}
    {return property;}
}

/**
 * Parses the properties definition.
 */
AdminProperty property() :
{
    String str;
    Token tmp;
    AdminProperty property = new AdminProperty();
}
{
    str = string()                                 {this.setValue(property, "name", str);}
    ( ( <PROPERTYVAL>  str = string()              {this.setValue(property, "value", str);} )
    | ( <PROPERTYTO>   ( tmp = <ADMINTYPE_STRING>  {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                       | tmp = <ADMINTYPE_SINGLE>  {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                   str = string()  {this.setValue(property, "refAdminName", str);} ) )*
    {return property;}
}

/**
 * Evaluates multi-line string.
 *
 * @return string
 */
String multiLineString() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <MULTILINESTRING>  {ret = this.getString(tmp.image);}
    | tmp = <MULTILINESINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}

/**
 * Evaluates single-line string.
 *
 * @return string
 */
String string() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <STRING>  {ret = this.getString(tmp.image);}
    | tmp = <SINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}
