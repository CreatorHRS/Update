/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.6";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    UNICODE_INPUT = true;
}
PARSER_BEGIN(TableParser)
package org.mxupdate.update.userinterface;

import java.lang.reflect.InvocationTargetException;

import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.ExpressionType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.SortType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.Setting;
import org.mxupdate.update.userinterface.Table_mxJPO.Column;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Table_mxJPO}. */
@SuppressWarnings("unused")
class TableParser
    extends AbstractParser_mxJPO
{
}
PARSER_END(TableParser)<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

<DEFAULT> TOKEN : /** first level */
{
      <SYMBOLICNAME:                        "symbolicname">                                 : STRING_EXPECTED

    | <DESCRIPTION:                         "description">                                  : MULTILINESTRING_EXPECTED

    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_FALSE:                        "!hidden">
}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u0009","\u000b"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/********************************************************************* Column */
<DEFAULT> TOKEN :
{
      <COLUMN:                              "column">                                       : COLUMN_OPENEXPECTED
}

<COLUMN_OPENEXPECTED> TOKEN :
{
      <COLUMN_OPEN:                         "{">                                            : COLUMN_EXPECTED
}

<COLUMN_EXPECTED> TOKEN :
{
      <COLUMN_CLOSE:                        "}">                                            : DEFAULT
    | <COLUMN_NAME:                         "name">                                         : COLUMN_STRING_EXPECTED
    | <COLUMN_LABEL:                        "label">                                        : COLUMN_STRING_EXPECTED
    | <COLUMN_SELECT:                       "select">                                       : COLUMN_STRING_EXPECTED
    | <COLUMN_BOBJ:                         "businessobject">                               : COLUMN_STRING_EXPECTED
    | <COLUMN_REL:                          "relationship">                                 : COLUMN_STRING_EXPECTED
    | <COLUMN_RANGE:                        "range">                                        : COLUMN_STRING_EXPECTED
    | <COLUMN_HREF:                         "href">                                         : COLUMN_STRING_EXPECTED
    | <COLUMN_ALT:                          "alt">                                          : COLUMN_STRING_EXPECTED
    | <COLUMN_HIDDEN_TRUE:                  "hidden">                                       : COLUMN_EXPECTED
    | <COLUMN_HIDDEN_FALSE:                 "!hidden">                                      : COLUMN_EXPECTED
    | <COLUMN_USER:                         "user">                                         : COLUMN_STRING_EXPECTED
    | <COLUMN_SORTTYPE:                     "sorttype">                                     : COLUMN_SORTTYPE_EXPECTED
    | <COLUMN_SETTING:                      "setting">                                      : COLUMN_SETTING_STRING_EXPECTED
}

<COLUMN_STRING_EXPECTED> TOKEN :
{
      <COLUMN_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : COLUMN_EXPECTED
    | <COLUMN_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : COLUMN_EXPECTED
}

<COLUMN_SETTING_STRING_EXPECTED> TOKEN :
{
      <SETTING_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : COLUMN_STRING_EXPECTED
    | <SETTING_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : COLUMN_STRING_EXPECTED
}

<COLUMN_SORTTYPE_EXPECTED> TOKEN :
{
      <COLUMN_SORTTYPE_ALPHA:               "alpha">                                        : COLUMN_EXPECTED
    | <COLUMN_SORTTYPE_NUMERIC:             "numeric">                                      : COLUMN_EXPECTED
    | <COLUMN_SORTTYPE_OTHER:               "other">                                        : COLUMN_EXPECTED
    | <COLUMN_SORTTYPE_NONE:                "none">                                         : COLUMN_EXPECTED
}


/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : ADMINREF_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED
}

/**************************************************************************** */
/**
 * Parses one complete interface definition.
 *
 * @param _form    target interface to update with parsed values
 */
void parse(final Table_mxJPO _table)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    Token tmp;
    AdminProperty property;
    Column column;
    Setting setting;
} {
    (   ( <SYMBOLICNAME>            ( tmp = <STRING>                        {this.appendValue(_table, "symbolicNames",                  this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_table, "symbolicNames",                  this.getSingle(tmp.image));} ) )

      | ( <DESCRIPTION>             ( tmp = <MULTILINESTRING>               {this.setValue(_table, "description",                       this.getString(tmp.image));}
                                    | tmp = <MULTILINESINGLE>               {this.setValue(_table, "description",                       this.getSingle(tmp.image));} ) )

      | ( <HIDDEN_TRUE>                                                     {this.setValue(_table, "hidden",                            true);} )
      | ( <HIDDEN_FALSE>                                                    {this.setValue(_table, "hidden",                            false);} )

      | ( <COLUMN>                                                          {column = new Column();this.appendValue(_table, "fields", column);  }
          <COLUMN_OPEN>
                    ( <COLUMN_NAME>     ( tmp = <COLUMN_STRING>             {this.setValue(column, "name",                              this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>             {this.setValue(column, "name",                              this.getSingle(tmp.image));} )
                    | <COLUMN_LABEL>    ( tmp = <COLUMN_STRING>             {this.setValue(column, "label",                             this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>             {this.setValue(column, "label",                             this.getSingle(tmp.image));} )
                    | <COLUMN_SELECT>   ( tmp = <COLUMN_STRING>             {this.setValue(column, "expression",                        this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>             {this.setValue(column, "expression",                        this.getSingle(tmp.image));} )
                    | <COLUMN_BOBJ>     ( tmp = <COLUMN_STRING>             {this.setValue(column, "expression",                        this.getString(tmp.image));this.setValue(column, "expressionType", ExpressionType.BUSINESSOBJECT);}
                                        | tmp = <COLUMN_SINGLE>             {this.setValue(column, "expression",                        this.getSingle(tmp.image));this.setValue(column, "expressionType", ExpressionType.BUSINESSOBJECT);} )
                    | <COLUMN_REL>      ( tmp = <COLUMN_STRING>             {this.setValue(column, "expression",                        this.getString(tmp.image));this.setValue(column, "expressionType", ExpressionType.RELATIONSHIP);}
                                        | tmp = <COLUMN_SINGLE>             {this.setValue(column, "expression",                        this.getSingle(tmp.image));this.setValue(column, "expressionType", ExpressionType.RELATIONSHIP);} )
                    | <COLUMN_RANGE>    ( tmp = <COLUMN_STRING>             {this.setValue(column, "range",                             this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>             {this.setValue(column, "range",                             this.getSingle(tmp.image));} )
                    | <COLUMN_HREF>     ( tmp = <COLUMN_STRING>             {this.setValue(column, "href",                              this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>             {this.setValue(column, "href",                              this.getSingle(tmp.image));} )
                    | <COLUMN_ALT>      ( tmp = <COLUMN_STRING>             {this.setValue(column, "alt",                               this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>             {this.setValue(column, "alt",                               this.getSingle(tmp.image));} )
                    | <COLUMN_HIDDEN_TRUE>                                  {this.setValue(column, "hidden",                            true);}
                    | <COLUMN_HIDDEN_FALSE>                                 {this.setValue(column, "hidden",                            false);}
                    | <COLUMN_USER>     ( tmp = <COLUMN_STRING>             {this.appendValue(column, "users",                          this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>             {this.appendValue(column, "users",                          this.getSingle(tmp.image));} )
                    | <COLUMN_SORTTYPE> ( <COLUMN_SORTTYPE_ALPHA>           {this.setValue(column, "sortType",                          SortType.ALPHANUMERIC);}
                                        | <COLUMN_SORTTYPE_NUMERIC>         {this.setValue(column, "sortType",                          SortType.NUMERIC);}
                                        | <COLUMN_SORTTYPE_OTHER>           {this.setValue(column, "sortType",                          SortType.OTHER);}
                                        | <COLUMN_SORTTYPE_NONE>            {this.setValue(column, "sortType",                          SortType.NONE);} )
                    | <COLUMN_SETTING>                                      {setting = new Setting();this.appendValue(column, "settings", setting);}
                                         ( tmp = <SETTING_STRING>           {this.setValue(setting, "name",                             this.getString(tmp.image));}
                                        | tmp = <SETTING_SINGLE>            {this.setValue(setting, "name",                             this.getSingle(tmp.image));} )
                                        ( tmp = <COLUMN_STRING>             {this.setValue(setting, "value",                            this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>             {this.setValue(setting, "value",                            this.getSingle(tmp.image));} ) ) *
          <COLUMN_CLOSE> )

      | ( <PROPERTY>                                                        {property = new AdminProperty();this.appendValue(_table, "properties", "propertiesStack", property);}
                                    ( tmp = <STRING>                        {this.setValue(property, "name", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "name", this.getSingle(tmp.image));} )
              (   ( <PROPERTYVAL>   ( tmp = <STRING>                        {this.setValue(property, "value", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "value", this.getSingle(tmp.image));} ) )
                | ( <PROPERTYTO>    ( tmp = <ADMINTYPE_STRING>              {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                                    | tmp = <ADMINTYPE_SINGLE>              {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                    ( tmp = <STRING>                        {this.setValue(property, "refAdminName", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "refAdminName", this.getSingle(tmp.image));} ) ) )* )
    )*
}
