/* GroupParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. GroupParserTokenManager.java */
package org.mxupdate.update.user;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;

/** Token Manager. */
@SuppressWarnings("unused")class GroupParserTokenManager_mxJPO implements GroupParserConstants_mxJPO {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(final java.io.PrintStream ds) { this.debugStream = ds; }
private int jjStopAtPos(final int pos, final int kind)
{
   this.jjmatchedKind = kind;
   this.jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(this.curChar)
   {
      case 33:
         return this.jjMoveStringLiteralDfa1_0(0x100L);
      case 100:
         return this.jjMoveStringLiteralDfa1_0(0x40L);
      case 104:
         return this.jjMoveStringLiteralDfa1_0(0x80L);
      case 112:
         return this.jjMoveStringLiteralDfa1_0(0x80200L);
      case 115:
         return this.jjMoveStringLiteralDfa1_0(0x420L);
      case 116:
         return this.jjMoveStringLiteralDfa1_0(0x100000L);
      case 118:
         return this.jjMoveStringLiteralDfa1_0(0x200000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_0(final long active0){
   try { this.curChar = this.input_stream.readChar(); }
   catch(final java.io.IOException e) {
      return 1;
   }
   switch(this.curChar)
   {
      case 97:
         return this.jjMoveStringLiteralDfa2_0(active0, 0x200200L);
      case 101:
         return this.jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 104:
         return this.jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 105:
         return this.jjMoveStringLiteralDfa2_0(active0, 0x480L);
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return this.jjStopAtPos(1, 20);
         break;
      case 114:
         return this.jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 121:
         return this.jjMoveStringLiteralDfa2_0(active0, 0x20L);
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa2_0(final long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 2;
   try { this.curChar = this.input_stream.readChar(); }
   catch(final java.io.IOException e) {
      return 2;
   }
   switch(this.curChar)
   {
      case 100:
         return this.jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 105:
         return this.jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 108:
         return this.jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 109:
         return this.jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 111:
         return this.jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 114:
         return this.jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 115:
         return this.jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 116:
         return this.jjMoveStringLiteralDfa3_0(active0, 0x400L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_0(final long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 3;
   try { this.curChar = this.input_stream.readChar(); }
   catch(final java.io.IOException e) {
      return 3;
   }
   switch(this.curChar)
   {
      case 98:
         return this.jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 99:
         return this.jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 100:
         return this.jjMoveStringLiteralDfa4_0(active0, 0x180L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return this.jjStopAtPos(3, 10);
         return this.jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 112:
         return this.jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 117:
         return this.jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_0(final long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 4;
   try { this.curChar = this.input_stream.readChar(); }
   catch(final java.io.IOException e) {
      return 4;
   }
   switch(this.curChar)
   {
      case 100:
         return this.jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return this.jjStopAtPos(4, 21);
         return this.jjMoveStringLiteralDfa5_0(active0, 0x80080L);
      case 110:
         return this.jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 111:
         return this.jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 114:
         return this.jjMoveStringLiteralDfa5_0(active0, 0x40L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_0(final long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 5;
   try { this.curChar = this.input_stream.readChar(); }
   catch(final java.io.IOException e) {
      return 5;
   }
   switch(this.curChar)
   {
      case 101:
         return this.jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 105:
         return this.jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 108:
         return this.jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 110:
         if ((active0 & 0x80L) != 0L)
            return this.jjStopAtPos(5, 7);
         break;
      case 114:
         return this.jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return this.jjStopAtPos(5, 9);
         break;
      default :
         return 6;
   }
   return 6;
}
private int jjMoveStringLiteralDfa6_0(final long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 6;
   try { this.curChar = this.input_stream.readChar(); }
   catch(final java.io.IOException e) {
      return 6;
   }
   switch(this.curChar)
   {
      case 105:
         return this.jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 110:
         if ((active0 & 0x100L) != 0L)
            return this.jjStopAtPos(6, 8);
         break;
      case 112:
         return this.jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 116:
         return this.jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      default :
         return 7;
   }
   return 7;
}
private int jjMoveStringLiteralDfa7_0(final long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 7;
   try { this.curChar = this.input_stream.readChar(); }
   catch(final java.io.IOException e) {
      return 7;
   }
   switch(this.curChar)
   {
      case 99:
         return this.jjMoveStringLiteralDfa8_0(active0, 0x20L);
      case 116:
         return this.jjMoveStringLiteralDfa8_0(active0, 0x40L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return this.jjStopAtPos(7, 19);
         break;
      default :
         return 8;
   }
   return 8;
}
private int jjMoveStringLiteralDfa8_0(final long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 8;
   try { this.curChar = this.input_stream.readChar(); }
   catch(final java.io.IOException e) {
      return 8;
   }
   switch(this.curChar)
   {
      case 105:
         return this.jjMoveStringLiteralDfa9_0(active0, 0x40L);
      case 110:
         return this.jjMoveStringLiteralDfa9_0(active0, 0x20L);
      default :
         return 9;
   }
}
private int jjMoveStringLiteralDfa9_0(final long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 9;
   try { this.curChar = this.input_stream.readChar(); }
   catch(final java.io.IOException e) {
      return 9;
   }
   switch(this.curChar)
   {
      case 97:
         return this.jjMoveStringLiteralDfa10_0(active0, 0x20L);
      case 111:
         return this.jjMoveStringLiteralDfa10_0(active0, 0x40L);
      default :
         return 10;
   }
}
private int jjMoveStringLiteralDfa10_0(final long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 10;
   try { this.curChar = this.input_stream.readChar(); }
   catch(final java.io.IOException e) {
      return 10;
   }
   switch(this.curChar)
   {
      case 109:
         return this.jjMoveStringLiteralDfa11_0(active0, 0x20L);
      case 110:
         if ((active0 & 0x40L) != 0L)
            return this.jjStopAtPos(10, 6);
         break;
      default :
         return 11;
   }
   return 11;
}
private int jjMoveStringLiteralDfa11_0(final long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 11;
   try { this.curChar = this.input_stream.readChar(); }
   catch(final java.io.IOException e) {
      return 11;
   }
   switch(this.curChar)
   {
      case 101:
         if ((active0 & 0x20L) != 0L)
            return this.jjStopAtPos(11, 5);
         break;
      default :
         return 12;
   }
   return 12;
}
private final int jjStopStringLiteralDfa_2(final int pos, final long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(final int pos, final long active0){
   return this.jjMoveNfa_2(this.jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(this.curChar)
   {
      default :
         return this.jjMoveNfa_2(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_2(final int startState, int curPos)
{
   int startsAt = 0;
   this.jjnewStateCnt = 6;
   int i = 1;
   this.jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++this.jjround == 0x7fffffff)
         this.ReInitRounds();
      if (this.curChar < 64)
      {
         final long l = 1L << this.curChar;
         do
         {
            switch(this.jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                     { this.jjCheckNAdd(5); }
                  }
                  else if (this.curChar == 34)
                     { this.jjCheckNAddStates(0, 2); }
                  break;
               case 1:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { this.jjCheckNAddStates(0, 2); }
                  break;
               case 2:
                  if (this.curChar == 34)
                     { this.jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if (this.curChar == 34 && kind > 26)
                     kind = 26;
                  break;
               case 5:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { this.jjCheckNAdd(5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (this.curChar < 128)
      {
         final long l = 1L << (this.curChar & 077);
         do
         {
            switch(this.jjstateSet[--i])
            {
               case 0:
               case 5:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { this.jjCheckNAdd(5); }
                  break;
               case 1:
                  { this.jjAddStates(0, 2); }
                  break;
               case 3:
                  if (this.curChar == 92)
                     this.jjstateSet[this.jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         final int i2 = (this.curChar & 0xff) >> 6;
         final long l2 = 1L << (this.curChar & 077);
         do
         {
            switch(this.jjstateSet[--i])
            {
               case 0:
               case 5:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { this.jjCheckNAdd(5); }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { this.jjAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         this.jjmatchedKind = kind;
         this.jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = this.jjnewStateCnt) == (startsAt = 6 - (this.jjnewStateCnt = startsAt)))
         return curPos;
      try { this.curChar = this.input_stream.readChar(); }
      catch(final java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(final int pos, final long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(final int pos, final long active0){
   return this.jjMoveNfa_1(this.jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(this.curChar)
   {
      default :
         return this.jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(final int startState, int curPos)
{
   int startsAt = 0;
   this.jjnewStateCnt = 6;
   int i = 1;
   this.jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++this.jjround == 0x7fffffff)
         this.ReInitRounds();
      if (this.curChar < 64)
      {
         final long l = 1L << this.curChar;
         do
         {
            switch(this.jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { this.jjCheckNAdd(5); }
                  }
                  else if (this.curChar == 34)
                     { this.jjCheckNAddStates(0, 2); }
                  break;
               case 1:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { this.jjCheckNAddStates(0, 2); }
                  break;
               case 2:
                  if (this.curChar == 34)
                     { this.jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if (this.curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 5:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { this.jjCheckNAdd(5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (this.curChar < 128)
      {
         final long l = 1L << (this.curChar & 077);
         do
         {
            switch(this.jjstateSet[--i])
            {
               case 0:
               case 5:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { this.jjCheckNAdd(5); }
                  break;
               case 1:
                  { this.jjAddStates(0, 2); }
                  break;
               case 3:
                  if (this.curChar == 92)
                     this.jjstateSet[this.jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         final int i2 = (this.curChar & 0xff) >> 6;
         final long l2 = 1L << (this.curChar & 077);
         do
         {
            switch(this.jjstateSet[--i])
            {
               case 0:
               case 5:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { this.jjCheckNAdd(5); }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { this.jjAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         this.jjmatchedKind = kind;
         this.jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = this.jjnewStateCnt) == (startsAt = 6 - (this.jjnewStateCnt = startsAt)))
         return curPos;
      try { this.curChar = this.input_stream.readChar(); }
      catch(final java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 3, 4,
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null,
"\163\171\155\142\157\154\151\143\156\141\155\145", "\144\145\163\143\162\151\160\164\151\157\156", "\150\151\144\144\145\156",
"\41\150\151\144\144\145\156", "\160\141\162\145\156\164", "\163\151\164\145", null, null, null, null, null,
null, null, null, "\160\162\157\160\145\162\164\171", "\164\157",
"\166\141\154\165\145", null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   final String im = jjstrLiteralImages[this.jjmatchedKind];
   curTokenImage = (im == null) ? this.input_stream.GetImage() : im;
   beginLine = this.input_stream.getBeginLine();
   beginColumn = this.input_stream.getBeginColumn();
   endLine = this.input_stream.getEndLine();
   endColumn = this.input_stream.getEndColumn();
   t = Token.newToken(this.jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken()
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      this.curChar = this.input_stream.BeginToken();
   }
   catch(final Exception e)
   {
      this.jjmatchedKind = 0;
      this.jjmatchedPos = -1;
      matchedToken = this.jjFillToken();
      return matchedToken;
   }

   switch(this.curLexState)
   {
     case 0:
       try { this.input_stream.backup(0);
          while (this.curChar <= 32 && (0x100002600L & (1L << this.curChar)) != 0L)
             this.curChar = this.input_stream.BeginToken();
       }
       catch (final java.io.IOException e1) { continue EOFLoop; }
       this.jjmatchedKind = 0x7fffffff;
       this.jjmatchedPos = 0;
       curPos = this.jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { this.input_stream.backup(0);
          while (this.curChar <= 32 && (0x100002600L & (1L << this.curChar)) != 0L)
             this.curChar = this.input_stream.BeginToken();
       }
       catch (final java.io.IOException e1) { continue EOFLoop; }
       this.jjmatchedKind = 0x7fffffff;
       this.jjmatchedPos = 0;
       curPos = this.jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { this.input_stream.backup(0);
          while (this.curChar <= 32 && (0x100002600L & (1L << this.curChar)) != 0L)
             this.curChar = this.input_stream.BeginToken();
       }
       catch (final java.io.IOException e1) { continue EOFLoop; }
       this.jjmatchedKind = 0x7fffffff;
       this.jjmatchedPos = 0;
       curPos = this.jjMoveStringLiteralDfa0_2();
       break;
   }
     if (this.jjmatchedKind != 0x7fffffff)
     {
        if (this.jjmatchedPos + 1 < curPos)
           this.input_stream.backup(curPos - this.jjmatchedPos - 1);
        if ((jjtoToken[this.jjmatchedKind >> 6] & (1L << (this.jjmatchedKind & 077))) != 0L)
        {
           matchedToken = this.jjFillToken();
       if (jjnewLexState[this.jjmatchedKind] != -1)
         this.curLexState = jjnewLexState[this.jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[this.jjmatchedKind] != -1)
           this.curLexState = jjnewLexState[this.jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = this.input_stream.getEndLine();
     int error_column = this.input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { this.input_stream.readChar(); this.input_stream.backup(1); }
     catch (final java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : this.input_stream.GetImage();
        if (this.curChar == '\n' || this.curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        this.input_stream.backup(1);
        error_after = curPos <= 1 ? "" : this.input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, this.curLexState, error_line, error_column, error_after, this.curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(final int state)
{
   if (this.jjrounds[state] != this.jjround)
   {
      this.jjstateSet[this.jjnewStateCnt++] = state;
      this.jjrounds[state] = this.jjround;
   }
}
private void jjAddStates(int start, final int end)
{
   do {
      this.jjstateSet[this.jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(final int state1, final int state2)
{
   this.jjCheckNAdd(state1);
   this.jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, final int end)
{
   do {
      this.jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public GroupParserTokenManager_mxJPO(final SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    this.input_stream = stream;
  }

  /** Constructor. */
  public GroupParserTokenManager_mxJPO (final SimpleCharStream stream, final int lexState){
    this.ReInit(stream);
    this.SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(final SimpleCharStream stream)
  {

    this.jjmatchedPos = this.jjnewStateCnt = 0;
    this.curLexState = this.defaultLexState;
    this.input_stream = stream;
    this.ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    this.jjround = 0x80000001;
    for (i = 6; i-- > 0;)
      this.jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( final SimpleCharStream stream, final int lexState)
  {

    this.ReInit( stream);
    this.SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(final int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      this.curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "STRING_EXPECTED",
   "ADMINREF_EXPECTED",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 0, 0, -1, -1, 1, 2, 1, -1, -1, -1,
   -1, 1, 1, -1, -1,
};
static final long[] jjtoToken = {
   0xc3987e1L,
};
static final long[] jjtoSkip = {
   0x3c0781eL,
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[6];
    private final int[] jjstateSet = new int[2 * 6];


    protected int curChar;
}
