/*
 * Copyright 2008-2015 The MxUpdate Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

options {
    JDK_VERSION = "1.7";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(PersonCIParser)
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.user;

import java.lang.reflect.InvocationTargetException;

import org.mxupdate.update.user.PersonCI_mxJPO.TypeItem;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link PersonCI_mxJPO}.
 */
@SuppressWarnings("unused")
class PersonCIParser
    extends AbstractParser_mxJPO
{
}

PARSER_END(PersonCIParser)

<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

<DEFAULT> TOKEN : /** first level */
{
      <PACKAGE:                             "package">                                      : STRING_EXPECTED

    | <UUID:                                "uuid">                                         : STRING_EXPECTED

    | <SYMBOLICNAME:                        "symbolicname">                                 : STRING_EXPECTED

    | <COMMENT:                             "comment">                                      : MULTILINESTRING_EXPECTED

    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_FALSE:                        "!hidden">

    | <ACTIVE_TRUE:                         "active">
    | <ACTIVE_FALSE:                        "!active">

    | <TRUSTED_TRUE:                        "trusted">
    | <TRUSTED_FALSE:                       "!trusted">

    | <EMAIL_TRUE:                          "email">
    | <EMAIL_FALSE:                         "!email">

    | <INCONMAIL_TRUE:                      "iconmail">
    | <INCONMAIL_FALSE:                     "!iconmail">

    | <VAULT:                               "vault" >                                       : STRING_EXPECTED

    | <APPLICATION:                         "application" >                                 : STRING_EXPECTED

    | <SITE:                                "site" >                                        : STRING_EXPECTED

    | <GROUP:                               "group" >                                       : STRING_EXPECTED

    | <ROLE:                                "role" >                                        : STRING_EXPECTED

    | <ADDRESS:                             "address">                                      : STRING_EXPECTED

    | <EMAILADDRESS:                        "emailaddress">                                 : STRING_EXPECTED

    | <FAX:                                 "fax">                                          : STRING_EXPECTED

    | <FULLNAME:                            "fullname">                                     : STRING_EXPECTED

    | <PHONE:                               "phone">                                        : STRING_EXPECTED
}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u0009","\u000b"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/********************************************************************* Access */
<DEFAULT> TOKEN :
{
       <ACCESS:                              "access">                                     : ACCESS_OPENEXPECTED
}

<ACCESS_OPENEXPECTED> TOKEN :
{
      <ACCESS_ALL:                           "all" >                                       : DEFAULT
    | <ACCESS_OPEN:                          "{">                                          : ACCESS_EXPECTED
}

<ACCESS_EXPECTED> TOKEN :
{
      <ACCESS_CLOSE:                         "}">                                           : DEFAULT
    | <ACCESS_EXPECTED_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+>
}

/********************************************************************** Admin */
<DEFAULT> TOKEN :
{
       <ADMIN:                              "admin">                                        : ADMIN_OPENEXPECTED
}

<ADMIN_OPENEXPECTED> TOKEN :
{
      <ADMIN_ALL:                           "all" >                                         : DEFAULT
    | <ADMIN_OPEN:                          "{">                                            : ADMIN_EXPECTED
}

<ADMIN_EXPECTED> TOKEN :
{
      <ADMIN_CLOSE:                         "}">                                           : DEFAULT
    | <ADMIN_EXPECTED_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+>
}

/*********************************************************************** Type */
<DEFAULT> TOKEN :
{
       <TYPE:                                "type">                                        : TYPE_OPENEXPECTED
}

<TYPE_OPENEXPECTED> TOKEN :
{
      <TYPE_OPEN:                            "{">                                          : TYPE_EXPECTED
}

<TYPE_EXPECTED> TOKEN :
{
      <TYPE_CLOSE:                           "}">                                           : DEFAULT
    | <TYPE_APPLICATION:                     "application">                                 : TYPE_EXPECTED
    | <TYPE_FULL:                            "full">                                        : TYPE_EXPECTED
    | <TYPE_BUSINESS:                        "business">                                    : TYPE_EXPECTED
    | <TYPE_SYSTEM:                          "system">                                      : TYPE_EXPECTED
}

/******************************************************************** Product */

<DEFAULT> TOKEN :
{
      <PRODUCT:                              "product">                                    : PRODUCT_OPENEXPECTED
}

<PRODUCT_OPENEXPECTED> TOKEN :
{
      <PRODUCT_OPEN:                         "{">                                          : PRODUCT_EXPECTED
}

<PRODUCT_EXPECTED> TOKEN :
{
      <PRODUCT_CLOSE:                        "}">                                           : DEFAULT
    | <PRODUCT_EXPECTED_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+>
}

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : ADMINREF_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED
}

/**************************************************************************** */

/**
 * Parses one complete person definition.
 *
 * @param _person  target admin person to update with parsed values
 */
void parse(final PersonCI_mxJPO _person)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Token tmp;
    AdminProperty property;
} 
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_person, "packageRef", str);} )

      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_person, "properties", "propertiesStack", property);} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_person, "symbolicNames", str);} )

      | ( <COMMENT>                   str = multiLineString()                   {this.setValue(_person, "description", str);} )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_person, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_person, "hidden", false);} )

      | ( <ACTIVE_TRUE>                                                         {this.setValue(_person, "active", true);} )
      | ( <ACTIVE_FALSE>                                                        {this.setValue(_person, "active", false);} )

      | ( <TRUSTED_TRUE>                                                        {this.setValue(_person, "trusted", true);} )
      | ( <TRUSTED_FALSE>                                                       {this.setValue(_person, "trusted", false);} )

      | ( <ACCESS>      ( <ACCESS_ALL>                                          {this.clearValues(_person, "access");this.appendValue(_person, "access", "all");}
                        | <ACCESS_OPEN>                                         {this.clearValues(_person, "access");}
                                        ( tmp = <ACCESS_EXPECTED_SINGLE>        {this.appendValue(_person, "access", this.getString(tmp.image));} )* <ACCESS_CLOSE > ) )

      | ( <ADMIN>       ( <ADMIN_ALL>                                           {this.clearValues(_person, "admin");this.appendValue(_person, "admin", "all");}
                        | <ADMIN_OPEN>                                          {this.clearValues(_person, "admin");}
                                        ( tmp = <ADMIN_EXPECTED_SINGLE>         {this.appendValue(_person, "admin", this.getString(tmp.image));} )* <ADMIN_CLOSE > ) )

      | ( <EMAIL_TRUE>                                                          {this.setValue(_person, "email", true);} )
      | ( <EMAIL_FALSE>                                                         {this.setValue(_person, "email", false);} )
      | ( <INCONMAIL_TRUE>                                                      {this.setValue(_person, "iconmail", true);} )
      | ( <INCONMAIL_FALSE>                                                     {this.setValue(_person, "iconmail", false);} )

      | ( <ADDRESS>                   str = string()                            {this.setValue(_person, "address", str);} )
      | ( <EMAILADDRESS>              str = string()                            {this.setValue(_person, "emailAddress", str);} )
      | ( <FAX>                       str = string()                            {this.setValue(_person, "fax", str);} )
      | ( <FULLNAME>                  str = string()                            {this.setValue(_person, "fullName", str);} )
      | ( <PHONE>                     str = string()                            {this.setValue(_person, "phone", str);} )

      | ( <PRODUCT> <PRODUCT_OPEN>  ( tmp = <PRODUCT_EXPECTED_SINGLE>           {this.appendValue(_person, "products", this.getString(tmp.image));} )* <PRODUCT_CLOSE> )

      | ( <TYPE> <TYPE_OPEN>                                                    {this.clearValues(_person, "types");}
                                    ( ( <TYPE_APPLICATION>                      {this.appendValue(_person, "types", TypeItem.APPLICATION);} )
                                    | ( <TYPE_FULL>                             {this.appendValue(_person, "types", TypeItem.FULL);} )
                                    | ( <TYPE_BUSINESS>                         {this.appendValue(_person, "types", TypeItem.BUSINESS);} )
                                    | ( <TYPE_SYSTEM>                           {this.appendValue(_person, "types", TypeItem.SYSTEM);} ) )* <TYPE_CLOSE > )

      | (<VAULT>                      str = string()                            {this.setValue(_person, "vault", str);} )
      | (<APPLICATION>                str = string()                            {this.setValue(_person, "application", str);} )
      | (<SITE>                       str = string()                            {this.setValue(_person, "site", str);} )

      | (<GROUP>                      str = string()                            {this.appendValue(_person, "groups", str);} )

      | (<ROLE>                       str = string()                            {this.appendValue(_person, "roles", str);} )

      | ( <PROPERTY>                  property = property()                     {this.appendValue(_person, "properties", "propertiesStack", property);} )
    )*
}

/**
 * Parses the UUID property definition.
 */
AdminProperty uuidProperty() :
{
    String str;
    AdminProperty property = new AdminProperty();
}
{
    str = string()
    {this.setValue(property, "value", str);}
    {this.setValue(property, "name",  "UUID");}
    {return property;}
}

/**
 * Parses the properties definition.
 */
AdminProperty property() :
{
    String str;
    Token tmp;
    AdminProperty property = new AdminProperty();
}
{
    str = string()                                 {this.setValue(property, "name", str);}
    ( ( <PROPERTYVAL>  str = string()              {this.setValue(property, "value", str);} )
    | ( <PROPERTYTO>   ( tmp = <ADMINTYPE_STRING>  {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                       | tmp = <ADMINTYPE_SINGLE>  {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                   str = string()  {this.setValue(property, "refAdminName", str);} ) )*
    {return property;}
}

/**
 * Evaluates multi-line string.
 *
 * @return string
 */
String multiLineString() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <MULTILINESTRING>  {ret = this.getString(tmp.image);}
    | tmp = <MULTILINESINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}

/**
 * Evaluates single-line string.
 *
 * @return string
 */
String string() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <STRING>  {ret = this.getString(tmp.image);}
    | tmp = <SINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}
