/* AssociationParser.java */
/* Generated By:JavaCC: Do not edit this line. AssociationParser.java */
package org.mxupdate.update.user;

import java.lang.reflect.InvocationTargetException;

import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Assication_mxJPO}.
 */
@SuppressWarnings("unused")
class AssociationParser_mxJPO
    extends AbstractParser_mxJPO<Association_mxJPO> implements AssociationParserConstants_mxJPO {

/**************************************************************************** */

/**
 * Parses one complete association definition.
 *
 * @param _role     target association to update with parsed values
 */
  @Override
final public void parse(final Association_mxJPO _role) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {Token tmp;
    AdminProperty property;
    label_1:
    while (true) {
      switch ((this.jj_ntk==-1)?this.jj_ntk_f():this.jj_ntk) {
      case SYMBOLICNAME:
      case DESCRIPTION:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case DEFINITION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        this.jj_la1[0] = this.jj_gen;
        break label_1;
      }
      switch ((this.jj_ntk==-1)?this.jj_ntk_f():this.jj_ntk) {
      case SYMBOLICNAME:{
        this.jj_consume_token(SYMBOLICNAME);
        switch ((this.jj_ntk==-1)?this.jj_ntk_f():this.jj_ntk) {
        case STRING:{
          tmp = this.jj_consume_token(STRING);
this.appendValue(_role, "symbolicNames", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = this.jj_consume_token(SINGLE);
this.appendValue(_role, "symbolicNames", this.getSingle(tmp.image));
          break;
          }
        default:
          this.jj_la1[1] = this.jj_gen;
          this.jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case DESCRIPTION:{
        this.jj_consume_token(DESCRIPTION);
        switch ((this.jj_ntk==-1)?this.jj_ntk_f():this.jj_ntk) {
        case MULTILINESTRING:{
          tmp = this.jj_consume_token(MULTILINESTRING);
this.setValue(_role, "description",                            this.getString(tmp.image));
          break;
          }
        case MULTILINESINGLE:{
          tmp = this.jj_consume_token(MULTILINESINGLE);
this.setValue(_role, "description",                            this.getSingle(tmp.image));
          break;
          }
        default:
          this.jj_la1[2] = this.jj_gen;
          this.jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case HIDDEN_TRUE:{
        this.jj_consume_token(HIDDEN_TRUE);
this.setValue(_role, "hidden",                                 true);
        break;
        }
      case HIDDEN_FALSE:{
        this.jj_consume_token(HIDDEN_FALSE);
this.setValue(_role, "hidden",                                 false);
        break;
        }
      case DEFINITION:{
        this.jj_consume_token(DEFINITION);
        switch ((this.jj_ntk==-1)?this.jj_ntk_f():this.jj_ntk) {
        case STRING:{
          tmp = this.jj_consume_token(STRING);
this.setValue(_role, "definition",                             this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = this.jj_consume_token(SINGLE);
this.setValue(_role, "definition",                             this.getSingle(tmp.image));
          break;
          }
        default:
          this.jj_la1[3] = this.jj_gen;
          this.jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case PROPERTY:{
        this.jj_consume_token(PROPERTY);
property = new AdminProperty();this.appendValue(_role, "properties", "propertiesStack", property);
        switch ((this.jj_ntk==-1)?this.jj_ntk_f():this.jj_ntk) {
        case STRING:{
          tmp = this.jj_consume_token(STRING);
this.setValue(property, "name", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = this.jj_consume_token(SINGLE);
this.setValue(property, "name", this.getSingle(tmp.image));
          break;
          }
        default:
          this.jj_la1[4] = this.jj_gen;
          this.jj_consume_token(-1);
          throw new ParseException();
        }
        label_2:
        while (true) {
          switch ((this.jj_ntk==-1)?this.jj_ntk_f():this.jj_ntk) {
          case PROPERTYTO:
          case PROPERTYVAL:{
            ;
            break;
            }
          default:
            this.jj_la1[5] = this.jj_gen;
            break label_2;
          }
          switch ((this.jj_ntk==-1)?this.jj_ntk_f():this.jj_ntk) {
          case PROPERTYVAL:{
            this.jj_consume_token(PROPERTYVAL);
            switch ((this.jj_ntk==-1)?this.jj_ntk_f():this.jj_ntk) {
            case STRING:{
              tmp = this.jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = this.jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
              break;
              }
            default:
              this.jj_la1[6] = this.jj_gen;
              this.jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case PROPERTYTO:{
            this.jj_consume_token(PROPERTYTO);
            switch ((this.jj_ntk==-1)?this.jj_ntk_f():this.jj_ntk) {
            case ADMINTYPE_STRING:{
              tmp = this.jj_consume_token(ADMINTYPE_STRING);
this.setValue(property, "refAdminType", this.getString(tmp.image));
              break;
              }
            case ADMINTYPE_SINGLE:{
              tmp = this.jj_consume_token(ADMINTYPE_SINGLE);
this.setValue(property, "refAdminType", this.getSingle(tmp.image));
              break;
              }
            default:
              this.jj_la1[7] = this.jj_gen;
              this.jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((this.jj_ntk==-1)?this.jj_ntk_f():this.jj_ntk) {
            case STRING:{
              tmp = this.jj_consume_token(STRING);
this.setValue(property, "refAdminName", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = this.jj_consume_token(SINGLE);
this.setValue(property, "refAdminName", this.getSingle(tmp.image));
              break;
              }
            default:
              this.jj_la1[8] = this.jj_gen;
              this.jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            this.jj_la1[9] = this.jj_gen;
            this.jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        this.jj_la1[10] = this.jj_gen;
        this.jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /** Generated Token Manager. */
  public AssociationParserTokenManager_mxJPO token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x43e0,0xc00,0x3000,0xc00,0xc00,0x18000,0xc00,0x60000,0xc00,0x18000,0x43e0,};
   }

  /** Constructor with InputStream. */
  public AssociationParser_mxJPO(final java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AssociationParser_mxJPO(final java.io.InputStream stream, final String encoding) {
    try { this.jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(final java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    this.token_source = new AssociationParserTokenManager_mxJPO(this.jj_input_stream);
    this.token = new Token();
    this.jj_ntk = -1;
    this.jj_gen = 0;
    for (int i = 0; i < 11; i++) this.jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(final java.io.InputStream stream) {
     this.ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(final java.io.InputStream stream, final String encoding) {
    try { this.jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(final java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    this.token_source.ReInit(this.jj_input_stream);
    this.token = new Token();
    this.jj_ntk = -1;
    this.jj_gen = 0;
    for (int i = 0; i < 11; i++) this.jj_la1[i] = -1;
  }

  /** Constructor. */
  public AssociationParser_mxJPO(final java.io.Reader stream) {
    this.jj_input_stream = new SimpleCharStream(stream, 1, 1);
    this.token_source = new AssociationParserTokenManager_mxJPO(this.jj_input_stream);
    this.token = new Token();
    this.jj_ntk = -1;
    this.jj_gen = 0;
    for (int i = 0; i < 11; i++) this.jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(final java.io.Reader stream) {
    if (this.jj_input_stream == null) {
      this.jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      this.jj_input_stream.ReInit(stream, 1, 1);
   }
   if (this.token_source == null) {
      this.token_source = new AssociationParserTokenManager_mxJPO(this.jj_input_stream);
   }

    this.token_source.ReInit(this.jj_input_stream);
    this.token = new Token();
    this.jj_ntk = -1;
    this.jj_gen = 0;
    for (int i = 0; i < 11; i++) this.jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AssociationParser_mxJPO(final AssociationParserTokenManager_mxJPO tm) {
    this.token_source = tm;
    this.token = new Token();
    this.jj_ntk = -1;
    this.jj_gen = 0;
    for (int i = 0; i < 11; i++) this.jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(final AssociationParserTokenManager_mxJPO tm) {
    this.token_source = tm;
    this.token = new Token();
    this.jj_ntk = -1;
    this.jj_gen = 0;
    for (int i = 0; i < 11; i++) this.jj_la1[i] = -1;
  }

  private Token jj_consume_token(final int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = this.token).next != null) this.token = this.token.next;
    else this.token = this.token.next = this.token_source.getNextToken();
    this.jj_ntk = -1;
    if (this.token.kind == kind) {
      this.jj_gen++;
      return this.token;
    }
    this.token = oldToken;
    this.jj_kind = kind;
    throw this.generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (this.token.next != null) this.token = this.token.next;
    else this.token = this.token.next = this.token_source.getNextToken();
    this.jj_ntk = -1;
    this.jj_gen++;
    return this.token;
  }

/** Get the specific Token. */
  final public Token getToken(final int index) {
    Token t = this.token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = this.token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((this.jj_nt=this.token.next) == null)
      return (this.jj_ntk = (this.token.next=this.token_source.getNextToken()).kind);
    else
      return (this.jj_ntk = this.jj_nt.kind);
  }

  private final java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    this.jj_expentries.clear();
    final boolean[] la1tokens = new boolean[19];
    if (this.jj_kind >= 0) {
      la1tokens[this.jj_kind] = true;
      this.jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (this.jj_la1[i] == this.jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        this.jj_expentry = new int[1];
        this.jj_expentry[0] = i;
        this.jj_expentries.add(this.jj_expentry);
      }
    }
    final int[][] exptokseq = new int[this.jj_expentries.size()][];
    for (int i = 0; i < this.jj_expentries.size(); i++) {
      exptokseq[i] = this.jj_expentries.get(i);
    }
    return new ParseException(this.token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
