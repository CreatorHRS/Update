/* Generated By:JavaCC: Do not edit this line. PersonAdminParserConstants.java */
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.user;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
interface PersonAdminParserConstants_mxJPO {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int KIND = 5;
  /** RegularExpression Id. */
  int UUID = 6;
  /** RegularExpression Id. */
  int SYMBOLICNAME = 7;
  /** RegularExpression Id. */
  int COMMENT = 8;
  /** RegularExpression Id. */
  int HIDDEN_TRUE = 9;
  /** RegularExpression Id. */
  int HIDDEN_FALSE = 10;
  /** RegularExpression Id. */
  int ACTIVE_TRUE = 11;
  /** RegularExpression Id. */
  int ACTIVE_FALSE = 12;
  /** RegularExpression Id. */
  int TRUSTED_TRUE = 13;
  /** RegularExpression Id. */
  int TRUSTED_FALSE = 14;
  /** RegularExpression Id. */
  int EMAIL_TRUE = 15;
  /** RegularExpression Id. */
  int EMAIL_FALSE = 16;
  /** RegularExpression Id. */
  int INCONMAIL_TRUE = 17;
  /** RegularExpression Id. */
  int INCONMAIL_FALSE = 18;
  /** RegularExpression Id. */
  int VAULT = 19;
  /** RegularExpression Id. */
  int APPLICATION = 20;
  /** RegularExpression Id. */
  int SITE = 21;
  /** RegularExpression Id. */
  int GROUP = 22;
  /** RegularExpression Id. */
  int ROLE = 23;
  /** RegularExpression Id. */
  int ADDRESS = 24;
  /** RegularExpression Id. */
  int EMAILADDRESS = 25;
  /** RegularExpression Id. */
  int FAX = 26;
  /** RegularExpression Id. */
  int FULLNAME = 27;
  /** RegularExpression Id. */
  int PHONE = 28;
  /** RegularExpression Id. */
  int STRING = 29;
  /** RegularExpression Id. */
  int SINGLE = 30;
  /** RegularExpression Id. */
  int MULTILINESTRING = 31;
  /** RegularExpression Id. */
  int MULTILINESINGLE = 32;
  /** RegularExpression Id. */
  int KIND_ADMIN = 33;
  /** RegularExpression Id. */
  int ACCESS = 34;
  /** RegularExpression Id. */
  int ACCESS_ALL = 35;
  /** RegularExpression Id. */
  int ACCESS_OPEN = 36;
  /** RegularExpression Id. */
  int ACCESS_CLOSE = 37;
  /** RegularExpression Id. */
  int ACCESS_EXPECTED_SINGLE = 38;
  /** RegularExpression Id. */
  int ADMIN = 39;
  /** RegularExpression Id. */
  int ADMIN_ALL = 40;
  /** RegularExpression Id. */
  int ADMIN_OPEN = 41;
  /** RegularExpression Id. */
  int ADMIN_CLOSE = 42;
  /** RegularExpression Id. */
  int ADMIN_EXPECTED_SINGLE = 43;
  /** RegularExpression Id. */
  int TYPE = 44;
  /** RegularExpression Id. */
  int TYPE_OPEN = 45;
  /** RegularExpression Id. */
  int TYPE_CLOSE = 46;
  /** RegularExpression Id. */
  int TYPE_APPLICATION = 47;
  /** RegularExpression Id. */
  int TYPE_FULL = 48;
  /** RegularExpression Id. */
  int TYPE_BUSINESS = 49;
  /** RegularExpression Id. */
  int TYPE_SYSTEM = 50;
  /** RegularExpression Id. */
  int PRODUCT = 51;
  /** RegularExpression Id. */
  int PRODUCT_OPEN = 52;
  /** RegularExpression Id. */
  int PRODUCT_CLOSE = 53;
  /** RegularExpression Id. */
  int PRODUCT_EXPECTED_SINGLE = 54;
  /** RegularExpression Id. */
  int PROPERTY = 55;
  /** RegularExpression Id. */
  int PROPERTYTO = 56;
  /** RegularExpression Id. */
  int PROPERTYVAL = 57;
  /** RegularExpression Id. */
  int ADMINTYPE_STRING = 58;
  /** RegularExpression Id. */
  int ADMINTYPE_SINGLE = 59;

  /** Lexical state. */
  int ADMINREF_EXPECTED = 0;
  /** Lexical state. */
  int PRODUCT_EXPECTED = 1;
  /** Lexical state. */
  int PRODUCT_OPENEXPECTED = 2;
  /** Lexical state. */
  int TYPE_EXPECTED = 3;
  /** Lexical state. */
  int TYPE_OPENEXPECTED = 4;
  /** Lexical state. */
  int ADMIN_EXPECTED = 5;
  /** Lexical state. */
  int ADMIN_OPENEXPECTED = 6;
  /** Lexical state. */
  int ACCESS_EXPECTED = 7;
  /** Lexical state. */
  int ACCESS_OPENEXPECTED = 8;
  /** Lexical state. */
  int KIND_EXPECTED = 9;
  /** Lexical state. */
  int MULTILINESTRING_EXPECTED = 10;
  /** Lexical state. */
  int STRING_EXPECTED = 11;
  /** Lexical state. */
  int DEFAULT = 12;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 4>",
    "\"kind\"",
    "\"uuid\"",
    "\"symbolicname\"",
    "\"comment\"",
    "\"hidden\"",
    "\"!hidden\"",
    "\"active\"",
    "\"!active\"",
    "\"trusted\"",
    "\"!trusted\"",
    "\"email\"",
    "\"!email\"",
    "\"iconmail\"",
    "\"!iconmail\"",
    "\"vault\"",
    "\"application\"",
    "\"site\"",
    "\"group\"",
    "\"role\"",
    "\"address\"",
    "\"emailaddress\"",
    "\"fax\"",
    "\"fullname\"",
    "\"phone\"",
    "<STRING>",
    "<SINGLE>",
    "<MULTILINESTRING>",
    "<MULTILINESINGLE>",
    "\"admin\"",
    "\"access\"",
    "\"all\"",
    "\"{\"",
    "\"}\"",
    "<ACCESS_EXPECTED_SINGLE>",
    "\"admin\"",
    "\"all\"",
    "\"{\"",
    "\"}\"",
    "<ADMIN_EXPECTED_SINGLE>",
    "\"type\"",
    "\"{\"",
    "\"}\"",
    "\"application\"",
    "\"full\"",
    "\"business\"",
    "\"system\"",
    "\"product\"",
    "\"{\"",
    "\"}\"",
    "<PRODUCT_EXPECTED_SINGLE>",
    "\"property\"",
    "\"to\"",
    "\"value\"",
    "<ADMINTYPE_STRING>",
    "<ADMINTYPE_SINGLE>",
  };

}
