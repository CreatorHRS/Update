/* Generated By:JavaCC: Do not edit this line. PolicyDefParserTokenManager.java */
package org.mxupdate.update.datamodel.policy;
import java.lang.reflect.InvocationTargetException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import org.mxupdate.mapping.TypeDef_mxJPO;
import org.mxupdate.update.datamodel.Policy_mxJPO;
import org.mxupdate.update.datamodel.Policy_mxJPO.Access;
import org.mxupdate.update.datamodel.Policy_mxJPO.AccessPrefix;
import org.mxupdate.update.datamodel.Policy_mxJPO.AccessFilter;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.ParameterCache_mxJPO;

/** Token Manager. */
class PolicyDefParserTokenManager_mxJPO implements PolicyDefParserConstants_mxJPO
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 62);
      case 125:
         return jjStopAtPos(0, 63);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(7);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0xfffffffb00000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 64)
                     kind = 64;
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 7:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(3, 5);
                  break;
               case 5:
                  if (curChar == 123)
                     jjCheckNAddStates(0, 2);
                  break;
               case 6:
                  if (curChar == 125)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_6(0x2000000L);
      case 123:
         return jjStopAtPos(0, 88);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_6(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa2_6(active1, 0x2000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_6(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 108:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 89);
         break;
      default :
         return 3;
   }
   return 3;
}
private int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 107);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAdd(7);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0xfffffffb00000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 72)
                     kind = 72;
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 7:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(3, 5);
                  break;
               case 5:
                  if (curChar == 123)
                     jjCheckNAddStates(0, 2);
                  break;
               case 6:
                  if (curChar == 125)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 104);
      case 125:
         return jjStopAtPos(0, 99);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAdd(7);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0xfffffffb00000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 100)
                     kind = 100;
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 7:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(3, 5);
                  break;
               case 5:
                  if (curChar == 123)
                     jjCheckNAddStates(0, 2);
                  break;
               case 6:
                  if (curChar == 125)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x100000000000L) != 0L)
            return 5;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2100010000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x200800000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x620L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000080L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4800000000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x183000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x408000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x11400000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x48002060000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20000008900L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000000040L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 123:
         return jjStartNfaWithStates_0(0, 108, 5);
      case 125:
         return jjStopAtPos(0, 109);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x102000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8042260e20L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x200800000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20080085000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40004000080L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x11000400000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8100L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x11000000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000008000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x11000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x620800000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x20004020000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000102000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80010400L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4008081000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400100L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2800000040L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x200080L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x2040000L);
      case 121:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200800020L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(3, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x8008000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x104060400L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x11000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x400080L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4002183000L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x2400000100L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x210000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40080008000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000800L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000080L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(4, 8);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(4, 15);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x80004800L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x11200000L);
      case 107:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2800000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(4, 26);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2100400000L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(4, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x4400183020L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x60000L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(4, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 99:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 28);
         break;
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(5, 38);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 104:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(5, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400040420L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(5, 14);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(5, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0xa00000L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(5, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x180000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x1003000L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(5, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000420000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(6, 22);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 37);
         return jjMoveStringLiteralDfa7_0(active0, 0x1a3000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(6, 21);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 36);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x10600L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000800000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(7, 11);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(7, 16);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(7, 34);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000400L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(7, 18);
         break;
      case 113:
         return jjMoveStringLiteralDfa8_0(active0, 0x3000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000020000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800020L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(8, 24);
         break;
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(8, 41);
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x180020L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(8, 10);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x3000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x180000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x180000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      case 110:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(10, 5);
         return jjMoveStringLiteralDfa11_0(active0, 0x3000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x20200L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x3000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x180000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(12, 12);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(12, 13);
         break;
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(12, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(12, 20);
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(12, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(13, 17);
         break;
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 121:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(14, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 1:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(6, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 2:
               case 3:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 0:
                  if (curChar == 123)
                     jjAddStates(8, 9);
                  break;
               case 4:
                  if (curChar == 125)
                     kind = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7c00f87a00000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x7c00f87a00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 34 && kind > 56)
                     kind = 56;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xf8000001d0000001L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 2:
                  if ((0xf8000001d0000001L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(7);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0xfffffffb00000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 80)
                     kind = 80;
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 7:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(3, 5);
                  break;
               case 5:
                  if (curChar == 123)
                     jjCheckNAddStates(0, 2);
                  break;
               case 6:
                  if (curChar == 125)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_9()
{
   return jjMoveNfa_9(0, 0);
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00000000L & l) == 0L)
                     break;
                  kind = 105;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  kind = 105;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 34)
                     jjAddStates(10, 11);
                  break;
               case 14:
                  if (curChar == 34 && kind > 48)
                     kind = 48;
                  break;
               case 20:
                  if (curChar == 34 && kind > 49)
                     kind = 49;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x2000000020L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 4:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 10:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 94);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   1, 2, 3, 4, 5, 6, 3, 4, 1, 2, 10, 15, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\144\145\163\143\162\151\160\164\151\157\156", 
"\164\171\160\145", "\146\157\162\155\141\164", "\163\164\157\162\145", 
"\144\145\146\141\165\154\164\146\157\162\155\141\164", "\144\145\154\151\155\151\164\145\162", "\163\145\161\165\145\156\143\145", 
"\155\151\156\157\162\163\145\161\165\145\156\143\145", "\155\141\152\157\162\163\145\161\165\145\156\143\145", 
"\150\151\144\144\145\156", "\163\164\141\164\145", "\141\154\154\163\164\141\164\145", 
"\162\145\147\151\163\164\145\162\145\144\116\141\155\145", "\162\145\166\151\163\151\157\156", 
"\155\151\156\157\162\162\145\166\151\163\151\157\156", "\155\141\152\157\162\162\145\166\151\163\151\157\156", 
"\166\145\162\163\151\157\156", "\160\162\157\155\157\164\145", 
"\143\150\145\143\153\157\165\164\150\151\163\164\157\162\171", "\160\165\142\154\151\163\150\145\144", "\162\145\166\157\153\145", 
"\154\157\147\151\156", "\157\167\156\145\162", "\160\165\142\154\151\143", "\165\163\145\162", 
"\153\145\171", "\146\151\154\164\145\162", "\141\143\164\151\157\156", 
"\143\150\145\143\153", "\157\166\145\162\162\151\144\145", "\151\156\160\165\164", 
"\164\162\151\147\147\145\162", "\141\160\160\162\157\166\145", "\151\147\156\157\162\145", 
"\162\145\152\145\143\164", "\142\162\141\156\143\150", "\163\151\147\156\141\164\165\162\145", 
"\162\157\165\164\145", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\173", "\175", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\173", "\141\154\154", null, null, null, null, 
"\173", null, null, null, null, "\175", null, null, null, null, "\173", null, null, 
"\175", "\173", "\175", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "B_EXPECTED",
   "D_EXPECTED",
   "LS_EXPECTED",
   "SL_EXPECTED",
   "S_EXPECTED",
   "LALL_EXPECTED",
   "L_EXPECTED",
   "L2_EXPECTED",
   "L3_EXPECTED",
   "L4_EXPECTED",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 5, 6, 6, 5, 5, 2, 5, 5, 5, 1, 5, -1, 5, 1, 1, 1, 1, 1, 1, 1, 
   -1, -1, -1, -1, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 5, 5, 3, -1, -1, -1, -1, -1, 0, 0, 
   -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, -1, 
   -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 8, 0, -1, -1, -1, -1, 8, -1, -1, -1, -1, 0, 
   -1, -1, -1, -1, 9, 10, -1, 8, -1, -1, 
};
static final long[] jjtoToken = {
   0xc1030fffffffffe1L, 0x3b3843030303L, 
};
static final long[] jjtoSkip = {
   0x3cf0f0000000001eL, 0x7bcf0f0f0L, 
};
protected SimpleCharStream_mxJPO input_stream;
private final int[] jjrounds = new int[21];
private final int[] jjstateSet = new int[42];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public PolicyDefParserTokenManager_mxJPO(SimpleCharStream_mxJPO stream){
   if (SimpleCharStream_mxJPO.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PolicyDefParserTokenManager_mxJPO(SimpleCharStream_mxJPO stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream_mxJPO stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 21; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream_mxJPO stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 11 || lexState < 0)
      throw new TokenMgrError_mxJPO("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError_mxJPO.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token_mxJPO jjFillToken()
{
   final Token_mxJPO t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token_mxJPO.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token_mxJPO getNextToken() 
{
  Token_mxJPO matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       jjmatchedKind = 105;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
     case 10:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError_mxJPO(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError_mxJPO.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token_mxJPO matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
