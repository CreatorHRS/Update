/* PolicyDefParser.java */
/* Generated By:JavaCC: Do not edit this line. PolicyDefParser.java */
package org.mxupdate.update.datamodel.policy;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.mxupdate.mapping.TypeDef_mxJPO;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.datamodel.Policy_mxJPO;
import org.mxupdate.update.datamodel.Policy_mxJPO.State;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO.Access;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO.Prefix;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;
import org.mxupdate.update.util.ParameterCache_mxJPO;

public class PolicyDefParser_mxJPO
    extends AbstractParser_mxJPO<Policy_mxJPO> implements PolicyDefParserConstants_mxJPO {

/**
 * Parses one complete policy definition.
 *
 * @param _policy   target policy to update with parsed values
 */
  final public void parse(final Policy_mxJPO _policy) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String tmpStr;
    Token tmp;
    AdminProperty property;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION:
      case TYPE:
      case FORMAT:
      case STORE:
      case DEFAULTFORMAT:
      case ENFORCE_TRUE:
      case ENFORCE_TRUE_VIA_VALUE:
      case ENFORCE_TRUE_VIA_VALUE_APOSTROPHE:
      case ENFORCE_FALSE:
      case ENFORCE_FALSE_VIA_VALUE:
      case ENFORCE_FALSE_VIA_VALUE_APOSTROPHE:
      case DELIMITER:
      case SEQUENCE:
      case MINORSEQUENCE:
      case MAJORSEQUENCE:
      case HIDDEN_TRUE:
      case HIDDEN_TRUE_VIA_VALUE:
      case HIDDEN_TRUE_VIA_VALUE_APOSTROPHE:
      case HIDDEN_FALSE:
      case HIDDEN_FALSE_VIA_VALUE:
      case HIDDEN_FALSE_VIA_VALUE_APOSTROPHE:
      case STATE:
      case ALLSTATE:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_STRING:{
          tmp = jj_consume_token(S_STRING);
this.setValue(_policy, "description", this.getString(tmp.image));
          break;
          }
        case S_SINGLE_STRING:{
          tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(_policy, "description", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case FORMAT:{
        format(_policy);
        break;
        }
      case TYPE:{
        type(_policy);
        break;
        }
      case DEFAULTFORMAT:{
        jj_consume_token(DEFAULTFORMAT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_STRING:{
          tmp = jj_consume_token(S_STRING);
this.setValue(_policy, "defaultFormat", this.getString(tmp.image));
          break;
          }
        case S_SINGLE_STRING:{
          tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(_policy, "defaultFormat", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ENFORCE_TRUE:
      case ENFORCE_TRUE_VIA_VALUE:
      case ENFORCE_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENFORCE_TRUE:{
          jj_consume_token(ENFORCE_TRUE);
          break;
          }
        case ENFORCE_TRUE_VIA_VALUE:{
          jj_consume_token(ENFORCE_TRUE_VIA_VALUE);
          break;
          }
        case ENFORCE_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(ENFORCE_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(_policy, "enforce", true);
        break;
        }
      case ENFORCE_FALSE:
      case ENFORCE_FALSE_VIA_VALUE:
      case ENFORCE_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENFORCE_FALSE:{
          jj_consume_token(ENFORCE_FALSE);
          break;
          }
        case ENFORCE_FALSE_VIA_VALUE:{
          jj_consume_token(ENFORCE_FALSE_VIA_VALUE);
          break;
          }
        case ENFORCE_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(ENFORCE_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(_policy, "enforce", false);
        break;
        }
      case DELIMITER:{
        jj_consume_token(DELIMITER);
        tmp = jj_consume_token(DELIMITER_CHAR);
this.setValue(_policy, "delimiter", this.getSingle(tmp.image));
        break;
        }
      case SEQUENCE:
      case MINORSEQUENCE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEQUENCE:{
          jj_consume_token(SEQUENCE);
          break;
          }
        case MINORSEQUENCE:{
          jj_consume_token(MINORSEQUENCE);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_STRING:{
          tmp = jj_consume_token(S_STRING);
this.setValue(_policy, "minorsequence", this.getString(tmp.image));
          break;
          }
        case S_SINGLE_STRING:{
          tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(_policy, "minorsequence", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case MAJORSEQUENCE:{
        jj_consume_token(MAJORSEQUENCE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_STRING:{
          tmp = jj_consume_token(S_STRING);
this.setValue(_policy, "majorsequence", this.getString(tmp.image));
          break;
          }
        case S_SINGLE_STRING:{
          tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(_policy, "majorsequence", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case STORE:{
        jj_consume_token(STORE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_STRING:{
          tmp = jj_consume_token(S_STRING);
this.setValue(_policy, "store", this.getString(tmp.image));
          break;
          }
        case S_SINGLE_STRING:{
          tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(_policy, "store", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case HIDDEN_TRUE:
      case HIDDEN_TRUE_VIA_VALUE:
      case HIDDEN_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case HIDDEN_TRUE:{
          jj_consume_token(HIDDEN_TRUE);
          break;
          }
        case HIDDEN_TRUE_VIA_VALUE:{
          jj_consume_token(HIDDEN_TRUE_VIA_VALUE);
          break;
          }
        case HIDDEN_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(HIDDEN_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(_policy, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:
      case HIDDEN_FALSE_VIA_VALUE:
      case HIDDEN_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case HIDDEN_FALSE:{
          jj_consume_token(HIDDEN_FALSE);
          break;
          }
        case HIDDEN_FALSE_VIA_VALUE:{
          jj_consume_token(HIDDEN_FALSE_VIA_VALUE);
          break;
          }
        case HIDDEN_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(HIDDEN_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(_policy, "hidden", false);
        break;
        }
      case ALLSTATE:{
        allstate(_policy);
        break;
        }
      case STATE:{
        state(_policy);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
property = new AdminProperty();this.appendValue(this.getValue(_policy, "properties"), "propertiesStack", property);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_STRING:{
          tmp = jj_consume_token(S_STRING);
this.setValue(property, "name", this.getString(tmp.image));
          break;
          }
        case S_SINGLE_STRING:{
          tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(property, "name", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYVAL:
          case PROPERTYTO:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYVAL:{
            jj_consume_token(PROPERTYVAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S_STRING:{
              tmp = jj_consume_token(S_STRING);
this.setValue(property, "value", this.getString(tmp.image));
              break;
              }
            case S_SINGLE_STRING:{
              tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(property, "value", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case PROPERTYTO:{
            jj_consume_token(PROPERTYTO);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SS_STRING:{
              tmp = jj_consume_token(SS_STRING);
this.setValue(property, "refAdminType", this.getString(tmp.image));
              break;
              }
            case SS_SINGLE:{
              tmp = jj_consume_token(SS_SINGLE);
this.setValue(property, "refAdminType", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S_STRING:{
              tmp = jj_consume_token(S_STRING);
this.setValue(property, "refAdminName", this.getString(tmp.image));
              break;
              }
            case S_SINGLE_STRING:{
              tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(property, "refAdminName", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[15] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * Format of a policy definition.
 *
 * @param _policy   current parsed policy
 */
  final public void format(final Policy_mxJPO _policy) throws ParseException {Set<String> set;
    jj_consume_token(FORMAT);
    if (jj_2_1(2)) {
      jj_consume_token(LALL_ALL);
set = new HashSet<String>();set.add("all");
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LALL_CURLY_BRACKET_OPEN:
      case L_CURLY_BRACKET_OPEN:{
        set = lList();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
this.getField(_policy, "formats").set(set);
  }

/**
 * Format of a type definition.
 *
 * @param _policy   current parsed policy
 */
  final public void type(final Policy_mxJPO _policy) throws ParseException {Set<String> set;
    jj_consume_token(TYPE);
    if (jj_2_2(2)) {
      jj_consume_token(LALL_ALL);
set = new HashSet<String>();set.add("all");
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LALL_CURLY_BRACKET_OPEN:
      case L_CURLY_BRACKET_OPEN:{
        set = lList();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
this.getField(_policy, "types").set(set);
  }

/**
 * Parses the all state definition.
 *
 * @param _policy   policy for which the all state definition is parsed
 */
  final public void allstate(final Policy_mxJPO _policy) throws ParseException {final AccessList_mxJPO accessList = this.getField(_policy, "allStateAccess").<AccessList_mxJPO>get();
    jj_consume_token(ALLSTATE);
    jj_consume_token(207);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REVOKE:
      case LOGIN:
      case OWNER:
      case PUBLIC:
      case USER:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OWNER:{
        stateOwnerAccess(Prefix.All, accessList);
        break;
        }
      case PUBLIC:{
        statePublicAccess(Prefix.All, accessList);
        break;
        }
      case USER:{
        stateUserAccess(Prefix.All, accessList);
        break;
        }
      case REVOKE:{
        jj_consume_token(REVOKE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OWNER:{
          stateOwnerAccess(Prefix.Revoke, accessList);
          break;
          }
        case PUBLIC:{
          statePublicAccess(Prefix.Revoke, accessList);
          break;
          }
        case USER:{
          stateUserAccess(Prefix.Revoke, accessList);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case LOGIN:{
        jj_consume_token(LOGIN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OWNER:{
          stateOwnerAccess(Prefix.Login,  accessList);
          break;
          }
        case PUBLIC:{
          statePublicAccess(Prefix.Login,  accessList);
          break;
          }
        case USER:{
          stateUserAccess(Prefix.Login,  accessList);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(208);
this.getField(_policy, "allState").set(true);
  }

/**
 * Parses one state definition.
 *
 * @param _policy   policy for which the all state definition is parsed
 */
  final public void state(final Policy_mxJPO _policy) throws ParseException {final State state = new State();
    final AccessList_mxJPO accessList = this.getField(state, "access").<AccessList_mxJPO>get();
    String tmpStr;
    Set<String> tmpSet;
    Token tmp;
    AdminProperty property;
    jj_consume_token(STATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_STRING:{
      tmp = jj_consume_token(S_STRING);
this.setValue(state, "name", this.getString(tmp.image));
      break;
      }
    case S_SINGLE_STRING:{
      tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(state, "name", this.getSingle(tmp.image));
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(207);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REGISTEREDNAME:
      case REVISION_TRUE:
      case REVISION_TRUE_VIA_VALUE:
      case REVISION_TRUE_VIA_VALUE_APOSTROPHE:
      case REVISION_FALSE:
      case REVISION_FALSE_VIA_VALUE:
      case REVISION_FALSE_VIA_VALUE_APOSTROPHE:
      case MINORREVISION_TRUE:
      case MINORREVISION_TRUE_VIA_VALUE:
      case MINORREVISION_TRUE_VIA_VALUE_APOSTROPHE:
      case MINORREVISION_FALSE:
      case MINORREVISION_FALSE_VIA_VALUE:
      case MINORREVISION_FALSE_VIA_VALUE_APOSTROPHE:
      case MAJORREVISION_TRUE:
      case MAJORREVISION_TRUE_VIA_VALUE:
      case MAJORREVISION_TRUE_VIA_VALUE_APOSTROPHE:
      case MAJORREVISION_FALSE:
      case MAJORREVISION_FALSE_VIA_VALUE:
      case MAJORREVISION_FALSE_VIA_VALUE_APOSTROPHE:
      case VERSION_TRUE:
      case VERSION_TRUE_VIA_VALUE:
      case VERSION_TRUE_VIA_VALUE_APOSTROPHE:
      case VERSION_FALSE:
      case VERSION_FALSE_VIA_VALUE:
      case VERSION_FALSE_VIA_VALUE_APOSTROPHE:
      case PROMOTE_TRUE:
      case PROMOTE_TRUE_VIA_VALUE:
      case PROMOTE_TRUE_VIA_VALUE_APOSTROPHE:
      case PROMOTE_FALSE:
      case PROMOTE_FALSE_VIA_VALUE:
      case PROMOTE_FALSE_VIA_VALUE_APOSTROPHE:
      case CHECKOUTHISTORY_TRUE:
      case CHECKOUTHISTORY_TRUE_VIA_VALUE:
      case CHECKOUTHISTORY_TRUE_VIA_VALUE_APOSTROPHE:
      case CHECKOUTHISTORY_FALSE:
      case CHECKOUTHISTORY_FALSE_VIA_VALUE:
      case CHECKOUTHISTORY_FALSE_VIA_VALUE_APOSTROPHE:
      case ENFORCERESERVEACCESS_TRUE:
      case ENFORCERESERVEACCESS_TRUE_VIA_VALUE:
      case ENFORCERESERVEACCESS_TRUE_VIA_VALUE_APOSTROPHE:
      case ENFORCERESERVEACCESS_FALSE:
      case ENFORCERESERVEACCESS_FALSE_VIA_NOT:
      case ENFORCERESERVEACCESS_FALSE_VIA_VALUE:
      case ENFORCERESERVEACCESS_FALSE_VIA_VALUE_APOSTROPHE:
      case PUBLISHED_TRUE:
      case PUBLISHED_TRUE_VIA_VALUE:
      case PUBLISHED_TRUE_VIA_VALUE_APOSTROPHE:
      case PUBLISHED_FALSE:
      case PUBLISHED_FALSE_VIA_VALUE:
      case PUBLISHED_FALSE_VIA_VALUE_APOSTROPHE:
      case REVOKE:
      case LOGIN:
      case OWNER:
      case PUBLIC:
      case USER:
      case ACTION:
      case CHECK:
      case TRIGGER:
      case SIGNATURE:
      case ROUTE:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REGISTEREDNAME:{
        jj_consume_token(REGISTEREDNAME);
        tmpStr = sString();
this.appendValue(state, "symbolicNames", tmpStr);
        break;
        }
      case REVISION_TRUE:
      case REVISION_TRUE_VIA_VALUE:
      case REVISION_TRUE_VIA_VALUE_APOSTROPHE:
      case MINORREVISION_TRUE:
      case MINORREVISION_TRUE_VIA_VALUE:
      case MINORREVISION_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINORREVISION_TRUE:{
          jj_consume_token(MINORREVISION_TRUE);
          break;
          }
        case MINORREVISION_TRUE_VIA_VALUE:{
          jj_consume_token(MINORREVISION_TRUE_VIA_VALUE);
          break;
          }
        case MINORREVISION_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(MINORREVISION_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        case REVISION_TRUE:{
          jj_consume_token(REVISION_TRUE);
          break;
          }
        case REVISION_TRUE_VIA_VALUE:{
          jj_consume_token(REVISION_TRUE_VIA_VALUE);
          break;
          }
        case REVISION_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(REVISION_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "minorrevisionable", true);
        break;
        }
      case REVISION_FALSE:
      case REVISION_FALSE_VIA_VALUE:
      case REVISION_FALSE_VIA_VALUE_APOSTROPHE:
      case MINORREVISION_FALSE:
      case MINORREVISION_FALSE_VIA_VALUE:
      case MINORREVISION_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINORREVISION_FALSE:{
          jj_consume_token(MINORREVISION_FALSE);
          break;
          }
        case MINORREVISION_FALSE_VIA_VALUE:{
          jj_consume_token(MINORREVISION_FALSE_VIA_VALUE);
          break;
          }
        case MINORREVISION_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(MINORREVISION_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        case REVISION_FALSE:{
          jj_consume_token(REVISION_FALSE);
          break;
          }
        case REVISION_FALSE_VIA_VALUE:{
          jj_consume_token(REVISION_FALSE_VIA_VALUE);
          break;
          }
        case REVISION_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(REVISION_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "minorrevisionable", false);
        break;
        }
      case MAJORREVISION_TRUE:
      case MAJORREVISION_TRUE_VIA_VALUE:
      case MAJORREVISION_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MAJORREVISION_TRUE:{
          jj_consume_token(MAJORREVISION_TRUE);
          break;
          }
        case MAJORREVISION_TRUE_VIA_VALUE:{
          jj_consume_token(MAJORREVISION_TRUE_VIA_VALUE);
          break;
          }
        case MAJORREVISION_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(MAJORREVISION_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "majorrevisionable", true);
        break;
        }
      case MAJORREVISION_FALSE:
      case MAJORREVISION_FALSE_VIA_VALUE:
      case MAJORREVISION_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MAJORREVISION_FALSE:{
          jj_consume_token(MAJORREVISION_FALSE);
          break;
          }
        case MAJORREVISION_FALSE_VIA_VALUE:{
          jj_consume_token(MAJORREVISION_FALSE_VIA_VALUE);
          break;
          }
        case MAJORREVISION_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(MAJORREVISION_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "majorrevisionable", false);
        break;
        }
      case VERSION_TRUE:
      case VERSION_TRUE_VIA_VALUE:
      case VERSION_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VERSION_TRUE:{
          jj_consume_token(VERSION_TRUE);
          break;
          }
        case VERSION_TRUE_VIA_VALUE:{
          jj_consume_token(VERSION_TRUE_VIA_VALUE);
          break;
          }
        case VERSION_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(VERSION_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "versionable", true);
        break;
        }
      case VERSION_FALSE:
      case VERSION_FALSE_VIA_VALUE:
      case VERSION_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VERSION_FALSE:{
          jj_consume_token(VERSION_FALSE);
          break;
          }
        case VERSION_FALSE_VIA_VALUE:{
          jj_consume_token(VERSION_FALSE_VIA_VALUE);
          break;
          }
        case VERSION_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(VERSION_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "versionable", false);
        break;
        }
      case PROMOTE_TRUE:
      case PROMOTE_TRUE_VIA_VALUE:
      case PROMOTE_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PROMOTE_TRUE:{
          jj_consume_token(PROMOTE_TRUE);
          break;
          }
        case PROMOTE_TRUE_VIA_VALUE:{
          jj_consume_token(PROMOTE_TRUE_VIA_VALUE);
          break;
          }
        case PROMOTE_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(PROMOTE_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "autoPromotion", true);
        break;
        }
      case PROMOTE_FALSE:
      case PROMOTE_FALSE_VIA_VALUE:
      case PROMOTE_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PROMOTE_FALSE:{
          jj_consume_token(PROMOTE_FALSE);
          break;
          }
        case PROMOTE_FALSE_VIA_VALUE:{
          jj_consume_token(PROMOTE_FALSE_VIA_VALUE);
          break;
          }
        case PROMOTE_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(PROMOTE_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "autoPromotion", false);
        break;
        }
      case CHECKOUTHISTORY_TRUE:
      case CHECKOUTHISTORY_TRUE_VIA_VALUE:
      case CHECKOUTHISTORY_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHECKOUTHISTORY_TRUE:{
          jj_consume_token(CHECKOUTHISTORY_TRUE);
          break;
          }
        case CHECKOUTHISTORY_TRUE_VIA_VALUE:{
          jj_consume_token(CHECKOUTHISTORY_TRUE_VIA_VALUE);
          break;
          }
        case CHECKOUTHISTORY_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(CHECKOUTHISTORY_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "checkoutHistory", true);
        break;
        }
      case CHECKOUTHISTORY_FALSE:
      case CHECKOUTHISTORY_FALSE_VIA_VALUE:
      case CHECKOUTHISTORY_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHECKOUTHISTORY_FALSE:{
          jj_consume_token(CHECKOUTHISTORY_FALSE);
          break;
          }
        case CHECKOUTHISTORY_FALSE_VIA_VALUE:{
          jj_consume_token(CHECKOUTHISTORY_FALSE_VIA_VALUE);
          break;
          }
        case CHECKOUTHISTORY_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(CHECKOUTHISTORY_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "checkoutHistory", false);
        break;
        }
      case ENFORCERESERVEACCESS_TRUE:
      case ENFORCERESERVEACCESS_TRUE_VIA_VALUE:
      case ENFORCERESERVEACCESS_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENFORCERESERVEACCESS_TRUE:{
          jj_consume_token(ENFORCERESERVEACCESS_TRUE);
          break;
          }
        case ENFORCERESERVEACCESS_TRUE_VIA_VALUE:{
          jj_consume_token(ENFORCERESERVEACCESS_TRUE_VIA_VALUE);
          break;
          }
        case ENFORCERESERVEACCESS_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(ENFORCERESERVEACCESS_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "enforcereserveaccess", true);
        break;
        }
      case ENFORCERESERVEACCESS_FALSE:
      case ENFORCERESERVEACCESS_FALSE_VIA_NOT:
      case ENFORCERESERVEACCESS_FALSE_VIA_VALUE:
      case ENFORCERESERVEACCESS_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENFORCERESERVEACCESS_FALSE:{
          jj_consume_token(ENFORCERESERVEACCESS_FALSE);
          break;
          }
        case ENFORCERESERVEACCESS_FALSE_VIA_NOT:{
          jj_consume_token(ENFORCERESERVEACCESS_FALSE_VIA_NOT);
          break;
          }
        case ENFORCERESERVEACCESS_FALSE_VIA_VALUE:{
          jj_consume_token(ENFORCERESERVEACCESS_FALSE_VIA_VALUE);
          break;
          }
        case ENFORCERESERVEACCESS_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(ENFORCERESERVEACCESS_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "enforcereserveaccess", false);
        break;
        }
      case PUBLISHED_TRUE:
      case PUBLISHED_TRUE_VIA_VALUE:
      case PUBLISHED_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLISHED_TRUE:{
          jj_consume_token(PUBLISHED_TRUE);
          break;
          }
        case PUBLISHED_TRUE_VIA_VALUE:{
          jj_consume_token(PUBLISHED_TRUE_VIA_VALUE);
          break;
          }
        case PUBLISHED_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(PUBLISHED_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "published", true);
        break;
        }
      case PUBLISHED_FALSE:
      case PUBLISHED_FALSE_VIA_VALUE:
      case PUBLISHED_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLISHED_FALSE:{
          jj_consume_token(PUBLISHED_FALSE);
          break;
          }
        case PUBLISHED_FALSE_VIA_VALUE:{
          jj_consume_token(PUBLISHED_FALSE_VIA_VALUE);
          break;
          }
        case PUBLISHED_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(PUBLISHED_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "published", false);
        break;
        }
      case OWNER:{
        stateOwnerAccess(Prefix.All, accessList);
        break;
        }
      case PUBLIC:{
        statePublicAccess(Prefix.All, accessList);
        break;
        }
      case USER:{
        stateUserAccess(Prefix.All, accessList);
        break;
        }
      case REVOKE:{
        jj_consume_token(REVOKE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OWNER:{
          stateOwnerAccess(Prefix.Revoke, accessList);
          break;
          }
        case PUBLIC:{
          statePublicAccess(Prefix.Revoke, accessList);
          break;
          }
        case USER:{
          stateUserAccess(Prefix.Revoke, accessList);
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case LOGIN:{
        jj_consume_token(LOGIN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OWNER:{
          stateOwnerAccess(Prefix.Login,  accessList);
          break;
          }
        case PUBLIC:{
          statePublicAccess(Prefix.Login,  accessList);
          break;
          }
        case USER:{
          stateUserAccess(Prefix.Login,  accessList);
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ACTION:{
        jj_consume_token(ACTION);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_STRING:{
          tmp = jj_consume_token(S_STRING);
this.setValue(state, "actionProgram", this.getString(tmp.image));
          break;
          }
        case S_SINGLE_STRING:{
          tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(state, "actionProgram", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(INPUT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_STRING:{
          tmp = jj_consume_token(S_STRING);
this.setValue(state, "actionInput", this.getString(tmp.image));
          break;
          }
        case S_SINGLE_STRING:{
          tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(state, "actionInput", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case CHECK:{
        jj_consume_token(CHECK);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_STRING:{
          tmp = jj_consume_token(S_STRING);
this.setValue(state, "checkProgram", this.getString(tmp.image));
          break;
          }
        case S_SINGLE_STRING:{
          tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(state, "checkProgram", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(INPUT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_STRING:{
          tmp = jj_consume_token(S_STRING);
this.setValue(state, "checkInput", this.getString(tmp.image));
          break;
          }
        case S_SINGLE_STRING:{
          tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(state, "checkInput", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ROUTE:{
        jj_consume_token(ROUTE);
        tmpSet = lsList();
this.getField(state, "routeUsers").set(tmpSet);
        tmpStr = sString();
this.getField(state, "routeMessage").set(tmpStr);
        break;
        }
      case TRIGGER:{
        stateTrigger(state);
        break;
        }
      case SIGNATURE:{
        stateSignature(state);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
property = new AdminProperty();this.appendValue(this.getValue(state, "properties"), "propertiesStack", property);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_STRING:{
          tmp = jj_consume_token(S_STRING);
this.setValue(property, "name", this.getString(tmp.image));
          break;
          }
        case S_SINGLE_STRING:{
          tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(property, "name", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYVAL:
          case PROPERTYTO:{
            ;
            break;
            }
          default:
            jj_la1[47] = jj_gen;
            break label_5;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYVAL:{
            jj_consume_token(PROPERTYVAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S_STRING:{
              tmp = jj_consume_token(S_STRING);
this.setValue(property, "value", this.getString(tmp.image));
              break;
              }
            case S_SINGLE_STRING:{
              tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(property, "value", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[48] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case PROPERTYTO:{
            jj_consume_token(PROPERTYTO);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SS_STRING:{
              tmp = jj_consume_token(SS_STRING);
this.setValue(property, "refAdminType", this.getString(tmp.image));
              break;
              }
            case SS_SINGLE:{
              tmp = jj_consume_token(SS_SINGLE);
this.setValue(property, "refAdminType", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[49] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S_STRING:{
              tmp = jj_consume_token(S_STRING);
this.setValue(property, "refAdminName", this.getString(tmp.image));
              break;
              }
            case S_SINGLE_STRING:{
              tmp = jj_consume_token(S_SINGLE_STRING);
this.setValue(property, "refAdminName", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[50] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[51] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(208);
this.appendValue(_policy, "states", state);
  }

/**
 * Parses the access and filter expression for the owner definition.
 *
 * @param _prefix   access filter prefix
 * @param _access   current parsed access definition of the policy
 */
  final public void stateOwnerAccess(final Prefix _prefix, final AccessList_mxJPO _accessList) throws ParseException {final Access access = new Access();
    jj_consume_token(OWNER);
    stateAccessDef(access);
this.getField(access, "prefix").set(_prefix);
        this.getField(access, "kind").set("owner");
        ((Collection<Access>)(this.getValue(_accessList, "accessList"))).add(access);
  }

/**
 * Parses the access and filter expression for the public definition.
 *
 * @param _prefix   access filter prefix
 * @param _access   current parsed access definition of the policy
 */
  final public void statePublicAccess(final Prefix _prefix, final AccessList_mxJPO _accessList) throws ParseException {final Access access = new Access();
    jj_consume_token(PUBLIC);
    stateAccessDef(access);
this.getField(access, "prefix").set(_prefix);
        this.getField(access, "kind").set("public");
        ((Collection<Access>)(this.getValue(_accessList, "accessList"))).add(access);
  }

/**
 * Parses the access and filter expression for a user definition.
 *
 * @param _prefix   access filter prefix
 * @param _access   current parsed access definition of the policy
 */
  final public void stateUserAccess(final Prefix _prefix, final AccessList_mxJPO _accessList) throws ParseException {final Access access = new Access();
    String user;
    jj_consume_token(USER);
    user = stateAccessString();
    stateAccessDef(access);
this.getField(access, "prefix").set(_prefix);
        this.getField(access, "kind").set("user");
        this.getField(access, "userRef").set(user);
        ((Collection<Access>)(this.getValue(_accessList, "accessList"))).add(access);
  }

  final public void stateAccessDef(final Access _access) throws ParseException {String key = null, filter = null, localfilter = null, organization = null, project = null, owner = null, reserve = null, maturity = null, category = null;
    Token access = null;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KEY:
      case ACCESS:
      case FILTER:
      case LOCALFILTER:
      case ORGANIZATION_ANY:
      case ORGANIZATION_SINGLE:
      case ORGANIZATION_ANCESTOR:
      case ORGANIZATION_DESCENDANT:
      case ORGANIZATION_RELATED:
      case PROJECT_ANY:
      case PROJECT_SINGLE:
      case PROJECT_ANCESTOR:
      case PROJECT_DESCENDANT:
      case PROJECT_RELATED:
      case OWNER_ANY:
      case OWNER_CONTEXT:
      case RESERVE_ANY:
      case RESERVE_CONTEXT:
      case RESERVE_NO:
      case RESERVE_INCLUSIVE:
      case MATURITY_ANY:
      case MATURITY_NO:
      case MATURITY_PUBLIC:
      case MATURITY_PROTECTED:
      case MATURITY_PRIVATE:
      case MATURITY_NOTPRIVATE:
      case MATURITY_PPP:
      case CATEGORY_ANY:
      case CATEGORY_OEM:
      case CATEGORY_GOLDPARTNER:
      case CATEGORY_PARTNER:
      case CATEGORY_SUPPLIER:
      case CATEGORY_CUSTOMER:
      case CATEGORY_CONTRACTOR:{
        ;
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KEY:{
        jj_consume_token(KEY);
        key = stateAccessString();
        break;
        }
      case FILTER:{
        jj_consume_token(FILTER);
        filter = sString();
        break;
        }
      case LOCALFILTER:{
        jj_consume_token(LOCALFILTER);
        localfilter = sString();
        break;
        }
      case ACCESS:{
        access = jj_consume_token(ACCESS);
        break;
        }
      case ORGANIZATION_ANY:{
        jj_consume_token(ORGANIZATION_ANY);
organization = "any";
        break;
        }
      case ORGANIZATION_SINGLE:{
        jj_consume_token(ORGANIZATION_SINGLE);
organization = "single";
        break;
        }
      case ORGANIZATION_ANCESTOR:{
        jj_consume_token(ORGANIZATION_ANCESTOR);
organization = "ancestor";
        break;
        }
      case ORGANIZATION_DESCENDANT:{
        jj_consume_token(ORGANIZATION_DESCENDANT);
organization = "descendant";
        break;
        }
      case ORGANIZATION_RELATED:{
        jj_consume_token(ORGANIZATION_RELATED);
organization = "related";
        break;
        }
      case PROJECT_ANY:{
        jj_consume_token(PROJECT_ANY);
project      = "any";
        break;
        }
      case PROJECT_SINGLE:{
        jj_consume_token(PROJECT_SINGLE);
project      = "single";
        break;
        }
      case PROJECT_ANCESTOR:{
        jj_consume_token(PROJECT_ANCESTOR);
project      = "ancestor";
        break;
        }
      case PROJECT_DESCENDANT:{
        jj_consume_token(PROJECT_DESCENDANT);
project      = "descendant";
        break;
        }
      case PROJECT_RELATED:{
        jj_consume_token(PROJECT_RELATED);
project      = "related";
        break;
        }
      case OWNER_ANY:{
        jj_consume_token(OWNER_ANY);
owner        = "any";
        break;
        }
      case OWNER_CONTEXT:{
        jj_consume_token(OWNER_CONTEXT);
owner        = "context";
        break;
        }
      case RESERVE_ANY:{
        jj_consume_token(RESERVE_ANY);
reserve      = "any";
        break;
        }
      case RESERVE_CONTEXT:{
        jj_consume_token(RESERVE_CONTEXT);
reserve      = "context";
        break;
        }
      case RESERVE_NO:{
        jj_consume_token(RESERVE_NO);
reserve      = "no";
        break;
        }
      case RESERVE_INCLUSIVE:{
        jj_consume_token(RESERVE_INCLUSIVE);
reserve      = "inclusive";
        break;
        }
      case MATURITY_ANY:{
        jj_consume_token(MATURITY_ANY);
maturity     = "any";
        break;
        }
      case MATURITY_NO:{
        jj_consume_token(MATURITY_NO);
maturity     = "no";
        break;
        }
      case MATURITY_PUBLIC:{
        jj_consume_token(MATURITY_PUBLIC);
maturity     = "public";
        break;
        }
      case MATURITY_PROTECTED:{
        jj_consume_token(MATURITY_PROTECTED);
maturity     = "protected";
        break;
        }
      case MATURITY_PRIVATE:{
        jj_consume_token(MATURITY_PRIVATE);
maturity     = "private";
        break;
        }
      case MATURITY_NOTPRIVATE:{
        jj_consume_token(MATURITY_NOTPRIVATE);
maturity     = "notprivate";
        break;
        }
      case MATURITY_PPP:{
        jj_consume_token(MATURITY_PPP);
maturity     = "ppp";
        break;
        }
      case CATEGORY_ANY:{
        jj_consume_token(CATEGORY_ANY);
category     = "any";
        break;
        }
      case CATEGORY_OEM:{
        jj_consume_token(CATEGORY_OEM);
category     = "oem";
        break;
        }
      case CATEGORY_GOLDPARTNER:{
        jj_consume_token(CATEGORY_GOLDPARTNER);
category     = "goldpartner";
        break;
        }
      case CATEGORY_PARTNER:{
        jj_consume_token(CATEGORY_PARTNER);
category     = "partner";
        break;
        }
      case CATEGORY_SUPPLIER:{
        jj_consume_token(CATEGORY_SUPPLIER);
category     = "supplier";
        break;
        }
      case CATEGORY_CUSTOMER:{
        jj_consume_token(CATEGORY_CUSTOMER);
category     = "customer";
        break;
        }
      case CATEGORY_CONTRACTOR:{
        jj_consume_token(CATEGORY_CONTRACTOR);
category     = "contractor";
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
this.setValue(_access, "key", key);
        this.setValue(_access, "filter", filter);
        this.setValue(_access, "localfilter", localfilter);
        this.setValue(_access, "organization", organization);
        this.setValue(_access, "project", project);
        this.setValue(_access, "owner", owner);
        this.setValue(_access, "reserve", reserve);
        this.setValue(_access, "maturity", maturity);
        this.setValue(_access, "category", category);

        if (access != null)  {
            final String tmp = access.image
                    .replaceFirst("^\\{", "").replaceFirst("\\}$", "")  // remove {}
                    .replaceAll("(\t)|(\n)", " ")                       // replace tabs, new lines
                    .replaceAll("( )+", " ")                            // multiple spaces => one space
                    .trim();                                            // remove trailing spaces
            this.setValue(_access, "access", Arrays.asList(tmp.split(" ")));
        }
  }

/**
 * Evaluates a simple string where the state access definition must follow.
 *
 * @return evaluated simple string
 */
  final public String stateAccessString() throws ParseException {Token tmp;
    String ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STATEACCESS_STRING:{
      tmp = jj_consume_token(STATEACCESS_STRING);
ret = this.getString(tmp.image);
      break;
      }
    case STATEACCESS_SINGLE_STRING:{
      tmp = jj_consume_token(STATEACCESS_SINGLE_STRING);
ret = this.getSingle(tmp.image);
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public void stateTrigger(final State _state) throws ParseException {final Trigger trigger = new Trigger();
    String tmp;
    jj_consume_token(TRIGGER);
    tmp = sString();
this.setValue(trigger, "eventType", tmp);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ACTION:{
      jj_consume_token(ACTION);
this.setValue(trigger, "kind", "action");
      break;
      }
    case CHECK:{
      jj_consume_token(CHECK);
this.setValue(trigger, "kind", "check");
      break;
      }
    case OVERRIDE:{
      jj_consume_token(OVERRIDE);
this.setValue(trigger, "kind", "override");
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    tmp = sString();
this.setValue(trigger, "program", tmp);
    jj_consume_token(INPUT);
    tmp = sString();
this.setValue(trigger, "arguments", tmp);
this.appendValue(this.getValue(_state, "triggers"), "triggersStack", trigger);
  }

  final public void stateSignature(final State _state) throws ParseException {final Policy_mxJPO.Signature signature = new Policy_mxJPO.Signature();
    String tmpStr;
    Set<String> tmpSet;
    jj_consume_token(SIGNATURE);
    tmpStr = sString();
this.getField(signature, "name").set(tmpStr);
    jj_consume_token(207);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case APPROVE:
      case IGNORE:
      case REJECT:
      case BRANCH:
      case FILTER:{
        ;
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRANCH:{
        jj_consume_token(BRANCH);
        tmpStr = sString();
this.getField(signature, "branch").set(tmpStr);
        break;
        }
      case APPROVE:{
        jj_consume_token(APPROVE);
        tmpSet = lList();
this.getField(signature, "approverUsers").set(tmpSet);
        break;
        }
      case IGNORE:{
        jj_consume_token(IGNORE);
        tmpSet = lList();
this.getField(signature, "ignoreUsers").set(tmpSet);
        break;
        }
      case REJECT:{
        jj_consume_token(REJECT);
        tmpSet = lList();
this.getField(signature, "rejectUsers").set(tmpSet);
        break;
        }
      case FILTER:{
        jj_consume_token(FILTER);
        tmpStr = sString();
this.getField(signature, "filter").set(tmpStr);
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(208);
this.appendValue(_state, "signatures", signature);
  }

/******************************************************************************/
  final public 
Set<String> lsList() throws ParseException {Token tmp;
    Set<String> ret = new HashSet<String>();
    jj_consume_token(LS_CURLY_BRACKET_OPEN);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LS_STRING:
      case LS_SINGLE_STRING:{
        ;
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LS_STRING:{
        tmp = jj_consume_token(LS_STRING);
ret.add(this.getString(tmp.image));
        break;
        }
      case LS_SINGLE_STRING:{
        tmp = jj_consume_token(LS_SINGLE_STRING);
ret.add(this.getSingle(tmp.image));
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(LS_CURLY_BRACKET_CLOSE);
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Set<String> lList() throws ParseException {Token tmp;
    Set<String> ret = new HashSet<String>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case L_CURLY_BRACKET_OPEN:{
      jj_consume_token(L_CURLY_BRACKET_OPEN);
      break;
      }
    case LALL_CURLY_BRACKET_OPEN:{
      jj_consume_token(LALL_CURLY_BRACKET_OPEN);
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case L_STRING:
      case L_SINGLE_STRING:
      case L2_CURLY_BRACKET_OPEN:{
        ;
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case L_STRING:{
        tmp = jj_consume_token(L_STRING);
ret.add(this.getString(tmp.image));
        break;
        }
      case L_SINGLE_STRING:{
        tmp = jj_consume_token(L_SINGLE_STRING);
ret.add(this.getSingle(tmp.image));
        break;
        }
      case L2_CURLY_BRACKET_OPEN:{
        jj_consume_token(L2_CURLY_BRACKET_OPEN);
        tmp = jj_consume_token(L3_BRACE_STRING);
ret.add(tmp.image);
        jj_consume_token(L4_CURLY_BRACKET_CLOSE);
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(L_CURLY_BRACKET_CLOSE);
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * Evaluates a simple string where a list must follow.
 *
 * @return evaluated simple string
 */
  final public String slString() throws ParseException {Token tmp;
    String ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SL_STRING:{
      tmp = jj_consume_token(SL_STRING);
ret = this.getString(tmp.image);
      break;
      }
    case SL_SINGLE_STRING:{
      tmp = jj_consume_token(SL_SINGLE_STRING);
ret = this.getSingle(tmp.image);
      break;
      }
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * Evaluates a simple string.
 *
 * @return evaluated simple string
 */
  final public String sString() throws ParseException {Token tmp;
    String ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_STRING:{
      tmp = jj_consume_token(S_STRING);
ret = this.getString(tmp.image);
      break;
      }
    case S_SINGLE_STRING:{
      tmp = jj_consume_token(S_SINGLE_STRING);
ret = this.getSingle(tmp.image);
      break;
      }
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(LALL_ALL)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(LALL_ALL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PolicyDefParserTokenManager_mxJPO token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[66];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffe0,0x0,0x0,0x1c00,0xe000,0x60000,0x0,0x0,0x0,0x700000,0x3800000,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffe0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0000000,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x38,0x1c7,0xe00,0x7000,0x38000,0x1c0000,0xe00000,0x7000000,0x38000000,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7c000,0x70000,0x70000,0x7c000,0x0,0x309fffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0xe,0xf0,0x700,0x3800,0x70000,0x70000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x309fffff,0x0,0x0,0x0,0x380000,0xf000000,0xf000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffff00c,0xfffff00c,0x300,0x0,0x1000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000,0x0,0x180000,0x0,0x6000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000,0x0,0x180000,0x0,0x6000,0x1000,0xfff,0xfff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x180000,0x180000,0x0,0x0,0x0,0x180000,0x180000,0x180000,0x0,0x0,0x180000,0x0,0x180000,0x0,0x180000,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x180000,0x180000,0x180000,0x180000,0x0,0x180000,0x0,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x8000000,0x0,0x0,0x1800,0x180000,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x980,0x980,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PolicyDefParser_mxJPO(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PolicyDefParser_mxJPO(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PolicyDefParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PolicyDefParser_mxJPO(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PolicyDefParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new PolicyDefParserTokenManager_mxJPO(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PolicyDefParser_mxJPO(PolicyDefParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PolicyDefParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[209];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 66; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 209; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
