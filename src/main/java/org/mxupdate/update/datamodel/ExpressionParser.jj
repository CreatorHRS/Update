/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.7";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(ExpressionParser)
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;

import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Expression_mxJPO}.
 */
@SuppressWarnings("unused")
class ExpressionParser
    extends AbstractParser_mxJPO
{
}

PARSER_END(ExpressionParser)

<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

<DEFAULT> TOKEN :
{
      <PACKAGE:                             "package">                                      : STRING_EXPECTED

    | <UUID:                                "uuid">                                         : STRING_EXPECTED

    | <SYMBOLICNAME:                        "symbolicname">                                 : STRING_EXPECTED

    | <DESCRIPTION:                         "description">                                  : MULTILINESTRING_EXPECTED

    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_FALSE:                        "!hidden">

    | <VALUE:                               "value">                                        : MULTILINESTRING_EXPECTED
}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\n" | "\t" | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" | "\\t" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : ADMINREF_EXPECTED
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED
}

/**************************************************************************** */

/**
 * Parses one complete expression definition.
 *
 * @param _expression   target expression to update with parsed values
 */
void parse(final Expression_mxJPO _expression)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    String str;
    Token tmp;
    AdminProperty property = null;
} {
    (   ( <PACKAGE>                   str = string()                            {this.setValue(_expression, "packageRef", str);} )

      | ( <UUID>                                                                {property = new AdminProperty();
                                                                                 this.appendValue(this.getValue(_expression, "properties"), "propertiesStack", property);
                                                                                 this.setValue(property, "name",  "UUID");}
                                      str = string()                            {this.setValue(property, "value", str);property = null;} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_expression, "symbolicNames", str);property = null;} )

      | ( <DESCRIPTION>             ( tmp = <MULTILINESTRING>                   {this.setValue(_expression, "description",      this.getString(tmp.image));property = null;}
                                    | tmp = <MULTILINESINGLE>                   {this.setValue(_expression, "description",      this.getSingle(tmp.image));property = null;} ) )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_expression, "hidden",           true); property = null;} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_expression, "hidden",           false);property = null;} )

      | ( <VALUE>                   ( tmp = <MULTILINESTRING>                   {str = this.getString(tmp.image);}
                                    | tmp = <MULTILINESINGLE>                   {str = this.getSingle(tmp.image);} )
                                                                                {   // hint: token value is used twice
                                                                                    // (for property and as expression value)
                                                                                    // => staffed via property variable
                                                                                    if (property == null)  {
                                                                                        this.setValue(_expression, "value", str);
                                                                                    } else  {
                                                                                        this.setValue(property, "value", str);
                                                                                        property = null;
                                                                                    }
                                                                                } )

      | ( <PROPERTY>                                                            {property = new AdminProperty();this.appendValue(_expression, "properties", "propertiesStack", property);}
                                      str = string()                            {this.setValue(property, "name", str);}
                  ( <PROPERTYTO>    ( tmp = <ADMINTYPE_STRING>                  {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                                    | tmp = <ADMINTYPE_SINGLE>                  {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                      str = string()                            {this.setValue(property, "refAdminName", str);} )? )
    )*
}

/**
 * Evaluates single-line string.
 *
 * @return string
 */
String string() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <STRING>  {ret = this.getString(tmp.image);}
    | tmp = <SINGLE>  {ret = this.getSingle(tmp.image);} )
    {
        return ret;
    }
}
