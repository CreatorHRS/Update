/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.6";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(InterfaceParser)
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;

import org.mxupdate.update.datamodel.AttributeCI_mxJPO;
import org.mxupdate.update.datamodel.AttributeCI_mxJPO.Range;
import org.mxupdate.update.datamodel.helper.LocalAttributeList_mxJPO.LocalAttribute;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Interface_mxJPO}.
 */
@SuppressWarnings("unused")
class InterfaceParser
    extends AbstractParser_mxJPO
{
}

PARSER_END(InterfaceParser)

<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

<DEFAULT> TOKEN :
{
      <UUID:                                "uuid">                                         : STRING_EXPECTED

    | <SYMBOLICNAME:                        "symbolicname">                                 : STRING_EXPECTED

    | <DESCRIPTION:                         "description">                                  : MULTILINESTRING_EXPECTED

    | <ABSTRACT_TRUE:                       "abstract">
    | <ABSTRACT_FALSE:                      "!abstract">

    | <DERIVED:                             "derived">                                      : STRING_EXPECTED

    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_FALSE:                        "!hidden">

    | <LOCAL:                               "local">
    | <ATTRIBUTE:                           "attribute">                                    : STRING_EXPECTED
}


/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\n" | "\t" | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" | "\\t" | "\\u" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/**************************************************** For Relationship / Type */
<DEFAULT> TOKEN :
{
      <FOR:                                 "for">                                          : FOR_EXPECTED
}

<FOR_EXPECTED> TOKEN :
{
      <FOR_PATHTYPE_ALL:                    "pathtype" ([" ","\t","\n","\r"])+ "all">       : DEFAULT
    | <FOR_PATHTYPE:                        "pathtype">                                     : STRING_EXPECTED
    | <FOR_RELATIONSHIP_ALL:                "relationship" ([" ","\t","\n","\r"])+ "all">   : DEFAULT
    | <FOR_RELATIONSHIP:                    "relationship">                                 : STRING_EXPECTED
    | <FOR_TYPE_ALL:                        "type" ([" ","\t","\n","\r"])+ "all">           : DEFAULT
    | <FOR_TYPE:                            "type">                                         : STRING_EXPECTED
}

/************************************************************ Local Attribute */
<DEFAULT> TOKEN :
{
      <DEFAULTVALUE:                        "default">                                      : MULTILINESTRING_EXPECTED

    | <MULTIVALUE_TRUE:                     "multivalue">                                   : DEFAULT
    | <MULTIVALUE_FALSE:                    "!multivalue">                                  : DEFAULT

    | <RESETONCLONE_TRUE:                   "resetonclone">                                 : DEFAULT
    | <RESETONCLONE_FALSE:                  "!resetonclone">                                : DEFAULT

    | <RESETONREVISION_TRUE:                "resetonrevision">                              : DEFAULT
    | <RESETONREVISION_FALSE:               "!resetonrevision">                             : DEFAULT

    | <RANGEVALUE_TRUE:                     "rangevalue">                                   : DEFAULT
    | <RANGEVALUE_FALSE:                    "!rangevalue">                                  : DEFAULT

    | <MULTILINE_TRUE:                      "multiline">                                    : DEFAULT
    | <MULTILINE_FALSE:                     "!multiline">                                   : DEFAULT

    | <RULE:                                "rule">                                         : STRING_EXPECTED

    | <DIMENSION:                           "dimension">                                    : STRING_EXPECTED
}

/** Kind */
<DEFAULT> TOKEN :
{
      <KIND:                                "kind">                                         : KIND_EXPECTED
}
<KIND_EXPECTED> TOKEN :
{
      <KIND_BINARY:                         "binary">                                       : DEFAULT
    | <KIND_BOOLEAN:                        "boolean">                                      : DEFAULT
    | <KIND_DATE:                           "date">                                         : DEFAULT
    | <KIND_INTEGER:                        "integer">                                      : DEFAULT
    | <KIND_REAL:                           "real">                                         : DEFAULT
    | <KIND_STRING:                         "string">                                       : DEFAULT
}

/** Max Length */
<DEFAULT> TOKEN :
{
      <MAXLENGTH:                           "maxlength">                                    : MAXLENGTH_EXPECTED
}
<MAXLENGTH_EXPECTED> TOKEN :
{
      <MAXLENGTH_NUMBER : (["\u0030"-"\u0039"])+> : DEFAULT
}

/** Ranges */
<DEFAULT> TOKEN:
{
      <RANGE_EQUAL:                         "range" ([" ","\t","\n","\r"])+ "=">            : STRING_EXPECTED
    | <RANGE_GREATERTHAN:                   "range" ([" ","\t","\n","\r"])+ ">">            : STRING_EXPECTED
    | <RANGE_GREATERTHANEQUAL:              "range" ([" ","\t","\n","\r"])+ ">=">           : STRING_EXPECTED
    | <RANGE_LESSTHAN:                      "range" ([" ","\t","\n","\r"])+ "< ">           : STRING_EXPECTED
    | <RANGE_LESSTHANEQUAL:                 "range" ([" ","\t","\n","\r"])+ "<=">           : STRING_EXPECTED
    | <RANGE_NOTEQUAL:                      "range" ([" ","\t","\n","\r"])+ "!=">           : STRING_EXPECTED
    | <RANGE_MATCH:                         "range" ([" ","\t","\n","\r"])+ "match">        : STRING_EXPECTED
    | <RANGE_NOTMATCH:                      "range" ([" ","\t","\n","\r"])+ "!match">       : STRING_EXPECTED
    | <RANGE_SMATCH:                        "range" ([" ","\t","\n","\r"])+ "smatch">       : STRING_EXPECTED
    | <RANGE_NOTSMATCH:                     "range" ([" ","\t","\n","\r"])+ "!smatch">      : STRING_EXPECTED
    | <RANGE_PROGRAM:                       "range" ([" ","\t","\n","\r"])+ "program">      : STRING_EXPECTED
    | <RANGE_BETWEEN:                       "range" ([" ","\t","\n","\r"])+ "between">      : BETW1_EXPECTED
}

<BETW1_EXPECTED> TOKEN :
{
      <BETW1_STRING: (<BETW1_APOSTROPHE>(<BETW1_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<BETW1_APOSTROPHE>)> : BETW2_EXPECTED
    | <BETW1_SINGLE: (<BETW1_CHAR>)+> : BETW2_EXPECTED
    | <#BETW1_APOSTROPHE: "\"" >
    | <#BETW1_CHAR: ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

<BETW2_EXPECTED> TOKEN :
{
      <BETW2_INCLUSIVE: "inclusive"> : BETW3_EXPECTED
    | <BETW2_EXCLUSIVE: "exclusive"> : BETW3_EXPECTED
}

<BETW3_EXPECTED> TOKEN :
{
      <BETW3_STRING: (<BETW3_APOSTROPHE>(<BETW3_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<BETW3_APOSTROPHE>)> : BETW4_EXPECTED
    | <BETW3_SINGLE: (<BETW3_CHAR>)+> : BETW4_EXPECTED
    | <#BETW3_APOSTROPHE: "\"" >
    | <#BETW3_CHAR: ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

<BETW4_EXPECTED> TOKEN :
{
      <BETW4_INCLUSIVE: "inclusive"> : DEFAULT
    | <BETW4_EXCLUSIVE: "exclusive"> : DEFAULT
}

/** Trigger */
<DEFAULT> TOKEN :
{
      <TRIGGER:                             "trigger">                                      : TRIGEVENT_EXPECTED
    | <INPUT:                               "input">                                        : STRING_EXPECTED
}

/** Trigger Event */
<TRIGEVENT_EXPECTED> TOKEN :
{
      <TRIGEVENT:           (~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"])+>         : TRIGKIND_EXPECTED
}

/** Trigger Kind */
<TRIGKIND_EXPECTED> TOKEN :
{
      <ACTION:                              "action">                                       : STRING_EXPECTED
    | <CHECK:                               "check">                                        : STRING_EXPECTED
    | <OVERRIDE:                            "override">                                     : STRING_EXPECTED
 }

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : ADMINREF_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED
}

/**************************************************************************** */

/**
 * Parses one complete interface definition.
 *
 * @param _interface    target interface to update with parsed values
 */
void parse(final Interface_mxJPO _interface)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    Token tmp;
    AdminProperty property;
    LocalAttribute localAttr;
    Range range;
    Trigger trigger;
} {
    (   ( <UUID>                                                            {property = new AdminProperty();
                                                                             this.appendValue(this.getValue(_interface, "properties"), "propertiesStack", property);
                                                                             this.setValue(property, "name",  "UUID");}
                                    ( tmp = <STRING>                        {this.setValue(property, "value", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "value", this.getSingle(tmp.image));} ) )

      | ( <SYMBOLICNAME>            ( tmp = <STRING>                        {this.appendValue(_interface, "symbolicNames", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_interface, "symbolicNames", this.getSingle(tmp.image));} ) )

      | ( <DESCRIPTION>             ( tmp = <MULTILINESTRING>               {this.setValue(_interface, "description",                       this.getString(tmp.image));}
                                    | tmp = <MULTILINESINGLE>               {this.setValue(_interface, "description",                       this.getSingle(tmp.image));} ) )

      | ( <ABSTRACT_TRUE>                                                   {this.setValue(_interface, "abstractFlag",                      true);} )
      | ( <ABSTRACT_FALSE>                                                  {this.setValue(_interface, "abstractFlag",                      false);} )

      | ( <DERIVED>                 ( tmp = <STRING>                        {this.appendValue(_interface, "derived",                        this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_interface, "derived",                        this.getSingle(tmp.image));} ) )

      | ( <HIDDEN_TRUE>                                                     {this.setValue(_interface, "hidden",                            true);} )
      | ( <HIDDEN_FALSE>                                                    {this.setValue(_interface, "hidden",                            false);} )

      | ( <ATTRIBUTE>               ( tmp = <STRING>                        {this.appendValue(_interface, "globalAttributes",               this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_interface, "globalAttributes",               this.getSingle(tmp.image));} ) )

      | ( <FOR>
            ( <FOR_PATHTYPE_ALL>                                            {this.setValue(_interface, "pathTypeAll",                       true);}
            | <FOR_PATHTYPE>        ( tmp = <STRING>                        {this.appendValue(_interface, "pathTypes",                      this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_interface, "pathTypes",                      this.getSingle(tmp.image));} )
            | <FOR_RELATIONSHIP_ALL>                                        {this.setValue(_interface, "relationAll",                       true);}
            | <FOR_RELATIONSHIP>    ( tmp = <STRING>                        {this.appendValue(_interface, "relations",                      this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_interface, "relations",                      this.getSingle(tmp.image));} )
            | <FOR_TYPE_ALL>                                                {this.setValue(_interface, "typeAll",                           true);}
            | <FOR_TYPE>            ( tmp = <STRING>                        {this.appendValue(_interface, "types",                          this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_interface, "types",                          this.getSingle(tmp.image));} ) ) )

      | ( <LOCAL> <ATTRIBUTE>
            ( tmp = <STRING>                                                {localAttr = new LocalAttribute().setLocalName(this.getString(tmp.image));this.appendValue(_interface, "localAttributes", localAttr);}
            | tmp = <SINGLE>                                                {localAttr = new LocalAttribute().setLocalName(this.getSingle(tmp.image));this.appendValue(_interface, "localAttributes", localAttr);} )
                 ( "{"
                      (   ( <KIND>          ( <KIND_BINARY>                 {this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Binary);}
                                            | <KIND_BOOLEAN>                {this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Boolean);}
                                            | <KIND_DATE>                   {this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Date);}
                                            | <KIND_INTEGER>                {this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Integer);}
                                            | <KIND_REAL>                   {this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Real);}
                                            | <KIND_STRING>                 {this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.String);} ) )
                        | ( <UUID>                                          {property = new AdminProperty();
                                                                             this.appendValue(this.getValue(localAttr, "properties"), "propertiesStack", property);
                                                                             this.setValue(property, "name",  "UUID");}
                                            ( tmp = <STRING>                {this.setValue(property, "value", this.getString(tmp.image));}
                                            | tmp = <SINGLE>                {this.setValue(property, "value", this.getSingle(tmp.image));} ) )
                        | ( <SYMBOLICNAME>  ( tmp = <STRING>                {this.appendValue(localAttr, "symbolicNames",                   this.getString(tmp.image));}
                                            | tmp = <SINGLE>                {this.appendValue(localAttr, "symbolicNames",                   this.getSingle(tmp.image));} ) )
                        | ( <DESCRIPTION>   ( tmp = <MULTILINESTRING>       {this.setValue(localAttr, "description",                        this.getString(tmp.image));}
                                            | tmp = <MULTILINESINGLE>       {this.setValue(localAttr, "description",                        this.getSingle(tmp.image));} ) )
                        | (<DEFAULTVALUE>   ( tmp = <MULTILINESTRING>       {this.setValue(localAttr, "defaultValue",                       this.getString(tmp.image));}
                                            | tmp = <MULTILINESINGLE>       {this.setValue(localAttr, "defaultValue",                       this.getSingle(tmp.image));} ) )
                        | ( <HIDDEN_TRUE>                                   {this.setValue(localAttr, "hidden",                             true);} )
                        | ( <HIDDEN_FALSE>                                  {this.setValue(localAttr, "hidden",                             false);} )
                        | (<MULTIVALUE_TRUE>                                {this.setValue(localAttr, "multiValue",                         true);} )
                        | (<MULTIVALUE_FALSE>                               {this.setValue(localAttr, "multiValue",                         false);} )
                        | (<RESETONCLONE_TRUE>                              {this.setValue(localAttr, "resetOnClone",                       true);} )
                        | (<RESETONCLONE_FALSE>                             {this.setValue(localAttr, "resetOnClone",                       false);} )
                        | (<RESETONREVISION_TRUE>                           {this.setValue(localAttr, "resetOnRevision",                    true);} )
                        | (<RESETONREVISION_FALSE>                          {this.setValue(localAttr, "resetOnRevision",                    false);} )
                        | (<RANGEVALUE_TRUE>                                {this.setValue(localAttr, "rangeValue",                         true);} )
                        | (<RANGEVALUE_FALSE>                               {this.setValue(localAttr, "rangeValue",                         false);} )
                        | (<MULTILINE_TRUE>                                 {this.setValue(localAttr, "multiline",                          true);} )
                        | (<MULTILINE_FALSE>                                {this.setValue(localAttr, "multiline",                          false);} )
                        | (<MAXLENGTH>      ( tmp = <MAXLENGTH_NUMBER>      {this.setValue(localAttr, "maxLength",                          this.getSingle(tmp.image));} ) )
                        | (<RULE>           ( tmp = <STRING>                {this.appendValue(localAttr, "rules",                           this.getString(tmp.image));}
                                            | tmp = <SINGLE>                {this.appendValue(localAttr, "rules",                           this.getSingle(tmp.image));} ) )
                        | (<DIMENSION>      ( tmp = <STRING>                {this.setValue(localAttr, "dimension",                          this.getString(tmp.image));}
                                            | tmp = <SINGLE>                {this.setValue(localAttr, "dimension",                          this.getSingle(tmp.image));} ) )
                        | ( <TRIGGER>                                       {trigger = new Trigger(); this.appendValue(localAttr, "triggers", trigger);}
                              tmp = <TRIGEVENT>                             {this.setValue(trigger, "eventType",                            this.getSingle(tmp.image));}
                                      ( <ACTION>                            {this.setValue(trigger, "kind",                                 "action");}
                                      | <CHECK>                             {this.setValue(trigger, "kind",                                 "check");}
                                      | <OVERRIDE>                          {this.setValue(trigger, "kind",                                 "override");} )
                                              ( tmp = <STRING>              {this.setValue(trigger, "program",                              this.getString(tmp.image));}
                                              | tmp = <SINGLE>              {this.setValue(trigger, "program",                              this.getSingle(tmp.image));} )
                                                     ( <INPUT>
                                                           ( tmp = <STRING> {this.setValue(trigger, "arguments",                            this.getString(tmp.image));}
                                                           | tmp = <SINGLE> {this.setValue(trigger, "arguments",                            this.getSingle(tmp.image));} ) )? )
                        | (<RANGE_EQUAL>            ( tmp = <STRING>        {range = new Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);}
                                                    | tmp = <SINGLE>        {range = new Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);} ) )
                        | (<RANGE_GREATERTHAN>      ( tmp = <STRING>        {range = new Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);}
                                                    | tmp = <SINGLE>        {range = new Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);} ) )
                        | (<RANGE_GREATERTHANEQUAL> ( tmp = <STRING>        {range = new Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);}
                                                    | tmp = <SINGLE>        {range = new Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);} ) )
                        | (<RANGE_LESSTHAN>         ( tmp = <STRING>        {range = new Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);}
                                                    | tmp = <SINGLE>        {range = new Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);} ) )
                        | (<RANGE_LESSTHANEQUAL>    ( tmp = <STRING>        {range = new Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);}
                                                    | tmp = <SINGLE>        {range = new Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);} ) )
                        | (<RANGE_NOTEQUAL>         ( tmp = <STRING>        {range = new Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);}
                                                    | tmp = <SINGLE>        {range = new Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);} ) )
                        | (<RANGE_MATCH>            ( tmp = <STRING>        {range = new Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);}
                                                    | tmp = <SINGLE>        {range = new Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);} ) )
                        | (<RANGE_NOTMATCH>         ( tmp = <STRING>        {range = new Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);}
                                                    | tmp = <SINGLE>        {range = new Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);} ) )
                        | (<RANGE_SMATCH>           ( tmp = <STRING>        {range = new Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);}
                                                    | tmp = <SINGLE>        {range = new Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);} ) )
                        | (<RANGE_NOTSMATCH>        ( tmp = <STRING>        {range = new Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);}
                                                    | tmp = <SINGLE>        {range = new Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);} ) )
                        | (<RANGE_PROGRAM>          ( tmp = <STRING>        {range = new Range();this.setValue(range, "type", "program");this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);}
                                                    | tmp = <SINGLE>        {range = new Range();this.setValue(range, "type", "program");this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);} )
                                  ( <INPUT>         ( tmp = <STRING>        {this.setValue(range, "value2", this.getString(tmp.image));}
                                                    | tmp = <SINGLE>        {this.setValue(range, "value2", this.getSingle(tmp.image));} ) )? )
                        | (<RANGE_BETWEEN>                                  {range = new Range();this.setValue(range, "type", "between");this.appendValue(localAttr, "rangesStack", range);}
                                                    ( tmp = <BETW1_STRING>  {this.setValue(range, "value1", this.getString(tmp.image));}
                                                    | tmp = <BETW1_SINGLE>  {this.setValue(range, "value1", this.getSingle(tmp.image));} )
                                                    ( <BETW2_INCLUSIVE>     {this.setValue(range, "include1", true);}
                                                    | <BETW2_EXCLUSIVE>     {this.setValue(range, "include1", false);})
                                                    ( tmp = <BETW3_STRING>  {this.setValue(range, "value2", this.getString(tmp.image));}
                                                    | tmp = <BETW3_SINGLE>  {this.setValue(range, "value2", this.getSingle(tmp.image));} )
                                                    ( <BETW4_INCLUSIVE>     {this.setValue(range, "include2", true);}
                                                    | <BETW4_EXCLUSIVE>     {this.setValue(range, "include2", false);} ) )
                        | (<PROPERTY>                                       {property = new AdminProperty(); this.appendValue(this.getValue(localAttr, "properties"), "propertiesStack", property);}
                                                ( tmp = <STRING>            {this.setValue(property, "name", this.getString(tmp.image));}
                                                | tmp = <SINGLE>            {this.setValue(property, "name", this.getSingle(tmp.image));} )
                              ( ( <PROPERTYVAL> ( tmp = <STRING>            {this.setValue(property, "value", this.getString(tmp.image));}
                                                | tmp = <SINGLE>            {this.setValue(property, "value", this.getSingle(tmp.image));} ) )
                              | ( <PROPERTYTO>  ( tmp = <ADMINTYPE_STRING>  {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                                                | tmp = <ADMINTYPE_SINGLE>  {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                                ( tmp = <STRING>            {this.setValue(property, "refAdminName", this.getString(tmp.image));}
                                                | tmp = <SINGLE>            {this.setValue(property, "refAdminName", this.getSingle(tmp.image));} ) ) )* ) )*
                   "}" ) )

      | ( <PROPERTY>                                                        {property = new AdminProperty();this.appendValue(_interface, "properties", "propertiesStack", property);}
                                    ( tmp = <STRING>                        {this.setValue(property, "name", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "name", this.getSingle(tmp.image));} )
              (   ( <PROPERTYVAL>   ( tmp = <STRING>                        {this.setValue(property, "value", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "value", this.getSingle(tmp.image));} ) )
                | ( <PROPERTYTO>    ( tmp = <ADMINTYPE_STRING>              {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                                    | tmp = <ADMINTYPE_SINGLE>              {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                    ( tmp = <STRING>                        {this.setValue(property, "refAdminName", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "refAdminName", this.getSingle(tmp.image));} ) ) )* )
    )*
}
