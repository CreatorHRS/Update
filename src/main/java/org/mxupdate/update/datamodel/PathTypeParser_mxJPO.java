/* PathTypeParser.java */
/* Generated By:JavaCC: Do not edit this line. PathTypeParser.java */
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;

import org.mxupdate.update.datamodel.AttributeCI_mxJPO;
import org.mxupdate.update.datamodel.AttributeCI_mxJPO.Range;
import org.mxupdate.update.datamodel.PathType_mxJPO;
import org.mxupdate.update.datamodel.PathType_mxJPO.Cardinality;
import org.mxupdate.update.datamodel.helper.LocalAttributeList_mxJPO.LocalAttribute;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Type_mxJPO}.
 */
@SuppressWarnings("unused")
class PathTypeParser_mxJPO
    extends AbstractParser_mxJPO implements PathTypeParserConstants_mxJPO {

/**************************************************************************** */

/**
 * Parses one complete path type definition.
 *
 * @param _pathType     target path type to update with parsed values
 */
  final public void parse(final PathType_mxJPO _pathType) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {Token tmp;
    AdminProperty property;
    LocalAttribute localAttr;
    Range range;
    Trigger trigger;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UUID:
      case SYMBOLICNAME:
      case DESCRIPTION:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case LOCAL:
      case ATTRIBUTE:
      case FROM:
      case TO:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UUID:{
        jj_consume_token(UUID);
property = new AdminProperty();
                                                                             this.appendValue(this.getValue(_pathType, "properties"), "propertiesStack", property);
                                                                             this.setValue(property, "name",  "UUID");
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.appendValue(_pathType, "symbolicNames", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.appendValue(_pathType, "symbolicNames", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTILINESTRING:{
          tmp = jj_consume_token(MULTILINESTRING);
this.setValue(_pathType, "description",                        this.getString(tmp.image));
          break;
          }
        case MULTILINESINGLE:{
          tmp = jj_consume_token(MULTILINESINGLE);
this.setValue(_pathType, "description",                        this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_pathType, "hidden",                             true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_pathType, "hidden",                             false);
        break;
        }
      case FROM:{
        jj_consume_token(FROM);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CARDINALITY_ONE:
          case CARDINALITY_MANY:
          case TYPE_ALL:
          case TYPE:
          case RELATIONSHIP_ALL:
          case RELATIONSHIP:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CARDINALITY_ONE:{
            jj_consume_token(CARDINALITY_ONE);
this.setValue(_pathType, "fromCardinality",                    Cardinality.One);
            break;
            }
          case CARDINALITY_MANY:{
            jj_consume_token(CARDINALITY_MANY);
this.setValue(_pathType, "fromCardinality",                    Cardinality.Many);
            break;
            }
          case TYPE:{
            jj_consume_token(TYPE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.appendValue(_pathType, "fromTypes",                       this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.appendValue(_pathType, "fromTypes",                       this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[5] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case TYPE_ALL:{
            jj_consume_token(TYPE_ALL);
this.setValue(_pathType, "fromTypeAll",                        true);
            break;
            }
          case RELATIONSHIP:{
            jj_consume_token(RELATIONSHIP);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.appendValue(_pathType, "fromRelations",                   this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.appendValue(_pathType, "fromRelations",                   this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RELATIONSHIP_ALL:{
            jj_consume_token(RELATIONSHIP_ALL);
this.setValue(_pathType, "fromRelationAll",                    true);
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(82);
        break;
        }
      case TO:{
        jj_consume_token(TO);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TYPE_ALL:
          case TYPE:
          case RELATIONSHIP_ALL:
          case RELATIONSHIP:{
            ;
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            break label_3;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TYPE:{
            jj_consume_token(TYPE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.appendValue(_pathType, "toTypes",                         this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.appendValue(_pathType, "toTypes",                         this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[9] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case TYPE_ALL:{
            jj_consume_token(TYPE_ALL);
this.setValue(_pathType, "toTypeAll",                          true);
            break;
            }
          case RELATIONSHIP:{
            jj_consume_token(RELATIONSHIP);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.appendValue(_pathType, "toRelations",                     this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.appendValue(_pathType, "toRelations",                     this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[10] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RELATIONSHIP_ALL:{
            jj_consume_token(RELATIONSHIP_ALL);
this.setValue(_pathType, "toRelationAll",                      true);
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(82);
        break;
        }
      case ATTRIBUTE:{
        jj_consume_token(ATTRIBUTE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.appendValue(_pathType, "globalAttributes",                this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.appendValue(_pathType, "globalAttributes",                this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case LOCAL:{
        jj_consume_token(LOCAL);
        jj_consume_token(ATTRIBUTE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
localAttr = new LocalAttribute(this.getString(tmp.image));this.appendValue(_pathType, "localAttributes", localAttr);
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
localAttr = new LocalAttribute(this.getSingle(tmp.image));this.appendValue(_pathType, "localAttributes", localAttr);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(83);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case UUID:
          case SYMBOLICNAME:
          case DESCRIPTION:
          case HIDDEN_TRUE:
          case HIDDEN_FALSE:
          case DEFAULTVALUE:
          case MULTIVALUE_TRUE:
          case MULTIVALUE_FALSE:
          case RESETONCLONE_TRUE:
          case RESETONCLONE_FALSE:
          case RESETONREVISION_TRUE:
          case RESETONREVISION_FALSE:
          case RANGEVALUE_TRUE:
          case RANGEVALUE_FALSE:
          case MULTILINE_TRUE:
          case MULTILINE_FALSE:
          case RULE:
          case DIMENSION:
          case KIND:
          case MAXLENGTH:
          case RANGE_EQUAL:
          case RANGE_GREATERTHAN:
          case RANGE_GREATERTHANEQUAL:
          case RANGE_LESSTHAN:
          case RANGE_LESSTHANEQUAL:
          case RANGE_NOTEQUAL:
          case RANGE_MATCH:
          case RANGE_NOTMATCH:
          case RANGE_SMATCH:
          case RANGE_NOTSMATCH:
          case RANGE_PROGRAM:
          case RANGE_BETWEEN:
          case TRIGGER:
          case PROPERTY:{
            ;
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            break label_4;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case KIND:{
            jj_consume_token(KIND);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case KIND_BINARY:{
              jj_consume_token(KIND_BINARY);
this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Binary);
              break;
              }
            case KIND_BOOLEAN:{
              jj_consume_token(KIND_BOOLEAN);
this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Boolean);
              break;
              }
            case KIND_DATE:{
              jj_consume_token(KIND_DATE);
this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Date);
              break;
              }
            case KIND_INTEGER:{
              jj_consume_token(KIND_INTEGER);
this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Integer);
              break;
              }
            case KIND_REAL:{
              jj_consume_token(KIND_REAL);
this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Real);
              break;
              }
            case KIND_STRING:{
              jj_consume_token(KIND_STRING);
this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.String);
              break;
              }
            default:
              jj_la1[15] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case UUID:{
            jj_consume_token(UUID);
property = new AdminProperty();
                                                                             this.appendValue(this.getValue(localAttr, "properties"), "propertiesStack", property);
                                                                             this.setValue(property, "name",  "UUID");
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[16] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case SYMBOLICNAME:{
            jj_consume_token(SYMBOLICNAME);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.appendValue(localAttr, "symbolicNames",                   this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.appendValue(localAttr, "symbolicNames",                   this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[17] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case DESCRIPTION:{
            jj_consume_token(DESCRIPTION);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MULTILINESTRING:{
              tmp = jj_consume_token(MULTILINESTRING);
this.setValue(localAttr, "description",                        this.getString(tmp.image));
              break;
              }
            case MULTILINESINGLE:{
              tmp = jj_consume_token(MULTILINESINGLE);
this.setValue(localAttr, "description",                        this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[18] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case DEFAULTVALUE:{
            jj_consume_token(DEFAULTVALUE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MULTILINESTRING:{
              tmp = jj_consume_token(MULTILINESTRING);
this.setValue(localAttr, "defaultValue",                       this.getString(tmp.image));
              break;
              }
            case MULTILINESINGLE:{
              tmp = jj_consume_token(MULTILINESINGLE);
this.setValue(localAttr, "defaultValue",                       this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[19] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case HIDDEN_TRUE:{
            jj_consume_token(HIDDEN_TRUE);
this.setValue(localAttr, "hidden",                             true);
            break;
            }
          case HIDDEN_FALSE:{
            jj_consume_token(HIDDEN_FALSE);
this.setValue(localAttr, "hidden",                             false);
            break;
            }
          case MULTIVALUE_TRUE:{
            jj_consume_token(MULTIVALUE_TRUE);
this.setValue(localAttr, "multiValue",                         true);
            break;
            }
          case MULTIVALUE_FALSE:{
            jj_consume_token(MULTIVALUE_FALSE);
this.setValue(localAttr, "multiValue",                         false);
            break;
            }
          case RESETONCLONE_TRUE:{
            jj_consume_token(RESETONCLONE_TRUE);
this.setValue(localAttr, "resetOnClone",                       true);
            break;
            }
          case RESETONCLONE_FALSE:{
            jj_consume_token(RESETONCLONE_FALSE);
this.setValue(localAttr, "resetOnClone",                       false);
            break;
            }
          case RESETONREVISION_TRUE:{
            jj_consume_token(RESETONREVISION_TRUE);
this.setValue(localAttr, "resetOnRevision",                    true);
            break;
            }
          case RESETONREVISION_FALSE:{
            jj_consume_token(RESETONREVISION_FALSE);
this.setValue(localAttr, "resetOnRevision",                    false);
            break;
            }
          case RANGEVALUE_TRUE:{
            jj_consume_token(RANGEVALUE_TRUE);
this.setValue(localAttr, "rangeValue",                         true);
            break;
            }
          case RANGEVALUE_FALSE:{
            jj_consume_token(RANGEVALUE_FALSE);
this.setValue(localAttr, "rangeValue",                         false);
            break;
            }
          case MULTILINE_TRUE:{
            jj_consume_token(MULTILINE_TRUE);
this.setValue(localAttr, "multiline",                          true);
            break;
            }
          case MULTILINE_FALSE:{
            jj_consume_token(MULTILINE_FALSE);
this.setValue(localAttr, "multiline",                          false);
            break;
            }
          case MAXLENGTH:{
            jj_consume_token(MAXLENGTH);
            tmp = jj_consume_token(MAXLENGTH_NUMBER);
this.setValue(localAttr, "maxLength",                          this.getSingle(tmp.image));
            break;
            }
          case RULE:{
            jj_consume_token(RULE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.appendValue(localAttr, "rules",                           this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.appendValue(localAttr, "rules",                           this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[20] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case DIMENSION:{
            jj_consume_token(DIMENSION);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(localAttr, "dimension",                          this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(localAttr, "dimension",                          this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[21] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case TRIGGER:{
            jj_consume_token(TRIGGER);
trigger = new Trigger(); this.appendValue(localAttr, "triggers", trigger);
            tmp = jj_consume_token(TRIGEVENT);
this.setValue(trigger, "eventType",                            this.getSingle(tmp.image));
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ACTION:{
              jj_consume_token(ACTION);
this.setValue(trigger, "kind",                                 "action");
              break;
              }
            case CHECK:{
              jj_consume_token(CHECK);
this.setValue(trigger, "kind",                                 "check");
              break;
              }
            case OVERRIDE:{
              jj_consume_token(OVERRIDE);
this.setValue(trigger, "kind",                                 "override");
              break;
              }
            default:
              jj_la1[22] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(trigger, "program",                              this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(trigger, "program",                              this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[23] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INPUT:{
              jj_consume_token(INPUT);
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case STRING:{
                tmp = jj_consume_token(STRING);
this.setValue(trigger, "arguments",                            this.getString(tmp.image));
                break;
                }
              case SINGLE:{
                tmp = jj_consume_token(SINGLE);
this.setValue(trigger, "arguments",                            this.getSingle(tmp.image));
                break;
                }
              default:
                jj_la1[24] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
              }
            default:
              jj_la1[25] = jj_gen;
              ;
            }
            break;
            }
          case RANGE_EQUAL:{
            jj_consume_token(RANGE_EQUAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[26] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_GREATERTHAN:{
            jj_consume_token(RANGE_GREATERTHAN);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[27] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_GREATERTHANEQUAL:{
            jj_consume_token(RANGE_GREATERTHANEQUAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[28] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_LESSTHAN:{
            jj_consume_token(RANGE_LESSTHAN);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[29] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_LESSTHANEQUAL:{
            jj_consume_token(RANGE_LESSTHANEQUAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[30] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_NOTEQUAL:{
            jj_consume_token(RANGE_NOTEQUAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[31] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_MATCH:{
            jj_consume_token(RANGE_MATCH);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[32] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_NOTMATCH:{
            jj_consume_token(RANGE_NOTMATCH);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[33] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_SMATCH:{
            jj_consume_token(RANGE_SMATCH);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[34] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_NOTSMATCH:{
            jj_consume_token(RANGE_NOTSMATCH);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[35] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_PROGRAM:{
            jj_consume_token(RANGE_PROGRAM);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "program");this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "program");this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[36] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INPUT:{
              jj_consume_token(INPUT);
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case STRING:{
                tmp = jj_consume_token(STRING);
this.setValue(range, "value2", this.getString(tmp.image));
                break;
                }
              case SINGLE:{
                tmp = jj_consume_token(SINGLE);
this.setValue(range, "value2", this.getSingle(tmp.image));
                break;
                }
              default:
                jj_la1[37] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
              }
            default:
              jj_la1[38] = jj_gen;
              ;
            }
            break;
            }
          case RANGE_BETWEEN:{
            jj_consume_token(RANGE_BETWEEN);
range = new Range();this.setValue(range, "type", "between");this.appendValue(localAttr, "rangesStack", range);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BETW1_STRING:{
              tmp = jj_consume_token(BETW1_STRING);
this.setValue(range, "value1", this.getString(tmp.image));
              break;
              }
            case BETW1_SINGLE:{
              tmp = jj_consume_token(BETW1_SINGLE);
this.setValue(range, "value1", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[39] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BETW2_INCLUSIVE:{
              jj_consume_token(BETW2_INCLUSIVE);
this.setValue(range, "include1", true);
              break;
              }
            case BETW2_EXCLUSIVE:{
              jj_consume_token(BETW2_EXCLUSIVE);
this.setValue(range, "include1", false);
              break;
              }
            default:
              jj_la1[40] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BETW3_STRING:{
              tmp = jj_consume_token(BETW3_STRING);
this.setValue(range, "value2", this.getString(tmp.image));
              break;
              }
            case BETW3_SINGLE:{
              tmp = jj_consume_token(BETW3_SINGLE);
this.setValue(range, "value2", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[41] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BETW4_INCLUSIVE:{
              jj_consume_token(BETW4_INCLUSIVE);
this.setValue(range, "include2", true);
              break;
              }
            case BETW4_EXCLUSIVE:{
              jj_consume_token(BETW4_EXCLUSIVE);
this.setValue(range, "include2", false);
              break;
              }
            default:
              jj_la1[42] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case PROPERTY:{
            jj_consume_token(PROPERTY);
property = new AdminProperty(); this.appendValue(this.getValue(localAttr, "properties"), "propertiesStack", property);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "name", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "name", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[43] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            label_5:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case PROPERTYTO:
              case PROPERTYVAL:{
                ;
                break;
                }
              default:
                jj_la1[44] = jj_gen;
                break label_5;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case PROPERTYVAL:{
                jj_consume_token(PROPERTYVAL);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[45] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case PROPERTYTO:{
                jj_consume_token(PROPERTYTO);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ADMINTYPE_STRING:{
                  tmp = jj_consume_token(ADMINTYPE_STRING);
this.setValue(property, "refAdminType", this.getString(tmp.image));
                  break;
                  }
                case ADMINTYPE_SINGLE:{
                  tmp = jj_consume_token(ADMINTYPE_SINGLE);
this.setValue(property, "refAdminType", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[46] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.setValue(property, "refAdminName", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.setValue(property, "refAdminName", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[47] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              default:
                jj_la1[48] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
            }
          default:
            jj_la1[49] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(82);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
property = new AdminProperty();this.appendValue(_pathType, "properties", "propertiesStack", property);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(property, "name", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(property, "name", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYTO:
          case PROPERTYVAL:{
            ;
            break;
            }
          default:
            jj_la1[51] = jj_gen;
            break label_6;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYVAL:{
            jj_consume_token(PROPERTYVAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[52] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case PROPERTYTO:{
            jj_consume_token(PROPERTYTO);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ADMINTYPE_STRING:{
              tmp = jj_consume_token(ADMINTYPE_STRING);
this.setValue(property, "refAdminType", this.getString(tmp.image));
              break;
              }
            case ADMINTYPE_SINGLE:{
              tmp = jj_consume_token(ADMINTYPE_SINGLE);
this.setValue(property, "refAdminType", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[53] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "refAdminName", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "refAdminName", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[54] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[55] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /** Generated Token Manager. */
  public PathTypeParserTokenManager_mxJPO token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[57];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x61ee0,0x6000,0x6000,0x18000,0x1f80000,0x6000,0x6000,0x1f80000,0x1e00000,0x6000,0x6000,0x1e00000,0x6000,0x6000,0xfe0006e0,0x0,0x6000,0x6000,0x18000,0x18000,0x6000,0x6000,0x0,0x6000,0x6000,0x0,0x6000,0x6000,0x6000,0x6000,0x6000,0x6000,0x6000,0x6000,0x6000,0x6000,0x6000,0x6000,0x0,0x0,0x0,0x0,0x0,0x6000,0x0,0x6000,0x0,0x6000,0x0,0xfe0006e0,0x6000,0x0,0x6000,0x0,0x6000,0x0,0x61ee0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ffa07f,0x1f80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ffa07f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1c00,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x1,0x6,0x60,0x0,0xc000,0x0,0x30000,0x0,0xc000,0x2080,0x0,0xc000,0x0,0x30000,0x0,0xc000,0x2000,};
   }

  /** Constructor with InputStream. */
  public PathTypeParser_mxJPO(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PathTypeParser_mxJPO(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PathTypeParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PathTypeParser_mxJPO(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PathTypeParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new PathTypeParserTokenManager_mxJPO(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PathTypeParser_mxJPO(PathTypeParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PathTypeParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[84];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 57; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 84; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
