/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.6";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    UNICODE_INPUT = true;
}
PARSER_BEGIN(FormatParser)
package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;

import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Format_mxJPO}.
 */
@SuppressWarnings("unused")
class FormatParser
    extends AbstractParser_mxJPO
{
}
PARSER_END(FormatParser)<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

TOKEN : /** first level */
{
      <SYMBOLICNAME:                        "symbolicname">                                 : STRING_EXPECTED
    | <DESCRIPTION:                         "description">                                  : MULTILINESTRING_EXPECTED
    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_FALSE:                        "!hidden">
    | <MIME:                                "mime">                                         : STRING_EXPECTED
    | <SUFFIX:                              "suffix">                                       : STRING_EXPECTED
    | <TYPE:                                "type">                                         : STRING_EXPECTED
    | <VERSION:                             "version">                                      : STRING_EXPECTED
    | <VIEW:                                "view">                                         : STRING_EXPECTED
    | <EDIT:                                "edit">                                         : STRING_EXPECTED
    | <PRINT:                               "print">                                        : STRING_EXPECTED
}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u0009","\u000b"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : ADMINREF_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED
}

/**************************************************************************** */
/**
 * Parses one complete format definition.
 *
 * @param _format   target format to update with parsed values
 */
void parse(final Format_mxJPO _format)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    Token tmp;
    AdminProperty property;
} {
    (
        ( <SYMBOLICNAME>            ( tmp = <STRING>                        {this.appendValue(_format, "symbolicNames", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_format, "symbolicNames", this.getSingle(tmp.image));} ) )

      | (<DESCRIPTION>              ( tmp = <MULTILINESTRING>               {this.setValue(_format, "description", this.getString(tmp.image));}
                                    | tmp = <MULTILINESINGLE>               {this.setValue(_format, "description", this.getSingle(tmp.image));} ) )

      | (<HIDDEN_TRUE>                                                      {this.setValue(_format, "hidden",       true);} )
      | (<HIDDEN_FALSE>                                                     {this.setValue(_format, "hidden",       false);} )

      | (<MIME>                     ( tmp = <STRING>                        {this.setValue(_format, "mimeType",     this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_format, "mimeType",     this.getSingle(tmp.image));} ) )

      | (<SUFFIX>                   ( tmp = <STRING>                        {this.setValue(_format, "fileSuffix",   this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_format, "fileSuffix",   this.getSingle(tmp.image));} ) )

      | (<TYPE>                     ( tmp = <STRING>                        {this.setValue(_format, "type",         this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_format, "type",         this.getSingle(tmp.image));} ) )

      | (<VERSION>                  ( tmp = <STRING>                        {this.setValue(_format, "version",      this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_format, "version",      this.getSingle(tmp.image));} ) )

      | (<VIEW>                     ( tmp = <STRING>                        {this.setValue(_format, "commandView",  this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_format, "commandView",  this.getSingle(tmp.image));} ) )
      | (<EDIT>                     ( tmp = <STRING>                        {this.setValue(_format, "commandEdit",  this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_format, "commandEdit",  this.getSingle(tmp.image));} ) )
      | (<PRINT>                    ( tmp = <STRING>                        {this.setValue(_format, "commandPrint", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_format, "commandPrint", this.getSingle(tmp.image));} ) )

      | (<PROPERTY>                                                         {property = new AdminProperty();this.appendValue(_format, "properties", "propertiesStack", property);}
                                    ( tmp = <STRING>                        {this.setValue(property, "name", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "name", this.getSingle(tmp.image));} )
              (   ( <PROPERTYVAL>   ( tmp = <STRING>                        {this.setValue(property, "value", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "value", this.getSingle(tmp.image));} ) )
                | ( <PROPERTYTO>    ( tmp = <ADMINTYPE_STRING>              {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                                    | tmp = <ADMINTYPE_SINGLE>              {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                    ( tmp = <STRING>                        {this.setValue(property, "refAdminName", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "refAdminName", this.getSingle(tmp.image));} ) ) )* )
    )*
}
