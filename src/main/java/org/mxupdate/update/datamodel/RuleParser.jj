/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.7";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(RuleParser)
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;

import org.mxupdate.update.datamodel.helper.AccessList_mxJPO;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO.Access;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Rule_mxJPO}.
 */
@SuppressWarnings("unused")
class RuleParser
    extends AbstractParser_mxJPO
{
}

PARSER_END(RuleParser)

<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

<DEFAULT> TOKEN :
{
      <PACKAGE:                             "package">                                      : STRING_EXPECTED

    | <UUID:                                "uuid">                                         : STRING_EXPECTED

    | <SYMBOLICNAME:                        "symbolicname">                                 : STRING_EXPECTED

    | <DESCRIPTION:                         "description">                                  : MULTILINESTRING_EXPECTED

    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_FALSE:                        "!hidden">

    | <ENFORCERESERVEACCESS_TRUE:           "enforcereserveaccess">
    | <ENFORCERESERVEACCESS_FALSE:          "!enforcereserveaccess">
}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\n" | "\t" | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" | "\\t" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*********************************************************** Access Definition */

<DEFAULT> TOKEN :
{
      <REVOKE:                              "revoke">                                       : DEFAULT
    | <LOGIN:                               "login">                                        : DEFAULT
    | <OWNER:                               "owner">                                        : ACCESS_EXPECTED
    | <PUBLIC:                              "public">                                       : ACCESS_EXPECTED
    | <USER:                                "user">                                         : ACCESS_STRING_EXPECTED
}

<ACCESS_EXPECTED> TOKEN:
{
      <KEY:                                 "key">                                          : ACCESS_STRING_EXPECTED
    | <ACCESS:       "{" ([" ","\t","\n"])* (["a"-"z"]) (["a"-"z"," ","\t","\n"])* "}">     : DEFAULT
}
/** String within Access */
<ACCESS_STRING_EXPECTED> TOKEN :
{
      <ACCESS_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : ACCESS_EXPECTED
    | <ACCESS_SINGLE_STRING : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : ACCESS_EXPECTED
}

/** After access definition back to default */
<DEFAULT> TOKEN:
{
      <FILTER:                              "filter">                                               : MULTILINESTRING_EXPECTED
    | <LOCALFILTER:                         "localfilter">                                          : MULTILINESTRING_EXPECTED

    | <ORGANIZATION_ANY:                    "any"         ([" ","\t","\n"])+ "organization">        : DEFAULT
    | <ORGANIZATION_SINGLE:                 "single"      ([" ","\t","\n"])+ "organization">        : DEFAULT
    | <ORGANIZATION_ANCESTOR:               "ancestor"    ([" ","\t","\n"])+ "organization">        : DEFAULT
    | <ORGANIZATION_DESCENDANT:             "descendant"  ([" ","\t","\n"])+ "organization">        : DEFAULT
    | <ORGANIZATION_RELATED:                "related"     ([" ","\t","\n"])+ "organization">        : DEFAULT

    | <PROJECT_ANY:                         "any"         ([" ","\t","\n"])+ "project">             : DEFAULT
    | <PROJECT_SINGLE:                      "single"      ([" ","\t","\n"])+ "project">             : DEFAULT
    | <PROJECT_ANCESTOR:                    "ancestor"    ([" ","\t","\n"])+ "project">             : DEFAULT
    | <PROJECT_DESCENDANT:                  "descendant"  ([" ","\t","\n"])+ "project">             : DEFAULT
    | <PROJECT_RELATED:                     "related"     ([" ","\t","\n"])+ "project">             : DEFAULT

    | <OWNER_ANY:                           "any"         ([" ","\t","\n"])+ "owner">               : DEFAULT
    | <OWNER_CONTEXT:                       "context"     ([" ","\t","\n"])+ "owner">               : DEFAULT

    | <RESERVE_ANY:                         "any"         ([" ","\t","\n"])+ "reserve">             : DEFAULT
    | <RESERVE_CONTEXT:                     "context"     ([" ","\t","\n"])+ "reserve">             : DEFAULT
    | <RESERVE_NO:                          "no"          ([" ","\t","\n"])+ "reserve">             : DEFAULT
    | <RESERVE_INCLUSIVE:                   "inclusive"   ([" ","\t","\n"])+ "reserve">             : DEFAULT

    | <MATURITY_ANY:                        "any"         ([" ","\t","\n"])+ "maturity">            : DEFAULT
    | <MATURITY_NO:                         "no"          ([" ","\t","\n"])+ "maturity">            : DEFAULT
    | <MATURITY_PUBLIC:                     "public"      ([" ","\t","\n"])+ "maturity">            : DEFAULT
    | <MATURITY_PROTECTED:                  "protected"   ([" ","\t","\n"])+ "maturity">            : DEFAULT
    | <MATURITY_PRIVATE:                    "private"     ([" ","\t","\n"])+ "maturity">            : DEFAULT
    | <MATURITY_NOTPRIVATE:                 "notprivate"  ([" ","\t","\n"])+ "maturity">            : DEFAULT
    | <MATURITY_PPP:                        "ppp"         ([" ","\t","\n"])+ "maturity">            : DEFAULT

    | <CATEGORY_ANY:                        "any"         ([" ","\t","\n"])+ "category">            : DEFAULT
    | <CATEGORY_OEM:                        "oem"         ([" ","\t","\n"])+ "category">            : DEFAULT
    | <CATEGORY_GOLDPARTNER:                "goldpartner" ([" ","\t","\n"])+ "category">            : DEFAULT
    | <CATEGORY_PARTNER:                    "partner"     ([" ","\t","\n"])+ "category">            : DEFAULT
    | <CATEGORY_SUPPLIER:                   "supplier"    ([" ","\t","\n"])+ "category">            : DEFAULT
    | <CATEGORY_CUSTOMER:                   "customer"    ([" ","\t","\n"])+ "category">            : DEFAULT
    | <CATEGORY_CONTRACTOR:                 "contractor"  ([" ","\t","\n"])+ "category">            : DEFAULT
}

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : ADMINREF_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED
}

/**************************************************************************** */
/**
 * Parses one complete rule definition.
 *
 * @param _rule   target rule to update with parsed values
 */
void parse(final Rule_mxJPO _rule)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException : 
{
    String str;
    Token tmp;
    AdminProperty property;
    Access access = new Access();
}
{
    (   ( <PACKAGE>                   str = string()                            {this.setValue(_rule, "packageRef", str);} )

      | ( <UUID>                      property = uuid()                         {this.appendValue(this.getValue(_rule, "properties"), "propertiesStack", property);} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_rule, "symbolicNames", str);} )

      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_rule, "description", str);} )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_rule, "hidden",                 true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_rule, "hidden",                 false);} )

      | ( <ENFORCERESERVEACCESS_TRUE>                                           {this.setValue(_rule, "enforcereserveaccess",   true);} )
      | ( <ENFORCERESERVEACCESS_FALSE>                                          {this.setValue(_rule, "enforcereserveaccess",   false);} )

      | ( ( <REVOKE>                                                            {this.setValue(access, "revoke",                true);} ) ?
          ( <LOGIN>                                                             {this.setValue(access, "login",                 true);} ) ?
                ( <OWNER>                                                       {this.setValue(access, "kind",                  "owner");}
                | <PUBLIC>                                                      {this.setValue(access, "kind",                  "public");}
                | <USER>                                                        {this.setValue(access, "kind",                  "user");}
                            ( tmp = <ACCESS_STRING>                             {this.setValue(access, "userRef",               this.getString(tmp.image));}
                            | tmp = <ACCESS_SINGLE_STRING>                      {this.setValue(access, "userRef",               this.getSingle(tmp.image));} ) )
                                    stateAccessDef(access)                      {this.appendValue(_rule, "accessList",          "accessList", access);/*reset*/access = new Access();} )

      | (<PROPERTY>                   property = property()                     {this.appendValue(_rule, "properties", "propertiesStack", property);} )
    )*
}

void stateAccessDef(final Access _access) : 
{
    String str;
    Token tmp;
} 
{
    (
          ( <KEY>                   ( tmp = <ACCESS_STRING>         {this.setValue(_access, "key",              this.getString(tmp.image));}
                                    | tmp = <ACCESS_SINGLE_STRING>  {this.setValue(_access, "key",              this.getSingle(tmp.image));} ) )

        | ( <FILTER>                  str = multiLineString()       {this.setValue(_access, "filter",           str);} )

        | ( <LOCALFILTER>             str = multiLineString()       {this.setValue(_access, "localfilter",      str);} )

        | ( tmp = <ACCESS>                                          {this.appendValues(_access, "access",       Arrays.asList(
                                                                                                                    tmp.image.replaceFirst("^\\{", "").replaceFirst("\\}$", "")  // remove {}
                                                                                                                             .replaceAll("(\t)|(\n)", " ")                       // replace tabs, new lines
                                                                                                                             .replaceAll("( )+", " ")                            // multiple spaces => one space
                                                                                                                             .trim()                                             // remove trailing spaces
                                                                                                                             .split(" ")));} )                                   // split

        | ( <ORGANIZATION_ANY>                                      {this.setValue(_access, "organization",     "any");         } )
        | ( <ORGANIZATION_SINGLE>                                   {this.setValue(_access, "organization",     "single");      } )
        | ( <ORGANIZATION_ANCESTOR>                                 {this.setValue(_access, "organization",     "ancestor");    } )
        | ( <ORGANIZATION_DESCENDANT>                               {this.setValue(_access, "organization",     "descendant");  } )
        | ( <ORGANIZATION_RELATED>                                  {this.setValue(_access, "organization",     "related");     } )

        | ( <PROJECT_ANY>                                           {this.setValue(_access, "project",          "any");         } )
        | ( <PROJECT_SINGLE>                                        {this.setValue(_access, "project",          "single");      } )
        | ( <PROJECT_ANCESTOR>                                      {this.setValue(_access, "project",          "ancestor");    } )
        | ( <PROJECT_DESCENDANT>                                    {this.setValue(_access, "project",          "descendant");  } )
        | ( <PROJECT_RELATED>                                       {this.setValue(_access, "project",          "related");     } )

        | ( <OWNER_ANY>                                             {this.setValue(_access, "owner",            "any");         } )
        | ( <OWNER_CONTEXT>                                         {this.setValue(_access, "owner",            "context");     } )

        | ( <RESERVE_ANY>                                           {this.setValue(_access, "reserve",          "any");         } )
        | ( <RESERVE_CONTEXT>                                       {this.setValue(_access, "reserve",          "context");     } )
        | ( <RESERVE_NO>                                            {this.setValue(_access, "reserve",          "no");          } )
        | ( <RESERVE_INCLUSIVE>                                     {this.setValue(_access, "reserve",          "inclusive");   } )

        | ( <MATURITY_ANY>                                          {this.setValue(_access, "maturity",         "any");         } )
        | ( <MATURITY_NO>                                           {this.setValue(_access, "maturity",         "no");          } )
        | ( <MATURITY_PUBLIC>                                       {this.setValue(_access, "maturity",         "public");      } )
        | ( <MATURITY_PROTECTED>                                    {this.setValue(_access, "maturity",         "protected");   } )
        | ( <MATURITY_PRIVATE>                                      {this.setValue(_access, "maturity",         "private");     } )
        | ( <MATURITY_NOTPRIVATE>                                   {this.setValue(_access, "maturity",         "notprivate");  } )
        | ( <MATURITY_PPP>                                          {this.setValue(_access, "maturity",         "ppp");         } )

        | ( <CATEGORY_ANY>                                          {this.setValue(_access, "category",         "any");         } )
        | ( <CATEGORY_OEM>                                          {this.setValue(_access, "category",         "oem");         } )
        | ( <CATEGORY_GOLDPARTNER>                                  {this.setValue(_access, "category",         "goldpartner"); } )
        | ( <CATEGORY_PARTNER>                                      {this.setValue(_access, "category",         "partner");     } )
        | ( <CATEGORY_SUPPLIER>                                     {this.setValue(_access, "category",         "supplier");    } )
        | ( <CATEGORY_CUSTOMER>                                     {this.setValue(_access, "category",         "customer");    } )
        | ( <CATEGORY_CONTRACTOR>                                   {this.setValue(_access, "category",         "contractor");  } )
    )*
}

/**
 * Parses the UUID property definition.
 */
AdminProperty uuid() :
{
    String str;
    AdminProperty property = new AdminProperty();
}
{
    str = string()
    {this.setValue(property, "value", str);}
    {this.setValue(property, "name",  "UUID");}
    {return property;}
}

/**
 * Parses the properties definition.
 */
AdminProperty property() :
{
    String str;
    Token tmp;
    AdminProperty property = new AdminProperty();
}
{
    str = string()                                 {this.setValue(property, "name", str);}
    ( ( <PROPERTYVAL>  str = string()              {this.setValue(property, "value", str);} )
    | ( <PROPERTYTO>   ( tmp = <ADMINTYPE_STRING>  {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                       | tmp = <ADMINTYPE_SINGLE>  {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                   str = string()  {this.setValue(property, "refAdminName", str);} ) )*
    {return property;}
}

/**
 * Evaluates multi-line string.
 *
 * @return string
 */
String multiLineString() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <MULTILINESTRING>  {ret = this.getString(tmp.image);}
    | tmp = <MULTILINESINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}

/**
 * Evaluates single-line string.
 *
 * @return string
 */
String string() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <STRING>  {ret = this.getString(tmp.image);}
    | tmp = <SINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}
