/* Generated By:JavaCC: Do not edit this line. RelationshipParserConstants.java */
package org.mxupdate.update.datamodel;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
interface RelationshipParserConstants_mxJPO {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SYMBOLICNAME = 5;
  /** RegularExpression Id. */
  int DESCRIPTION = 6;
  /** RegularExpression Id. */
  int ABSTRACT_TRUE = 7;
  /** RegularExpression Id. */
  int ABSTRACT_FALSE = 8;
  /** RegularExpression Id. */
  int DERIVED = 9;
  /** RegularExpression Id. */
  int HIDDEN_TRUE = 10;
  /** RegularExpression Id. */
  int HIDDEN_FALSE = 11;
  /** RegularExpression Id. */
  int PREVENTDUPLICATES_TRUE = 12;
  /** RegularExpression Id. */
  int PREVENTDUPLICATES_FALSE = 13;
  /** RegularExpression Id. */
  int RULE = 14;
  /** RegularExpression Id. */
  int STRING = 15;
  /** RegularExpression Id. */
  int SINGLE = 16;
  /** RegularExpression Id. */
  int MULTILINESTRING = 17;
  /** RegularExpression Id. */
  int MULTILINESINGLE = 18;
  /** RegularExpression Id. */
  int KIND = 19;
  /** RegularExpression Id. */
  int BASIC = 20;
  /** RegularExpression Id. */
  int COMPOSITIONAL = 21;
  /** RegularExpression Id. */
  int KIND_BINARY = 22;
  /** RegularExpression Id. */
  int KIND_BOOLEAN = 23;
  /** RegularExpression Id. */
  int KIND_DATE = 24;
  /** RegularExpression Id. */
  int KIND_INTEGER = 25;
  /** RegularExpression Id. */
  int KIND_REAL = 26;
  /** RegularExpression Id. */
  int KIND_STRING = 27;
  /** RegularExpression Id. */
  int TRIGGER = 28;
  /** RegularExpression Id. */
  int INPUT = 29;
  /** RegularExpression Id. */
  int TRIGEVENT = 30;
  /** RegularExpression Id. */
  int ACTION = 31;
  /** RegularExpression Id. */
  int CHECK = 32;
  /** RegularExpression Id. */
  int OVERRIDE = 33;
  /** RegularExpression Id. */
  int FROM = 34;
  /** RegularExpression Id. */
  int TO = 35;
  /** RegularExpression Id. */
  int PROPAGATEMODIFY_TRUE = 36;
  /** RegularExpression Id. */
  int PROPAGATEMODIFY_FALSE = 37;
  /** RegularExpression Id. */
  int PROPAGATECONNECTION_TRUE = 38;
  /** RegularExpression Id. */
  int PROPAGATECONNECTION_FALSE = 39;
  /** RegularExpression Id. */
  int MEANING = 40;
  /** RegularExpression Id. */
  int REVISION_NONE = 41;
  /** RegularExpression Id. */
  int REVISION_FLOAT = 42;
  /** RegularExpression Id. */
  int REVISION_REPLICATE = 43;
  /** RegularExpression Id. */
  int CLONE_NONE = 44;
  /** RegularExpression Id. */
  int CLONE_FLOAT = 45;
  /** RegularExpression Id. */
  int CLONE_REPLICATE = 46;
  /** RegularExpression Id. */
  int CARDINALITY_ONE = 47;
  /** RegularExpression Id. */
  int CARDINALITY_MANY = 48;
  /** RegularExpression Id. */
  int TYPE_ALL = 49;
  /** RegularExpression Id. */
  int TYPE = 50;
  /** RegularExpression Id. */
  int RELATIONSHIP_ALL = 51;
  /** RegularExpression Id. */
  int RELATIONSHIP = 52;
  /** RegularExpression Id. */
  int GLOBAL_ATTRIBUTE = 53;
  /** RegularExpression Id. */
  int LOCAL_ATTRIBUTE = 54;
  /** RegularExpression Id. */
  int DEFAULTVALUE = 55;
  /** RegularExpression Id. */
  int MULTIVALUE_TRUE = 56;
  /** RegularExpression Id. */
  int MULTIVALUE_FALSE = 57;
  /** RegularExpression Id. */
  int RESETONCLONE_TRUE = 58;
  /** RegularExpression Id. */
  int RESETONCLONE_FALSE = 59;
  /** RegularExpression Id. */
  int RESETONREVISION_TRUE = 60;
  /** RegularExpression Id. */
  int RESETONREVISION_FALSE = 61;
  /** RegularExpression Id. */
  int RANGEVALUE_TRUE = 62;
  /** RegularExpression Id. */
  int RANGEVALUE_FALSE = 63;
  /** RegularExpression Id. */
  int MULTILINE_TRUE = 64;
  /** RegularExpression Id. */
  int MULTILINE_FALSE = 65;
  /** RegularExpression Id. */
  int DIMENSION = 66;
  /** RegularExpression Id. */
  int MAXLENGTH = 67;
  /** RegularExpression Id. */
  int MAXLENGTH_NUMBER = 68;
  /** RegularExpression Id. */
  int RANGE_EQUAL = 69;
  /** RegularExpression Id. */
  int RANGE_GREATERTHAN = 70;
  /** RegularExpression Id. */
  int RANGE_GREATERTHANEQUAL = 71;
  /** RegularExpression Id. */
  int RANGE_LESSTHAN = 72;
  /** RegularExpression Id. */
  int RANGE_LESSTHANEQUAL = 73;
  /** RegularExpression Id. */
  int RANGE_NOTEQUAL = 74;
  /** RegularExpression Id. */
  int RANGE_MATCH = 75;
  /** RegularExpression Id. */
  int RANGE_NOTMATCH = 76;
  /** RegularExpression Id. */
  int RANGE_SMATCH = 77;
  /** RegularExpression Id. */
  int RANGE_NOTSMATCH = 78;
  /** RegularExpression Id. */
  int RANGE_PROGRAM = 79;
  /** RegularExpression Id. */
  int RANGE_BETWEEN = 80;
  /** RegularExpression Id. */
  int BETW1_STRING = 81;
  /** RegularExpression Id. */
  int BETW1_SINGLE = 82;
  /** RegularExpression Id. */
  int BETW1_APOSTROPHE = 83;
  /** RegularExpression Id. */
  int BETW1_CHAR = 84;
  /** RegularExpression Id. */
  int BETW2_INCLUSIVE = 85;
  /** RegularExpression Id. */
  int BETW2_EXCLUSIVE = 86;
  /** RegularExpression Id. */
  int BETW3_STRING = 87;
  /** RegularExpression Id. */
  int BETW3_SINGLE = 88;
  /** RegularExpression Id. */
  int BETW3_APOSTROPHE = 89;
  /** RegularExpression Id. */
  int BETW3_CHAR = 90;
  /** RegularExpression Id. */
  int BETW4_INCLUSIVE = 91;
  /** RegularExpression Id. */
  int BETW4_EXCLUSIVE = 92;
  /** RegularExpression Id. */
  int LOCAL_PATHTYPE = 93;
  /** RegularExpression Id. */
  int PROPERTY = 94;
  /** RegularExpression Id. */
  int PROPERTYTO = 95;
  /** RegularExpression Id. */
  int PROPERTYVAL = 96;
  /** RegularExpression Id. */
  int ADMINTYPE_STRING = 97;
  /** RegularExpression Id. */
  int ADMINTYPE_SINGLE = 98;

  /** Lexical state. */
  int ADMINREF_EXPECTED = 0;
  /** Lexical state. */
  int BETW4_EXPECTED = 1;
  /** Lexical state. */
  int BETW3_EXPECTED = 2;
  /** Lexical state. */
  int BETW2_EXPECTED = 3;
  /** Lexical state. */
  int BETW1_EXPECTED = 4;
  /** Lexical state. */
  int MAXLENGTH_EXPECTED = 5;
  /** Lexical state. */
  int TRIGKIND_EXPECTED = 6;
  /** Lexical state. */
  int TRIGEVENT_EXPECTED = 7;
  /** Lexical state. */
  int KIND_EXPECTED = 8;
  /** Lexical state. */
  int MULTILINESTRING_EXPECTED = 9;
  /** Lexical state. */
  int STRING_EXPECTED = 10;
  /** Lexical state. */
  int DEFAULT = 11;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 4>",
    "\"symbolicname\"",
    "\"description\"",
    "\"abstract\"",
    "\"!abstract\"",
    "\"derived\"",
    "\"hidden\"",
    "\"!hidden\"",
    "\"preventduplicates\"",
    "\"!preventduplicates\"",
    "\"rule\"",
    "<STRING>",
    "<SINGLE>",
    "<MULTILINESTRING>",
    "<MULTILINESINGLE>",
    "\"kind\"",
    "\"basic\"",
    "\"compositional\"",
    "\"binary\"",
    "\"boolean\"",
    "\"date\"",
    "\"integer\"",
    "\"real\"",
    "\"string\"",
    "\"trigger\"",
    "\"input\"",
    "<TRIGEVENT>",
    "\"action\"",
    "\"check\"",
    "\"override\"",
    "<FROM>",
    "<TO>",
    "\"propagatemodify\"",
    "\"!propagatemodify\"",
    "\"propagateconnection\"",
    "\"!propagateconnection\"",
    "\"meaning\"",
    "<REVISION_NONE>",
    "<REVISION_FLOAT>",
    "<REVISION_REPLICATE>",
    "<CLONE_NONE>",
    "<CLONE_FLOAT>",
    "<CLONE_REPLICATE>",
    "<CARDINALITY_ONE>",
    "<CARDINALITY_MANY>",
    "<TYPE_ALL>",
    "\"type\"",
    "<RELATIONSHIP_ALL>",
    "\"relationship\"",
    "\"attribute\"",
    "<LOCAL_ATTRIBUTE>",
    "\"default\"",
    "\"multivalue\"",
    "\"!multivalue\"",
    "\"resetonclone\"",
    "\"!resetonclone\"",
    "\"resetonrevision\"",
    "\"!resetonrevision\"",
    "\"rangevalue\"",
    "\"!rangevalue\"",
    "\"multiline\"",
    "\"!multiline\"",
    "\"dimension\"",
    "\"maxlength\"",
    "<MAXLENGTH_NUMBER>",
    "<RANGE_EQUAL>",
    "<RANGE_GREATERTHAN>",
    "<RANGE_GREATERTHANEQUAL>",
    "<RANGE_LESSTHAN>",
    "<RANGE_LESSTHANEQUAL>",
    "<RANGE_NOTEQUAL>",
    "<RANGE_MATCH>",
    "<RANGE_NOTMATCH>",
    "<RANGE_SMATCH>",
    "<RANGE_NOTSMATCH>",
    "<RANGE_PROGRAM>",
    "<RANGE_BETWEEN>",
    "<BETW1_STRING>",
    "<BETW1_SINGLE>",
    "\"\\\"\"",
    "<BETW1_CHAR>",
    "\"inclusive\"",
    "\"exclusive\"",
    "<BETW3_STRING>",
    "<BETW3_SINGLE>",
    "\"\\\"\"",
    "<BETW3_CHAR>",
    "\"inclusive\"",
    "\"exclusive\"",
    "<LOCAL_PATHTYPE>",
    "\"property\"",
    "\"to\"",
    "\"value\"",
    "<ADMINTYPE_STRING>",
    "<ADMINTYPE_SINGLE>",
    "\"}\"",
    "\"{\"",
  };

}
