/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.6";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}
PARSER_BEGIN(TypeParser)
package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;

import org.mxupdate.mapping.TypeDef_mxJPO;
import org.mxupdate.update.datamodel.Type_mxJPO.Kind;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;
import org.mxupdate.update.util.ParameterCache_mxJPO;

@SuppressWarnings("unused")
class TypeParser
    extends AbstractParser_mxJPO<Type_mxJPO>
{
}
PARSER_END(TypeParser)<DEFAULT> SKIP :
{
    " "
|   "\r"
|   "\t"
|   "\n"
}

<DEFAULT> TOKEN : /** first level */
{
      <DESCRIPTION:                         "description">                                  : STRING_EXPECTED

    | <ABSTRACT_TRUE:                       "abstract">
    | <ABSTRACT_FALSE:                      "!abstract">

    | <DERIVED:                             "derived">                                      : STRING_EXPECTED

    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_FALSE:                        "!hidden">

    | <METHOD:                              "method">                                       : STRING_EXPECTED

    | <ATTRIBUTE:                           "attribute">                                    : STRING_EXPECTED
}

/************************************************************** Common String */
<STRING_EXPECTED> SKIP :
{
    " " | "\t" | "\n" | "\r"
}

<STRING_EXPECTED> TOKEN :
{
      <STRING: (<APOSTROPHE>(<CHAR> | "\\\"" | "{" | "}" | " ")*<APOSTROPHE>)> : DEFAULT
    | <SINGLE: (<CHAR>)+> : DEFAULT
    | <#APOSTROPHE: "\"" >
    | <#CHAR: ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

/*********************************************************************** Kind */
<DEFAULT> TOKEN :
{
      <KIND:                                "kind">                                         : KIND_EXPECTED
}

<KIND_EXPECTED> SKIP :
{
    " " | "\t" | "\n" | "\r"
}

<KIND_EXPECTED> TOKEN :
{
      <BASIC:                               "basic">                                        : DEFAULT
    | <COMPOSED:                            "composed">                                     : DEFAULT
}

/******************************************************************** Trigger */
<DEFAULT> TOKEN :
{
      <TRIGGER:                             "trigger">                                      : TRIGEVENT_EXPECTED
    | <INPUT:                               "input">                                        : STRING_EXPECTED
}

/** Trigger Event */
<TRIGEVENT_EXPECTED> SKIP :
{
    " " | "\t" | "\n" | "\r"
}

<TRIGEVENT_EXPECTED> TOKEN :
{
      <TRIGEVENT:           (~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"])+>         : TRIGKIND_EXPECTED
}

/** Trigger Kind */
<TRIGKIND_EXPECTED> SKIP :
{
    " " | "\t" | "\n" | "\r"
}

<TRIGKIND_EXPECTED> TOKEN :
{      <ACTION:                              "action">                                       : STRING_EXPECTED
    | <CHECK:                               "check">                                        : STRING_EXPECTED
    | <OVERRIDE:                            "override">                                     : STRING_EXPECTED
 }

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : ADMINREF_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

<ADMINREF_EXPECTED> SKIP :
{
    " " | "\t" | "\n" | "\r"
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING : (<ADMINTYPE_APOSTROPHE>(<ADMINTYPE_CHAR> | "\\\"" | "{" | "}" | " ")*<ADMINTYPE_APOSTROPHE>)> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE : (<ADMINTYPE_CHAR>)+> : STRING_EXPECTED
    | <#ADMINTYPE_APOSTROPHE : "\"" >
    | <#ADMINTYPE_CHAR : ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

/**************************************************************************** */
/**
 * Parses one complete type definition.
 *
 * @param _type     target type to update with parsed values
 */
void parse(final Type_mxJPO _type)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    Token tmp;
    AdminProperty property;
    Trigger trigger;
} {
    (   ( <DESCRIPTION>             ( tmp = <STRING>                        {this.setValue(_type, "description",                            this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_type, "description",                            this.getSingle(tmp.image));} ) )

      | ( <KIND>                    ( <BASIC>                               {this.setValue(_type, "kind",                                   Kind.Basic);}
                                    | <COMPOSED>                            {this.setValue(_type, "kind",                                   Kind.Composed);} ) )

      | ( <ABSTRACT_TRUE>                                                   {this.setValue(_type, "abstractFlag",                           true);} )
      | ( <ABSTRACT_FALSE>                                                  {this.setValue(_type, "abstractFlag",                           false);} )

      | ( <DERIVED>                 ( tmp = <STRING>                        {this.setValue(_type, "derived",                                this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_type, "derived",                                this.getSingle(tmp.image));} ) )

      | ( <HIDDEN_TRUE>                                                     {this.setValue(_type, "hidden",                                 true);} )
      | ( <HIDDEN_FALSE>                                                    {this.setValue(_type, "hidden",                                 false);} )

      | ( <TRIGGER>                                                         {trigger = new Trigger();this.appendValue(_type, "triggers", "triggersStack", trigger);}
            tmp = <TRIGEVENT>                                               {this.setValue(trigger, "eventType",                            this.getSingle(tmp.image));}
                    ( <ACTION>                                              {this.setValue(trigger, "kind",                                 "action");}
                    | <CHECK>                                               {this.setValue(trigger, "kind",                                 "check");}
                    | <OVERRIDE>                                            {this.setValue(trigger, "kind",                                 "override");} )
                            ( tmp = <STRING>                                {this.setValue(trigger, "program",                              this.getString(tmp.image));}
                            | tmp = <SINGLE>                                {this.setValue(trigger, "program",                              this.getSingle(tmp.image));} )
                                    ( <INPUT>
                                            ( tmp = <STRING>                {this.setValue(trigger, "arguments",                            this.getString(tmp.image));}
                                            | tmp = <SINGLE>                {this.setValue(trigger, "arguments",                            this.getSingle(tmp.image));} ) )?  )

      | ( <METHOD>                  ( tmp = <STRING>                        {this.appendValue(_type, "methods",                             this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_type, "methods",                             this.getSingle(tmp.image));} ) )

      | ( <ATTRIBUTE>               ( tmp = <STRING>                        {this.appendValue(_type, "attributes",                          this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_type, "attributes",                          this.getSingle(tmp.image));} ) )

      | ( <PROPERTY>                                                        {property = new AdminProperty();this.appendValue(_type, "properties", "propertiesStack", property);}
                                    ( tmp = <STRING>                        {this.setValue(property, "name", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "name", this.getSingle(tmp.image));} )
              (   ( <PROPERTYVAL>   ( tmp = <STRING>                        {this.setValue(property, "value", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "value", this.getSingle(tmp.image));} ) )
                | ( <PROPERTYTO>    ( tmp = <ADMINTYPE_STRING>              {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                                    | tmp = <ADMINTYPE_SINGLE>              {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                    ( tmp = <STRING>                        {this.setValue(property, "refAdminName", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "refAdminName", this.getSingle(tmp.image));} ) ) )* )
    )*
}
