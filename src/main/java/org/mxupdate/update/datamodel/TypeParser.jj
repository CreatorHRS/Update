/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.7";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(TypeParser)
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;

import org.mxupdate.update.datamodel.AttributeCI_mxJPO;
import org.mxupdate.update.datamodel.AttributeCI_mxJPO.Range;
import org.mxupdate.update.datamodel.PathType_mxJPO.Cardinality;
import org.mxupdate.update.datamodel.Type_mxJPO;
import org.mxupdate.update.datamodel.helper.LocalAttributeList_mxJPO.LocalAttribute;
import org.mxupdate.update.datamodel.helper.LocalPathTypeList_mxJPO.LocalPathType;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Type_mxJPO}.
 */
@SuppressWarnings("unused")
class TypeParser
    extends AbstractParser_mxJPO
{
}

PARSER_END(TypeParser)

<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

<DEFAULT> TOKEN : /** first level */
{
      <PACKAGE:                             "package">                                      : STRING_EXPECTED

    | <UUID:                                "uuid">                                         : STRING_EXPECTED

    | <SYMBOLICNAME:                        "symbolicname">                                 : STRING_EXPECTED

    | <DESCRIPTION:                         "description">                                  : MULTILINESTRING_EXPECTED

    | <ABSTRACT_TRUE:                       "abstract">
    | <ABSTRACT_FALSE:                      "!abstract">

    | <DERIVED:                             "derived">                                      : STRING_EXPECTED

    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_FALSE:                        "!hidden">

    | <METHOD:                              "method">                                       : STRING_EXPECTED
}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\n" | "\t" | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" | "\\t" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*********************************************************************** Kind */
<DEFAULT> TOKEN :
{
      <KIND:                                "kind">                                         : KIND_EXPECTED
}
/** Kind for type definition. */
<KIND_EXPECTED> TOKEN :
{
      <BASIC:                               "basic">                                        : DEFAULT
    | <COMPOSED:                            "composed">                                     : DEFAULT
}
/** Kind for attribute definition. */
<KIND_EXPECTED> TOKEN :
{
      <KIND_BINARY:                         "binary">                                       : DEFAULT
    | <KIND_BOOLEAN:                        "boolean">                                      : DEFAULT
    | <KIND_DATE:                           "date">                                         : DEFAULT
    | <KIND_INTEGER:                        "integer">                                      : DEFAULT
    | <KIND_REAL:                           "real">                                         : DEFAULT
    | <KIND_STRING:                         "string">                                       : DEFAULT
}

/*************************************************** Global / Local Attribute */
<DEFAULT> TOKEN :
{
      <GLOBAL_ATTRIBUTE:                    "attribute">                                    : STRING_EXPECTED

    | <LOCAL_ATTRIBUTE:                     "local"  ([" ","\t","\n","\r"])+ "attribute">   : STRING_EXPECTED

    | <DEFAULTVALUE:                        "default">                                      : MULTILINESTRING_EXPECTED

    | <MULTIVALUE_TRUE:                     "multivalue">                                   : DEFAULT
    | <MULTIVALUE_FALSE:                    "!multivalue">                                  : DEFAULT

    | <RESETONCLONE_TRUE:                   "resetonclone">                                 : DEFAULT
    | <RESETONCLONE_FALSE:                  "!resetonclone">                                : DEFAULT

    | <RESETONREVISION_TRUE:                "resetonrevision">                              : DEFAULT
    | <RESETONREVISION_FALSE:               "!resetonrevision">                             : DEFAULT

    | <RANGEVALUE_TRUE:                     "rangevalue">                                   : DEFAULT
    | <RANGEVALUE_FALSE:                    "!rangevalue">                                  : DEFAULT

    | <MULTILINE_TRUE:                      "multiline">                                    : DEFAULT
    | <MULTILINE_FALSE:                     "!multiline">                                   : DEFAULT

    | <RULE:                                "rule">                                         : STRING_EXPECTED

    | <DIMENSION:                           "dimension">                                    : STRING_EXPECTED
}

/** Max Length */
<DEFAULT> TOKEN:
{
      <MAXLENGTH:                           "maxlength">                                    : MAXLENGTH_EXPECTED
}
<MAXLENGTH_EXPECTED> TOKEN :
{
      <MAXLENGTH_NUMBER : (["\u0030"-"\u0039"])+> : DEFAULT
}

/** Ranges */
<DEFAULT> TOKEN:
{
      <RANGE_EQUAL:                         "range" ([" ","\t","\n","\r"])+ "=">            : STRING_EXPECTED
    | <RANGE_GREATERTHAN:                   "range" ([" ","\t","\n","\r"])+ ">">            : STRING_EXPECTED
    | <RANGE_GREATERTHANEQUAL:              "range" ([" ","\t","\n","\r"])+ ">=">           : STRING_EXPECTED
    | <RANGE_LESSTHAN:                      "range" ([" ","\t","\n","\r"])+ "< ">           : STRING_EXPECTED
    | <RANGE_LESSTHANEQUAL:                 "range" ([" ","\t","\n","\r"])+ "<=">           : STRING_EXPECTED
    | <RANGE_NOTEQUAL:                      "range" ([" ","\t","\n","\r"])+ "!=">           : STRING_EXPECTED
    | <RANGE_MATCH:                         "range" ([" ","\t","\n","\r"])+ "match">        : STRING_EXPECTED
    | <RANGE_NOTMATCH:                      "range" ([" ","\t","\n","\r"])+ "!match">       : STRING_EXPECTED
    | <RANGE_SMATCH:                        "range" ([" ","\t","\n","\r"])+ "smatch">       : STRING_EXPECTED
    | <RANGE_NOTSMATCH:                     "range" ([" ","\t","\n","\r"])+ "!smatch">      : STRING_EXPECTED
    | <RANGE_PROGRAM:                       "range" ([" ","\t","\n","\r"])+ "program">      : STRING_EXPECTED
    | <RANGE_BETWEEN:                       "range" ([" ","\t","\n","\r"])+ "between">      : BETW1_EXPECTED
}

<BETW1_EXPECTED> TOKEN :
{
      <BETW1_STRING: (<BETW1_APOSTROPHE>(<BETW1_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<BETW1_APOSTROPHE>)> : BETW2_EXPECTED
    | <BETW1_SINGLE: (<BETW1_CHAR>)+> : BETW2_EXPECTED
    | <#BETW1_APOSTROPHE: "\"" >
    | <#BETW1_CHAR: ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

<BETW2_EXPECTED> TOKEN :
{
      <BETW2_INCLUSIVE: "inclusive"> : BETW3_EXPECTED
    | <BETW2_EXCLUSIVE: "exclusive"> : BETW3_EXPECTED
}

<BETW3_EXPECTED> TOKEN :
{
      <BETW3_STRING: (<BETW3_APOSTROPHE>(<BETW3_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<BETW3_APOSTROPHE>)> : BETW4_EXPECTED
    | <BETW3_SINGLE: (<BETW3_CHAR>)+> : BETW4_EXPECTED
    | <#BETW3_APOSTROPHE: "\"" >
    | <#BETW3_CHAR: ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

<BETW4_EXPECTED> TOKEN :
{
      <BETW4_INCLUSIVE: "inclusive"> : DEFAULT
    | <BETW4_EXCLUSIVE: "exclusive"> : DEFAULT
}

/************************************************************ Local Path Type */
<DEFAULT> TOKEN:
{
      <LOCAL_PATHTYPE:                      "local"  ([" ","\t","\n","\r"])+ "pathtype">    : STRING_EXPECTED
}

/** From / To Information */
<DEFAULT> TOKEN :
{
      <FROM:                                "from" ([" ","\t","\n"])+ "{">                  : DEFAULT
    | <TO:                                  "to"   ([" ","\t","\n"])+ "{">                  : DEFAULT
    | <CARDINALITY_ONE:                     "cardinality" ([" ","\t","\n"])+ "one">         : DEFAULT
    | <CARDINALITY_MANY:                    "cardinality" ([" ","\t","\n"])+ "many">        : DEFAULT
    | <TYPE_ALL:                            "type" ([" ","\t","\n"])+ "all">                : DEFAULT
    | <TYPE:                                "type">                                         : STRING_EXPECTED
    | <RELATIONSHIP_ALL:                    "relationship" ([" ","\t","\n"])+ "all">        : DEFAULT
    | <RELATIONSHIP:                        "relationship">                                 : STRING_EXPECTED
}

/******************************************************************** Trigger */
<DEFAULT> TOKEN :
{
      <TRIGGER:                             "trigger">                                      : TRIGEVENT_EXPECTED
    | <INPUT:                               "input">                                        : STRING_EXPECTED
}

/** Trigger Event */
<TRIGEVENT_EXPECTED> TOKEN :
{
      <TRIGEVENT:           (~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"])+>         : TRIGKIND_EXPECTED
}

/** Trigger Kind */
<TRIGKIND_EXPECTED> TOKEN :
{
      <ACTION:                              "action">                                       : STRING_EXPECTED
    | <CHECK:                               "check">                                        : STRING_EXPECTED
    | <OVERRIDE:                            "override">                                     : STRING_EXPECTED
 }

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : ADMINREF_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED
}

/**************************************************************************** */
/**
 * Parses one complete type definition.
 *
 * @param _type     target type to update with parsed values
 */
void parse(final Type_mxJPO _type)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    String str;
    AdminProperty property;
    Trigger trigger;
    LocalAttribute localAttr;
    LocalPathType localPathType;
} {
    (   ( <PACKAGE>                   str = string()                            {this.setValue(_type, "packageRef", str);} )

      | ( <UUID>                      property = uuid()                         {this.appendValue(this.getValue(_type, "properties"), "propertiesStack", property);} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_type, "symbolicNames", str);} )

      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_type, "description", str);} )

      | ( <KIND>                    ( <BASIC>                                   {this.setValue(_type, "kind", Type_mxJPO.Kind.Basic);}
                                    | <COMPOSED>                                {this.setValue(_type, "kind", Type_mxJPO.Kind.Composed);} ) )

      | ( <ABSTRACT_TRUE>                                                       {this.setValue(_type, "abstractFlag", true);} )
      | ( <ABSTRACT_FALSE>                                                      {this.setValue(_type, "abstractFlag", false);} )

      | ( <DERIVED>                   str = string()                            {this.setValue(_type, "derived", str);} )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_type, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_type, "hidden", false);} )

      | ( <TRIGGER>                   trigger = trigger()                       {this.appendValue(_type, "triggers", "triggersStack", trigger);} )

      | ( <METHOD>                    str = string()                            {this.appendValue(_type, "methods", str);} )

      | ( <GLOBAL_ATTRIBUTE>          str = string()                            {this.appendValue(_type, "globalAttributes", str);} )

      | ( <LOCAL_ATTRIBUTE>           localAttr = localAttribute()              {this.appendValue(_type, "localAttributes", localAttr);} )

      | ( <LOCAL_PATHTYPE>            localPathType = localPathType()           {this.appendValue(_type, "localPathTypes", localPathType);} )

      | ( <PROPERTY>                  property = property()                     {this.appendValue(_type, "properties", "propertiesStack", property);} )
    )*
}

/**
 * Parses the trigger definition.
 */
Trigger trigger() :
{
    String str;
    Token tmp;
    Trigger trigger = new Trigger();
}
{
    tmp = <TRIGEVENT>                                                           {this.setValue(trigger, "eventType",                            this.getSingle(tmp.image));}
            ( <ACTION>                                                          {this.setValue(trigger, "kind",                                 "action");}
            | <CHECK>                                                           {this.setValue(trigger, "kind",                                 "check");}
            | <OVERRIDE>                                                        {this.setValue(trigger, "kind",                                 "override");} )
                      str = string()                                            {this.setValue(trigger, "program",                              str);}
                            ( <INPUT> str = string()                            {this.setValue(trigger, "arguments",                            str);} )?
    {return trigger;}
}

/**
 * Parses the local path type definition.
 */
LocalPathType localPathType() :
{
    String str;
    AdminProperty property;
    LocalAttribute localAttr;
    LocalPathType localPathType = new LocalPathType();
}
{
    str = string()                                              {localPathType.setLocalName(str);}
    "{"
        ( ( <PACKAGE>           str = string()                  {this.setValue(localPathType, "packageRef", str);} )
        | ( <UUID>              property = uuid()               {this.appendValue(this.getValue(localPathType, "properties"), "propertiesStack", property);} )
        | ( <SYMBOLICNAME>      str = string()                  {this.appendValue(localPathType, "symbolicNames", str);} )
        | ( <DESCRIPTION>       str = multiLineString()         {this.setValue(localPathType, "description", str);} )
        | ( <HIDDEN_TRUE>                                       {this.setValue(localPathType, "hidden", true);} )
        | ( <HIDDEN_FALSE>                                      {this.setValue(localPathType, "hidden", false);} )
        | ( <FROM>
                  (   ( <CARDINALITY_ONE>                       {this.setValue(localPathType, "fromCardinality", PathType_mxJPO.Cardinality.One);} )
                    | ( <CARDINALITY_MANY>                      {this.setValue(localPathType, "fromCardinality", PathType_mxJPO.Cardinality.Many);} )
                    | ( <TYPE>             str = string()       {this.appendValue(localPathType, "fromTypes", str);} )
                    | ( <TYPE_ALL>                              {this.setValue(localPathType, "fromTypeAll", true);} )
                    | ( <RELATIONSHIP>     str = string()       {this.appendValue(localPathType, "fromRelations", str);} )
                    | ( <RELATIONSHIP_ALL>                      {this.setValue(localPathType, "fromRelationAll", true);} ) )*
              "}" )
        | ( <TO>
                  (   ( <TYPE>             str = string()       {this.appendValue(localPathType, "toTypes", str);} )
                    | ( <TYPE_ALL>                              {this.setValue(localPathType, "toTypeAll", true);} )
                    | ( <RELATIONSHIP>     str = string()       {this.appendValue(localPathType, "toRelations", str);} )
                    | ( <RELATIONSHIP_ALL>                      {this.setValue(localPathType, "toRelationAll", true);} ) )*
              "}" )
        | ( <GLOBAL_ATTRIBUTE>  str = string()                  {this.appendValue(localPathType, "globalAttributes", str);} )
        | ( <LOCAL_ATTRIBUTE>   localAttr = localAttribute()    {this.appendValue(localPathType, "localAttributes", localAttr);} )
        | ( <PROPERTY>          property = property()           {this.appendValue(this.getValue(localPathType, "properties"), "propertiesStack", property);} ) )*
    "}"
    {return localPathType;}
}

/**
 * Parses the local attribute definition.
 */
LocalAttribute localAttribute() :
{
    String str;
    Token tmp;
    AdminProperty property;
    Trigger trigger;
    Range range;
    LocalAttribute localAttr = new LocalAttribute();
}
{
    str = string()                                                              {localAttr.setLocalName(str);}
    "{"
        ( ( <PACKAGE>                   str = string()                          {this.setValue(localAttr, "packageRef", str);} )
        | ( <KIND>                    ( <KIND_BINARY>                           {this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Binary);}
                                      | <KIND_BOOLEAN>                          {this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Boolean);}
                                      | <KIND_DATE>                             {this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Date);}
                                      | <KIND_INTEGER>                          {this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Integer);}
                                      | <KIND_REAL>                             {this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Real);}
                                      | <KIND_STRING>                           {this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.String);} ) )
        | ( <UUID>                      property = uuid()                       {this.appendValue(this.getValue(localAttr, "properties"), "propertiesStack", property);} )
        | ( <SYMBOLICNAME>              str = string()                          {this.appendValue(localAttr, "symbolicNames",                   str);} )
        | ( <DESCRIPTION>               str = multiLineString()                 {this.setValue(localAttr, "description",                        str);} )
        | ( <DEFAULTVALUE>              str = multiLineString()                 {this.setValue(localAttr, "defaultValue",                       str);} )
        | ( <HIDDEN_TRUE>                                                       {this.setValue(localAttr, "hidden",                             true);} )
        | ( <HIDDEN_FALSE>                                                      {this.setValue(localAttr, "hidden",                             false);} )
        | ( <MULTIVALUE_TRUE>                                                   {this.setValue(localAttr, "multiValue",                         true);} )
        | ( <MULTIVALUE_FALSE>                                                  {this.setValue(localAttr, "multiValue",                         false);} )
        | ( <RESETONCLONE_TRUE>                                                 {this.setValue(localAttr, "resetOnClone",                       true);} )
        | ( <RESETONCLONE_FALSE>                                                {this.setValue(localAttr, "resetOnClone",                       false);} )
        | ( <RESETONREVISION_TRUE>                                              {this.setValue(localAttr, "resetOnRevision",                    true);} )
        | ( <RESETONREVISION_FALSE>                                             {this.setValue(localAttr, "resetOnRevision",                    false);} )
        | ( <RANGEVALUE_TRUE>                                                   {this.setValue(localAttr, "rangeValue",                         true);} )
        | ( <RANGEVALUE_FALSE>                                                  {this.setValue(localAttr, "rangeValue",                         false);} )
        | ( <MULTILINE_TRUE>                                                    {this.setValue(localAttr, "multiline",                          true);} )
        | ( <MULTILINE_FALSE>                                                   {this.setValue(localAttr, "multiline",                          false);} )
        | ( <MAXLENGTH>                 tmp = <MAXLENGTH_NUMBER>                {this.setValue(localAttr, "maxLength",                          this.getSingle(tmp.image));} )
        | ( <RULE>                      str = string()                          {this.appendValue(localAttr, "rules",                           str);} )
        | ( <DIMENSION>                 str = string()                          {this.setValue(localAttr, "dimension",                          str);} )
        | ( <TRIGGER>                   trigger = trigger()                     {this.appendValue(localAttr, "triggers",                        trigger);} )
        | ( <RANGE_EQUAL>               str = string()                          {range = new Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", str);this.appendValue(localAttr, "rangesStack", range);} )
        | ( <RANGE_GREATERTHAN>         str = string()                          {range = new Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", str);this.appendValue(localAttr, "rangesStack", range);} )
        | ( <RANGE_GREATERTHANEQUAL>    str = string()                          {range = new Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", str);this.appendValue(localAttr, "rangesStack", range);} )
        | ( <RANGE_LESSTHAN>            str = string()                          {range = new Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", str);this.appendValue(localAttr, "rangesStack", range);} )
        | ( <RANGE_LESSTHANEQUAL>       str = string()                          {range = new Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", str);this.appendValue(localAttr, "rangesStack", range);} )
        | ( <RANGE_NOTEQUAL>            str = string()                          {range = new Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", str);this.appendValue(localAttr, "rangesStack", range);} )
        | ( <RANGE_MATCH>               str = string()                          {range = new Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", str);this.appendValue(localAttr, "rangesStack", range);} )
        | ( <RANGE_NOTMATCH>            str = string()                          {range = new Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", str);this.appendValue(localAttr, "rangesStack", range);} )
        | ( <RANGE_SMATCH>              str = string()                          {range = new Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", str);this.appendValue(localAttr, "rangesStack", range);} )
        | ( <RANGE_NOTSMATCH>           str = string()                          {range = new Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", str);this.appendValue(localAttr, "rangesStack", range);} )
        | ( <RANGE_PROGRAM>             str = string()                          {range = new Range();this.setValue(range, "type", "program");this.setValue(range, "value1", str);this.appendValue(localAttr, "rangesStack", range);}
                   ( <INPUT>            str = string()                          {this.setValue(range, "value2", str);} )? )
        | ( <RANGE_BETWEEN>                                                     {range = new Range();this.setValue(range, "type", "between");this.appendValue(localAttr, "rangesStack", range);}
                                      ( tmp = <BETW1_STRING>                    {this.setValue(range, "value1", this.getString(tmp.image));}
                                      | tmp = <BETW1_SINGLE>                    {this.setValue(range, "value1", this.getSingle(tmp.image));} )
                                      ( <BETW2_INCLUSIVE>                       {this.setValue(range, "include1", true);}
                                      | <BETW2_EXCLUSIVE>                       {this.setValue(range, "include1", false);})
                                      ( tmp = <BETW3_STRING>                    {this.setValue(range, "value2", this.getString(tmp.image));}
                                      | tmp = <BETW3_SINGLE>                    {this.setValue(range, "value2", this.getSingle(tmp.image));} )
                                      ( <BETW4_INCLUSIVE>                       {this.setValue(range, "include2", true);}
                                      | <BETW4_EXCLUSIVE>                       {this.setValue(range, "include2", false);} ) )
        | ( <PROPERTY>                  property = property()                   {this.appendValue(this.getValue(localAttr, "properties"), "propertiesStack", property);}) )*
    "}"
    {return localAttr;}
}

/**
 * Parses the UUID property definition.
 */
AdminProperty uuid() :
{
    String str;
    AdminProperty property = new AdminProperty();
}
{
    str = string()
    {this.setValue(property, "value", str);}
    {this.setValue(property, "name",  "UUID");}
    {return property;}
}

/**
 * Parses the properties definition.
 */
AdminProperty property() :
{
    String str;
    Token tmp;
    AdminProperty property = new AdminProperty();
}
{
    str = string()                                 {this.setValue(property, "name", str);}
    ( ( <PROPERTYVAL>  str = string()              {this.setValue(property, "value", str);} )
    | ( <PROPERTYTO>   ( tmp = <ADMINTYPE_STRING>  {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                       | tmp = <ADMINTYPE_SINGLE>  {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                   str = string()  {this.setValue(property, "refAdminName", str);} ) )*
    {return property;}
}

/**
 * Evaluates multi-line string.
 *
 * @return string
 */
String multiLineString() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <MULTILINESTRING>  {ret = this.getString(tmp.image);}
    | tmp = <MULTILINESINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}

/**
 * Evaluates single-line string.
 *
 * @return string
 */
String string() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <STRING>  {ret = this.getString(tmp.image);}
    | tmp = <SINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}
