/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.6";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(DimensionParser)
package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;
import java.io.StringReader;
import java.util.Collection;
import java.util.Set;

import org.mxupdate.mapping.TypeDef_mxJPO;
import org.mxupdate.update.datamodel.Dimension_mxJPO;
import org.mxupdate.update.datamodel.Dimension_mxJPO.Unit;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;
import org.mxupdate.update.util.ParameterCache_mxJPO;

/**
 * Parses the update format for {@link DimensionCI_mxJPO}.
 */
@SuppressWarnings("unused")
class DimensionParser
    extends AbstractParser_mxJPO
{
}

PARSER_END(DimensionParser)

<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

<DEFAULT> TOKEN :
{
      <SYMBOLICNAME:                        "symbolicname">                                         : STRING_EXPECTED
    | <DESCRIPTION:                         "description">                                          : MULTILINESTRING_EXPECTED
    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_TRUE_VIA_VALUE:               "hidden" ([" ","\t","\n","\r"])+ ["t","T"] ["r","R"] ["u","U"] ["e","E"]>
    | <HIDDEN_TRUE_VIA_VALUE_APOSTROPHE:    "hidden" ([" ","\t","\n","\r"])+ "\"" ["t","T"] ["r","R"] ["u","U"] ["e","E"] "\"">
    | <HIDDEN_FALSE:                        "!hidden">
    | <HIDDEN_FALSE_VIA_VALUE:              "hidden" ([" ","\t","\n","\r"])+ ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"]>
    | <HIDDEN_FALSE_VIA_VALUE_APOSTROPHE:   "hidden" ([" ","\t","\n","\r"])+ "\"" ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"] "\"">
}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\n" | "\t" | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" | "\\t" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/******************************************************* String for Unit Name */
<DEFAULT> TOKEN :
{
      <UNIT:                                "unit">                                                 : UNITNAME_EXPECTED
}

<UNITNAME_EXPECTED> TOKEN :
{
      <UNITNAME_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : UNITDEF_EXPECTED
    | <UNITNAME_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/********************************************************** Unit Value String */
<UNITDEF_EXPECTED> TOKEN :
{
      <UNITDEF_START :                              "{">                                                                                            : UNITDEF_EXPECTED
    | <UNITDEF_END :                                "}">                                                                                            : DEFAULT
    | <UNITDEF_DEFAULT_TRUE:                        "default">                                                                                      : UNITDEF_EXPECTED
    | <UNITDEF_DEFAULT_TRUE_VIA_VALUE:              "default" ([" ","\t","\n","\r"])+ ["t","T"] ["r","R"] ["u","U"] ["e","E"]>                      : UNITDEF_EXPECTED
    | <UNITDEF_DEFAULT_TRUE_VIA_VALUE_APOSTROPHE:   "default" ([" ","\t","\n","\r"])+ "\"" ["t","T"] ["r","R"] ["u","U"] ["e","E"] "\"">            : UNITDEF_EXPECTED
    | <UNITDEF_DEFAULT_FALSE:                       "!default">                                                                                     : UNITDEF_EXPECTED
    | <UNITDEF_DEFAULT_FALSE_VIA_VALUE:             "default" ([" ","\t","\n","\r"])+ ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"]>            : UNITDEF_EXPECTED
    | <UNITDEF_DEFAULT_FALSE_VIA_VALUE_APOSTROPHE:  "default" ([" ","\t","\n","\r"])+ "\"" ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"] "\"">  : UNITDEF_EXPECTED
    | <UNITDEF_DESCRIPTION:                         "description">                                                                                  : UNITDEF_STRING_EXPECTED
    | <UNITDEF_LABEL:                               "label">                                                                                        : UNITDEF_STRING_EXPECTED
    | <UNITDEF_MULTIPLIER:                          "multiplier">                                                                                   : UNITDEF_DOUBLE_EXPECTED
    | <UNITDEF_OFFSET:                              "offset">                                                                                       : UNITDEF_DOUBLE_EXPECTED
    | <UNITDEF_SETTING:                             "setting">                                                                                      : UNITDEF_STRINGSTRING_EXPECTED
    | <UNITDEF_PROPERTY:                            "property">                                                                                     : UNITDEF_STRING_EXPECTED
    | <UNITDEF_PROPERTYVAL:                         "value">                                                                                        : UNITDEF_STRING_EXPECTED
    | <UNITDEF_PROPERTYTO:                          "to">                                                                                           : UNITDEF_STRINGSTRING_EXPECTED
    | <UNITDEF_SYSTEM:                              "system">                                                                                       : UNITDEF_SYSTEMNAME_EXPECTED
}

/** String for Unit Definition */
<UNITDEF_STRING_EXPECTED> TOKEN :
{
      <UNITDEF_STRING_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : UNITDEF_EXPECTED
    | <UNITDEF_STRING_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : UNITDEF_EXPECTED
}

/** Two Strings for Unit Definition */
<UNITDEF_STRINGSTRING_EXPECTED> TOKEN :
{
      <UNITDEF_STRINGSTRING_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : UNITDEF_STRING_EXPECTED
    | <UNITDEF_STRINGSTRING_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : UNITDEF_STRING_EXPECTED
}

/** Double for Unit Definition */
<UNITDEF_DOUBLE_EXPECTED> TOKEN :
{
      <UNITDEF_DOUBLE_DOUBLE : (("-")? (["0"-"9"])* ("." (["0"-"9"])*)? ("E" ("-")? (["0"-"9"])*)?)> : UNITDEF_EXPECTED
}

/** System Name for Unit Definition */
<UNITDEF_SYSTEMNAME_EXPECTED> TOKEN :
{
      <UNITDEF_SYSTEMNAME_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : UNITDEF_SYSTEMDEF_EXPECTED
    | <UNITDEF_SYSTEMNAME_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : UNITDEF_SYSTEMDEF_EXPECTED
}

/** System Defintion for Unit Definition */
<UNITDEF_SYSTEMDEF_EXPECTED> TOKEN :
{
      <UNITDEF_SYSTEMDEF_TO : "to"> : UNITDEF_SYSTEMDEF_EXPECTED
    | <UNITDEF_SYSTEMDEF_UNIT : "unit"> : UNITDEF_SYSTEMUNIT_EXPECTED
}

/** System Unit for Unit Definition */
<UNITDEF_SYSTEMUNIT_EXPECTED> TOKEN :
{
      <UNITDEF_SYSTEMUNIT_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : UNITDEF_EXPECTED
    | <UNITDEF_SYSTEMUNIT_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : UNITDEF_EXPECTED
}

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                             : PROPERTY_STRING_EXPECTED
    | <PROPERTYVAL:                         "value">                                                : PROPERTY_STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                                   : PROPERTYTO_EXPECTED
}

<PROPERTYTO_EXPECTED> TOKEN :
{
      <PROPERTYTOTYPE : (<PROPERTYTO_CHAR>)+> : PROPERTY_STRING_EXPECTED
    | <#PROPERTYTO_CHAR : ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

<PROPERTY_STRING_EXPECTED> TOKEN :
{
      <PROPERTY_STRING_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <PROPERTY_STRING_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/**************************************************************************** */

/**
 * Parses one complete dimension definition.
 *
 * @param _dimension    target dimension to update with parsed values
 */
void parse(final Dimension_mxJPO _dimension)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    String tmpStr;
    Token tmp;
    Set<String> set;
    AdminProperty tmpProp;
    Unit unit;
} {
    (   ( <SYMBOLICNAME>            ( tmp = <STRING>                            {this.appendValue(_dimension, "symbolicNames", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                            {this.appendValue(_dimension, "symbolicNames", this.getSingle(tmp.image));} ) )

      | (<DESCRIPTION>  ( tmp = <MULTILINESTRING>                               {this.setValue(_dimension, "description", this.getString(tmp.image));}
                        | tmp = <MULTILINESINGLE>                               {this.setValue(_dimension, "description", this.getSingle(tmp.image));} ) )
      | ( (   <HIDDEN_TRUE>
            | <HIDDEN_TRUE_VIA_VALUE>
            | <HIDDEN_TRUE_VIA_VALUE_APOSTROPHE> )                              {this.setValue(_dimension, "hidden", true);} )
      | ( (   <HIDDEN_FALSE>
            | <HIDDEN_FALSE_VIA_VALUE>
            | <HIDDEN_FALSE_VIA_VALUE_APOSTROPHE> )                             {this.setValue(_dimension, "hidden", false);} )

      | ( <UNIT>                                                                {unit = new Unit();}
            ( tmp = <UNITNAME_STRING>                                           {this.setValue(unit, "name", this.getString(tmp.image));}
            | tmp = <UNITNAME_SINGLE>                                           {this.setValue(unit, "name", this.getSingle(tmp.image));} )
                <UNITDEF_START>
                    ( ( ( <UNITDEF_DEFAULT_TRUE>
                        | <UNITDEF_DEFAULT_TRUE_VIA_VALUE>
                        | <UNITDEF_DEFAULT_TRUE_VIA_VALUE_APOSTROPHE> )         {this.setValue(unit, "defaultUnit", true);} )
                    | ( ( <UNITDEF_DEFAULT_FALSE>
                        | <UNITDEF_DEFAULT_FALSE_VIA_VALUE>
                        | <UNITDEF_DEFAULT_FALSE_VIA_VALUE_APOSTROPHE> )        {this.setValue(unit, "defaultUnit", false);} )
                    | ( <UNITDEF_DESCRIPTION>   tmpStr = uvString()             {this.setValue(unit, "description", tmpStr);} )
                    | ( <UNITDEF_LABEL>         tmpStr = uvString()             {this.setValue(unit, "label", tmpStr);} )
                    | ( <UNITDEF_MULTIPLIER>    tmp = <UNITDEF_DOUBLE_DOUBLE>   {this.setValue(unit, "multiplier", Double.parseDouble(tmp.image));} )
                    | ( <UNITDEF_OFFSET>        tmp = <UNITDEF_DOUBLE_DOUBLE>   {this.setValue(unit, "offset", Double.parseDouble(tmp.image));} )
                    | ( unitSetting(unit) )
                    | ( unitProperty(unit) )
                    | ( unitSystem(unit) ) )*
                            <UNITDEF_END>                                       {this.appendValue(_dimension, "units", unit);} )

      | (<PROPERTY>                                                             {tmpProp = new AdminProperty();this.appendValue(_dimension, "properties", "propertiesStack", tmpProp);}
                ( tmp = <PROPERTY_STRING_STRING>                                {this.setValue(tmpProp, "name", this.getString(tmp.image));}
                | tmp = <PROPERTY_STRING_SINGLE>                                {this.setValue(tmpProp, "name", this.getSingle(tmp.image));} )
              (   ( <PROPERTYTO>   tmp = <PROPERTYTOTYPE>                       {this.setValue(tmpProp, "refAdminType", this.getSingle(tmp.image));}
                                  ( ( tmp = <PROPERTY_STRING_STRING>            {this.setValue(tmpProp, "refAdminName", this.getString(tmp.image));} )
                                  | ( tmp = <PROPERTY_STRING_SINGLE>            {this.setValue(tmpProp, "refAdminName", this.getSingle(tmp.image));} ) ) )
                | ( <PROPERTYVAL> ( ( tmp = <PROPERTY_STRING_STRING>            {this.setValue(tmpProp, "value", this.getString(tmp.image));} )
                                  | ( tmp = <PROPERTY_STRING_SINGLE>            {this.setValue(tmpProp, "value", this.getSingle(tmp.image));} ) ) ) )* )
    )*
}

/**
 * Parses one setting for a unit definition. The setting is stored on the
 * dimension as property where the name of the property is the key of the
 * setting with % as prefix.
 *
 * @param _unit     unit instance for which the setting must be parsed
 */
void unitSetting(final Unit _unit) : {
    Token tmp;
    final String key, value;
}  {
    <UNITDEF_SETTING>
    (
        (tmp = <UNITDEF_STRINGSTRING_STRING>) {key = this.getString(tmp.image);}
        |
        (tmp = <UNITDEF_STRINGSTRING_SINGLE>) {key = this.getSingle(tmp.image);}
    )
    (value = uvString())
    {
        final AdminProperty prop = new AdminProperty();
        this.setValue(prop, "name", "%" + key);
        this.setValue(prop, "value", value);
        this.appendValue(_unit, "properties", "propertiesStack", prop);
    }
}

/**
 * Parses one property for a unit definition.
 *
 * @param _unit     unit instance for which the property must be parsed
 */
void unitProperty(final Unit _unit) : {
    Token tmp;
    String name = null;
    String value = null;
    String toType = null;
    String toName = null;
}  {
    <UNITDEF_PROPERTY> name = uvString()
    (
          ( <UNITDEF_PROPERTYVAL> value = uvString() )
        | ( <UNITDEF_PROPERTYTO>
                (
                    (tmp = <UNITDEF_STRINGSTRING_STRING>) {toType = this.getString(tmp.image);}
                    |
                    (tmp = <UNITDEF_STRINGSTRING_SINGLE>) {toType = this.getSingle(tmp.image);}
                )
                toName = uvString() )
    )*
    {
        final AdminProperty prop = new AdminProperty();
        this.setValue(prop, "name", name);
        this.setValue(prop, "value", value);
        this.setValue(prop, "refAdminType", toType);
        this.setValue(prop, "refAdminName", toName);
        this.appendValue(_unit, "properties", "propertiesStack", prop);
    }
}

/**
 * Parses the system information for a unit definition. The system information
 * is stored as property where the referenced admin type is set to unit and the
 * referenced admin name is the system unit.
 *
 * @param _unit     unit instance for which the system must be parsed
 */
void unitSystem(final Unit _unit) : {
    Token tmp;
    String name;
    String unit;
}  {
    <UNITDEF_SYSTEM>
    (
        (tmp = <UNITDEF_SYSTEMNAME_STRING>) {name = this.getString(tmp.image);}
        |
        (tmp = <UNITDEF_SYSTEMNAME_SINGLE>) {name = this.getSingle(tmp.image);}
    )
    <UNITDEF_SYSTEMDEF_TO>
    <UNITDEF_SYSTEMDEF_UNIT>
    (
        (tmp = <UNITDEF_SYSTEMUNIT_STRING>) {unit = this.getString(tmp.image);}
        |
        (tmp = <UNITDEF_SYSTEMUNIT_SINGLE>) {unit = this.getSingle(tmp.image);}
    )
    {
        final AdminProperty prop = new AdminProperty();
        this.setValue(prop, "name", name);
        this.setValue(prop, "refAdminType", "unit");
        this.setValue(prop, "refAdminName", unit);
        this.appendValue(_unit, "properties", "propertiesStack", prop);
    }
}

/**
 * Evaluates a simple string.
 *
 * @return evaluated simple string
 */
String uvString() : {
    Token tmp;
    String ret;
} {
    (
        (tmp = <UNITDEF_STRING_STRING>) {ret = this.getString(tmp.image);}
        |
        (tmp = <UNITDEF_STRING_SINGLE>) {ret = this.getSingle(tmp.image);}
    )
    {
        return ret;
    }
}
