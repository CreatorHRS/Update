/* RelationshipParser.java */
/* Generated By:JavaCC: Do not edit this line. RelationshipParser.java */
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;

import org.mxupdate.update.datamodel.AttributeCI_mxJPO;
import org.mxupdate.update.datamodel.AttributeCI_mxJPO.Range;
import org.mxupdate.update.datamodel.PathType_mxJPO;
import org.mxupdate.update.datamodel.Relationship_mxJPO;
import org.mxupdate.update.datamodel.helper.LocalAttributeList_mxJPO.LocalAttribute;
import org.mxupdate.update.datamodel.helper.LocalPathTypeList_mxJPO.LocalPathType;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Relationship_mxJPO}.
 */
@SuppressWarnings("unused")
class RelationshipParser_mxJPO
    extends AbstractParser_mxJPO implements RelationshipParserConstants_mxJPO {

/**************************************************************************** */
/**
 * Parses one complete relationship definition.
 *
 * @param _relationship target relationship to update with parsed values
 */
  final public void parse(final Relationship_mxJPO _relationship) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {Token tmp;
    AdminProperty property;
    Trigger trigger;
    String fromTo;
    LocalAttribute localAttr;
    Range range;
    LocalPathType localPathType;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UUID:
      case SYMBOLICNAME:
      case DESCRIPTION:
      case ABSTRACT_TRUE:
      case ABSTRACT_FALSE:
      case DERIVED:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case PREVENTDUPLICATES_TRUE:
      case PREVENTDUPLICATES_FALSE:
      case RULE:
      case KIND:
      case TRIGGER:
      case FROM:
      case TO:
      case GLOBAL_ATTRIBUTE:
      case LOCAL_ATTRIBUTE:
      case LOCAL_PATHTYPE:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UUID:{
        jj_consume_token(UUID);
property = new AdminProperty();
                                                                                                 this.appendValue(this.getValue(_relationship, "properties"), "propertiesStack", property);
                                                                                                 this.setValue(property, "name",  "UUID");
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.appendValue(_relationship, "symbolicNames", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.appendValue(_relationship, "symbolicNames", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTILINESTRING:{
          tmp = jj_consume_token(MULTILINESTRING);
this.setValue(_relationship, "description",                    this.getString(tmp.image));
          break;
          }
        case MULTILINESINGLE:{
          tmp = jj_consume_token(MULTILINESINGLE);
this.setValue(_relationship, "description",                    this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case KIND:{
        jj_consume_token(KIND);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BASIC:{
          jj_consume_token(BASIC);
this.setValue(_relationship, "kind",                           Relationship_mxJPO.Kind.Basic);
          break;
          }
        case COMPOSITIONAL:{
          jj_consume_token(COMPOSITIONAL);
this.setValue(_relationship, "kind",                           Relationship_mxJPO.Kind.Compositional);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ABSTRACT_TRUE:{
        jj_consume_token(ABSTRACT_TRUE);
this.setValue(_relationship, "abstractFlag",                   true);
        break;
        }
      case ABSTRACT_FALSE:{
        jj_consume_token(ABSTRACT_FALSE);
this.setValue(_relationship, "abstractFlag",                   false);
        break;
        }
      case DERIVED:{
        jj_consume_token(DERIVED);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(_relationship, "derived",                        this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(_relationship, "derived",                        this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_relationship, "hidden",                         true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_relationship, "hidden",                         false);
        break;
        }
      case PREVENTDUPLICATES_TRUE:{
        jj_consume_token(PREVENTDUPLICATES_TRUE);
this.setValue(_relationship, "preventDuplicates",              true);
        break;
        }
      case PREVENTDUPLICATES_FALSE:{
        jj_consume_token(PREVENTDUPLICATES_FALSE);
this.setValue(_relationship, "preventDuplicates",              false);
        break;
        }
      case RULE:{
        jj_consume_token(RULE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(_relationship, "rule",                           this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(_relationship, "rule",                           this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case TRIGGER:{
        jj_consume_token(TRIGGER);
trigger = new Trigger();this.appendValue(_relationship, "triggers", "triggersStack", trigger);
        tmp = jj_consume_token(TRIGEVENT);
this.setValue(trigger, "eventType",                            this.getSingle(tmp.image));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ACTION:{
          jj_consume_token(ACTION);
this.setValue(trigger, "kind",                                 "action");
          break;
          }
        case CHECK:{
          jj_consume_token(CHECK);
this.setValue(trigger, "kind",                                 "check");
          break;
          }
        case OVERRIDE:{
          jj_consume_token(OVERRIDE);
this.setValue(trigger, "kind",                                 "override");
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(trigger, "program",                              this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(trigger, "program",                              this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INPUT:{
          jj_consume_token(INPUT);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case STRING:{
            tmp = jj_consume_token(STRING);
this.setValue(trigger, "arguments",                            this.getString(tmp.image));
            break;
            }
          case SINGLE:{
            tmp = jj_consume_token(SINGLE);
this.setValue(trigger, "arguments",                            this.getSingle(tmp.image));
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        break;
        }
      case FROM:
      case TO:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FROM:{
          jj_consume_token(FROM);
fromTo = "from";
          break;
          }
        case TO:{
          jj_consume_token(TO);
fromTo = "to";
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPAGATEMODIFY_TRUE:
          case PROPAGATEMODIFY_FALSE:
          case PROPAGATECONNECTION_TRUE:
          case PROPAGATECONNECTION_FALSE:
          case MEANING:
          case REVISION_NONE:
          case REVISION_FLOAT:
          case REVISION_REPLICATE:
          case CLONE_NONE:
          case CLONE_FLOAT:
          case CLONE_REPLICATE:
          case CARDINALITY_ONE:
          case CARDINALITY_MANY:
          case TYPE_ALL:
          case TYPE:
          case RELATIONSHIP_ALL:
          case RELATIONSHIP:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPAGATEMODIFY_TRUE:{
            jj_consume_token(PROPAGATEMODIFY_TRUE);
this.setValue(_relationship, fromTo, "propagateModify",        true);
            break;
            }
          case PROPAGATEMODIFY_FALSE:{
            jj_consume_token(PROPAGATEMODIFY_FALSE);
this.setValue(_relationship, fromTo, "propagateModify",        false);
            break;
            }
          case PROPAGATECONNECTION_TRUE:{
            jj_consume_token(PROPAGATECONNECTION_TRUE);
this.setValue(_relationship, fromTo, "propagateConnection",    true);
            break;
            }
          case PROPAGATECONNECTION_FALSE:{
            jj_consume_token(PROPAGATECONNECTION_FALSE);
this.setValue(_relationship, fromTo, "propagateConnection",    false);
            break;
            }
          case MEANING:{
            jj_consume_token(MEANING);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(_relationship, fromTo, "meaning",                this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(_relationship, fromTo, "meaning",                this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case REVISION_NONE:{
            jj_consume_token(REVISION_NONE);
this.setValue(_relationship, fromTo, "revisionAction",         "none");
            break;
            }
          case REVISION_FLOAT:{
            jj_consume_token(REVISION_FLOAT);
this.setValue(_relationship, fromTo, "revisionAction",         "float");
            break;
            }
          case REVISION_REPLICATE:{
            jj_consume_token(REVISION_REPLICATE);
this.setValue(_relationship, fromTo, "revisionAction",         "replicate");
            break;
            }
          case CLONE_NONE:{
            jj_consume_token(CLONE_NONE);
this.setValue(_relationship, fromTo, "cloneAction",            "none");
            break;
            }
          case CLONE_FLOAT:{
            jj_consume_token(CLONE_FLOAT);
this.setValue(_relationship, fromTo, "cloneAction",            "float");
            break;
            }
          case CLONE_REPLICATE:{
            jj_consume_token(CLONE_REPLICATE);
this.setValue(_relationship, fromTo, "cloneAction",            "replicate");
            break;
            }
          case CARDINALITY_ONE:{
            jj_consume_token(CARDINALITY_ONE);
this.setValue(_relationship, fromTo, "cardinality",            "one");
            break;
            }
          case CARDINALITY_MANY:{
            jj_consume_token(CARDINALITY_MANY);
this.setValue(_relationship, fromTo, "cardinality",            "many");
            break;
            }
          case TYPE:{
            jj_consume_token(TYPE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.appendValue(_relationship, fromTo, "types",               this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.appendValue(_relationship, fromTo, "types",               this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case TYPE_ALL:{
            jj_consume_token(TYPE_ALL);
this.setValue(_relationship, fromTo, "typeAll",                true);
            break;
            }
          case RELATIONSHIP:{
            jj_consume_token(RELATIONSHIP);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.appendValue(_relationship, fromTo, "relations",           this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.appendValue(_relationship, fromTo, "relations",           this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[15] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RELATIONSHIP_ALL:{
            jj_consume_token(RELATIONSHIP_ALL);
this.setValue(_relationship, fromTo, "relationAll",            true);
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(100);
        break;
        }
      case GLOBAL_ATTRIBUTE:{
        jj_consume_token(GLOBAL_ATTRIBUTE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.appendValue(_relationship, "globalAttributes",            this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.appendValue(_relationship, "globalAttributes",            this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case LOCAL_ATTRIBUTE:{
        jj_consume_token(LOCAL_ATTRIBUTE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
localAttr = new LocalAttribute(this.getString(tmp.image));this.appendValue(_relationship, "localAttributes", localAttr);
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
localAttr = new LocalAttribute(this.getSingle(tmp.image));this.appendValue(_relationship, "localAttributes", localAttr);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(101);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case UUID:
          case SYMBOLICNAME:
          case DESCRIPTION:
          case HIDDEN_TRUE:
          case HIDDEN_FALSE:
          case RULE:
          case KIND:
          case TRIGGER:
          case DEFAULTVALUE:
          case MULTIVALUE_TRUE:
          case MULTIVALUE_FALSE:
          case RESETONCLONE_TRUE:
          case RESETONCLONE_FALSE:
          case RESETONREVISION_TRUE:
          case RESETONREVISION_FALSE:
          case RANGEVALUE_TRUE:
          case RANGEVALUE_FALSE:
          case MULTILINE_TRUE:
          case MULTILINE_FALSE:
          case DIMENSION:
          case MAXLENGTH:
          case RANGE_EQUAL:
          case RANGE_GREATERTHAN:
          case RANGE_GREATERTHANEQUAL:
          case RANGE_LESSTHAN:
          case RANGE_LESSTHANEQUAL:
          case RANGE_NOTEQUAL:
          case RANGE_MATCH:
          case RANGE_NOTMATCH:
          case RANGE_SMATCH:
          case RANGE_NOTSMATCH:
          case RANGE_PROGRAM:
          case RANGE_BETWEEN:
          case PROPERTY:{
            ;
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            break label_3;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case KIND:{
            jj_consume_token(KIND);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case KIND_BINARY:{
              jj_consume_token(KIND_BINARY);
this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Binary);
              break;
              }
            case KIND_BOOLEAN:{
              jj_consume_token(KIND_BOOLEAN);
this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Boolean);
              break;
              }
            case KIND_DATE:{
              jj_consume_token(KIND_DATE);
this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Date);
              break;
              }
            case KIND_INTEGER:{
              jj_consume_token(KIND_INTEGER);
this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Integer);
              break;
              }
            case KIND_REAL:{
              jj_consume_token(KIND_REAL);
this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.Real);
              break;
              }
            case KIND_STRING:{
              jj_consume_token(KIND_STRING);
this.setValue(localAttr, "kind",                               AttributeCI_mxJPO.Kind.String);
              break;
              }
            default:
              jj_la1[20] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case UUID:{
            jj_consume_token(UUID);
property = new AdminProperty();
                                                                                                 this.appendValue(this.getValue(localAttr, "properties"), "propertiesStack", property);
                                                                                                 this.setValue(property, "name",  "UUID");
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[21] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case SYMBOLICNAME:{
            jj_consume_token(SYMBOLICNAME);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.appendValue(localAttr, "symbolicNames",                   this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.appendValue(localAttr, "symbolicNames",                   this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[22] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case DESCRIPTION:{
            jj_consume_token(DESCRIPTION);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MULTILINESTRING:{
              tmp = jj_consume_token(MULTILINESTRING);
this.setValue(localAttr, "description",                        this.getString(tmp.image));
              break;
              }
            case MULTILINESINGLE:{
              tmp = jj_consume_token(MULTILINESINGLE);
this.setValue(localAttr, "description",                        this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[23] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case DEFAULTVALUE:{
            jj_consume_token(DEFAULTVALUE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MULTILINESTRING:{
              tmp = jj_consume_token(MULTILINESTRING);
this.setValue(localAttr, "defaultValue",                       this.getString(tmp.image));
              break;
              }
            case MULTILINESINGLE:{
              tmp = jj_consume_token(MULTILINESINGLE);
this.setValue(localAttr, "defaultValue",                       this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[24] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case HIDDEN_TRUE:{
            jj_consume_token(HIDDEN_TRUE);
this.setValue(localAttr, "hidden",                             true);
            break;
            }
          case HIDDEN_FALSE:{
            jj_consume_token(HIDDEN_FALSE);
this.setValue(localAttr, "hidden",                             false);
            break;
            }
          case MULTIVALUE_TRUE:{
            jj_consume_token(MULTIVALUE_TRUE);
this.setValue(localAttr, "multiValue",                         true);
            break;
            }
          case MULTIVALUE_FALSE:{
            jj_consume_token(MULTIVALUE_FALSE);
this.setValue(localAttr, "multiValue",                         false);
            break;
            }
          case RESETONCLONE_TRUE:{
            jj_consume_token(RESETONCLONE_TRUE);
this.setValue(localAttr, "resetOnClone",                       true);
            break;
            }
          case RESETONCLONE_FALSE:{
            jj_consume_token(RESETONCLONE_FALSE);
this.setValue(localAttr, "resetOnClone",                       false);
            break;
            }
          case RESETONREVISION_TRUE:{
            jj_consume_token(RESETONREVISION_TRUE);
this.setValue(localAttr, "resetOnRevision",                    true);
            break;
            }
          case RESETONREVISION_FALSE:{
            jj_consume_token(RESETONREVISION_FALSE);
this.setValue(localAttr, "resetOnRevision",                    false);
            break;
            }
          case RANGEVALUE_TRUE:{
            jj_consume_token(RANGEVALUE_TRUE);
this.setValue(localAttr, "rangeValue",                         true);
            break;
            }
          case RANGEVALUE_FALSE:{
            jj_consume_token(RANGEVALUE_FALSE);
this.setValue(localAttr, "rangeValue",                         false);
            break;
            }
          case MULTILINE_TRUE:{
            jj_consume_token(MULTILINE_TRUE);
this.setValue(localAttr, "multiline",                          true);
            break;
            }
          case MULTILINE_FALSE:{
            jj_consume_token(MULTILINE_FALSE);
this.setValue(localAttr, "multiline",                          false);
            break;
            }
          case MAXLENGTH:{
            jj_consume_token(MAXLENGTH);
            tmp = jj_consume_token(MAXLENGTH_NUMBER);
this.setValue(localAttr, "maxLength",                          this.getSingle(tmp.image));
            break;
            }
          case RULE:{
            jj_consume_token(RULE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.appendValue(localAttr, "rules",                           this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.appendValue(localAttr, "rules",                           this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[25] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case DIMENSION:{
            jj_consume_token(DIMENSION);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(localAttr, "dimension",                          this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(localAttr, "dimension",                          this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[26] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case TRIGGER:{
            jj_consume_token(TRIGGER);
trigger = new Trigger(); this.appendValue(localAttr, "triggers", trigger);
            tmp = jj_consume_token(TRIGEVENT);
this.setValue(trigger, "eventType",                            this.getSingle(tmp.image));
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ACTION:{
              jj_consume_token(ACTION);
this.setValue(trigger, "kind",                                 "action");
              break;
              }
            case CHECK:{
              jj_consume_token(CHECK);
this.setValue(trigger, "kind",                                 "check");
              break;
              }
            case OVERRIDE:{
              jj_consume_token(OVERRIDE);
this.setValue(trigger, "kind",                                 "override");
              break;
              }
            default:
              jj_la1[27] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(trigger, "program",                              this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(trigger, "program",                              this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[28] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INPUT:{
              jj_consume_token(INPUT);
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case STRING:{
                tmp = jj_consume_token(STRING);
this.setValue(trigger, "arguments",                            this.getString(tmp.image));
                break;
                }
              case SINGLE:{
                tmp = jj_consume_token(SINGLE);
this.setValue(trigger, "arguments",                            this.getSingle(tmp.image));
                break;
                }
              default:
                jj_la1[29] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
              }
            default:
              jj_la1[30] = jj_gen;
              ;
            }
            break;
            }
          case RANGE_EQUAL:{
            jj_consume_token(RANGE_EQUAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[31] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_GREATERTHAN:{
            jj_consume_token(RANGE_GREATERTHAN);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[32] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_GREATERTHANEQUAL:{
            jj_consume_token(RANGE_GREATERTHANEQUAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[33] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_LESSTHAN:{
            jj_consume_token(RANGE_LESSTHAN);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[34] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_LESSTHANEQUAL:{
            jj_consume_token(RANGE_LESSTHANEQUAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[35] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_NOTEQUAL:{
            jj_consume_token(RANGE_NOTEQUAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[36] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_MATCH:{
            jj_consume_token(RANGE_MATCH);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[37] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_NOTMATCH:{
            jj_consume_token(RANGE_NOTMATCH);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[38] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_SMATCH:{
            jj_consume_token(RANGE_SMATCH);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[39] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_NOTSMATCH:{
            jj_consume_token(RANGE_NOTSMATCH);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[40] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case RANGE_PROGRAM:{
            jj_consume_token(RANGE_PROGRAM);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "program");this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "program");this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
              break;
              }
            default:
              jj_la1[41] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INPUT:{
              jj_consume_token(INPUT);
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case STRING:{
                tmp = jj_consume_token(STRING);
this.setValue(range, "value2", this.getString(tmp.image));
                break;
                }
              case SINGLE:{
                tmp = jj_consume_token(SINGLE);
this.setValue(range, "value2", this.getSingle(tmp.image));
                break;
                }
              default:
                jj_la1[42] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
              }
            default:
              jj_la1[43] = jj_gen;
              ;
            }
            break;
            }
          case RANGE_BETWEEN:{
            jj_consume_token(RANGE_BETWEEN);
range = new Range();this.setValue(range, "type", "between");this.appendValue(localAttr, "rangesStack", range);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BETW1_STRING:{
              tmp = jj_consume_token(BETW1_STRING);
this.setValue(range, "value1", this.getString(tmp.image));
              break;
              }
            case BETW1_SINGLE:{
              tmp = jj_consume_token(BETW1_SINGLE);
this.setValue(range, "value1", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[44] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BETW2_INCLUSIVE:{
              jj_consume_token(BETW2_INCLUSIVE);
this.setValue(range, "include1", true);
              break;
              }
            case BETW2_EXCLUSIVE:{
              jj_consume_token(BETW2_EXCLUSIVE);
this.setValue(range, "include1", false);
              break;
              }
            default:
              jj_la1[45] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BETW3_STRING:{
              tmp = jj_consume_token(BETW3_STRING);
this.setValue(range, "value2", this.getString(tmp.image));
              break;
              }
            case BETW3_SINGLE:{
              tmp = jj_consume_token(BETW3_SINGLE);
this.setValue(range, "value2", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[46] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BETW4_INCLUSIVE:{
              jj_consume_token(BETW4_INCLUSIVE);
this.setValue(range, "include2", true);
              break;
              }
            case BETW4_EXCLUSIVE:{
              jj_consume_token(BETW4_EXCLUSIVE);
this.setValue(range, "include2", false);
              break;
              }
            default:
              jj_la1[47] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case PROPERTY:{
            jj_consume_token(PROPERTY);
property = new AdminProperty(); this.appendValue(this.getValue(localAttr, "properties"), "propertiesStack", property);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "name", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "name", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[48] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            label_4:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case PROPERTYTO:
              case PROPERTYVAL:{
                ;
                break;
                }
              default:
                jj_la1[49] = jj_gen;
                break label_4;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case PROPERTYVAL:{
                jj_consume_token(PROPERTYVAL);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[50] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case PROPERTYTO:{
                jj_consume_token(PROPERTYTO);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ADMINTYPE_STRING:{
                  tmp = jj_consume_token(ADMINTYPE_STRING);
this.setValue(property, "refAdminType", this.getString(tmp.image));
                  break;
                  }
                case ADMINTYPE_SINGLE:{
                  tmp = jj_consume_token(ADMINTYPE_SINGLE);
this.setValue(property, "refAdminType", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[51] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.setValue(property, "refAdminName", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.setValue(property, "refAdminName", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[52] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              default:
                jj_la1[53] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
            }
          default:
            jj_la1[54] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(100);
        break;
        }
      case LOCAL_PATHTYPE:{
        jj_consume_token(LOCAL_PATHTYPE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
localPathType = new LocalPathType(this.getString(tmp.image));this.appendValue(_relationship, "localPathTypes", localPathType);
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
localPathType = new LocalPathType(this.getSingle(tmp.image));this.appendValue(_relationship, "localPathTypes", localPathType);
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(101);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case UUID:
          case SYMBOLICNAME:
          case DESCRIPTION:
          case HIDDEN_TRUE:
          case HIDDEN_FALSE:
          case FROM:
          case TO:
          case GLOBAL_ATTRIBUTE:
          case LOCAL_ATTRIBUTE:
          case PROPERTY:{
            ;
            break;
            }
          default:
            jj_la1[56] = jj_gen;
            break label_5;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case UUID:{
            jj_consume_token(UUID);
property = new AdminProperty();
                                                                                                 this.appendValue(this.getValue(localPathType, "properties"), "propertiesStack", property);
                                                                                                 this.setValue(property, "name",  "UUID");
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[57] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case SYMBOLICNAME:{
            jj_consume_token(SYMBOLICNAME);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.appendValue(localPathType, "symbolicNames", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.appendValue(localPathType, "symbolicNames", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[58] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case DESCRIPTION:{
            jj_consume_token(DESCRIPTION);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case MULTILINESTRING:{
              tmp = jj_consume_token(MULTILINESTRING);
this.setValue(localPathType, "description", this.getString(tmp.image));
              break;
              }
            case MULTILINESINGLE:{
              tmp = jj_consume_token(MULTILINESINGLE);
this.setValue(localPathType, "description", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[59] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case HIDDEN_TRUE:{
            jj_consume_token(HIDDEN_TRUE);
this.setValue(localPathType, "hidden", true);
            break;
            }
          case HIDDEN_FALSE:{
            jj_consume_token(HIDDEN_FALSE);
this.setValue(localPathType, "hidden", false);
            break;
            }
          case FROM:{
            jj_consume_token(FROM);
            label_6:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case CARDINALITY_ONE:
              case CARDINALITY_MANY:
              case TYPE_ALL:
              case TYPE:
              case RELATIONSHIP_ALL:
              case RELATIONSHIP:{
                ;
                break;
                }
              default:
                jj_la1[60] = jj_gen;
                break label_6;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case CARDINALITY_ONE:{
                jj_consume_token(CARDINALITY_ONE);
this.setValue(localPathType, "fromCardinality", PathType_mxJPO.Cardinality.One);
                break;
                }
              case CARDINALITY_MANY:{
                jj_consume_token(CARDINALITY_MANY);
this.setValue(localPathType, "fromCardinality", PathType_mxJPO.Cardinality.Many);
                break;
                }
              case TYPE:{
                jj_consume_token(TYPE);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.appendValue(localPathType, "fromTypes", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.appendValue(localPathType, "fromTypes", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[61] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case TYPE_ALL:{
                jj_consume_token(TYPE_ALL);
this.setValue(localPathType, "fromTypeAll", true);
                break;
                }
              case RELATIONSHIP:{
                jj_consume_token(RELATIONSHIP);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.appendValue(localPathType, "fromRelations", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.appendValue(localPathType, "fromRelations", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[62] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case RELATIONSHIP_ALL:{
                jj_consume_token(RELATIONSHIP_ALL);
this.setValue(localPathType, "fromRelationAll", true);
                break;
                }
              default:
                jj_la1[63] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(100);
            break;
            }
          case TO:{
            jj_consume_token(TO);
            label_7:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case TYPE_ALL:
              case TYPE:
              case RELATIONSHIP_ALL:
              case RELATIONSHIP:{
                ;
                break;
                }
              default:
                jj_la1[64] = jj_gen;
                break label_7;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case TYPE:{
                jj_consume_token(TYPE);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.appendValue(localPathType, "toTypes", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.appendValue(localPathType, "toTypes", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[65] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case TYPE_ALL:{
                jj_consume_token(TYPE_ALL);
this.setValue(localPathType, "toTypeAll", true);
                break;
                }
              case RELATIONSHIP:{
                jj_consume_token(RELATIONSHIP);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.appendValue(localPathType, "toRelations", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.appendValue(localPathType, "toRelations", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[66] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case RELATIONSHIP_ALL:{
                jj_consume_token(RELATIONSHIP_ALL);
this.setValue(localPathType, "toRelationAll", true);
                break;
                }
              default:
                jj_la1[67] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(100);
            break;
            }
          case GLOBAL_ATTRIBUTE:{
            jj_consume_token(GLOBAL_ATTRIBUTE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.appendValue(localPathType, "globalAttributes", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.appendValue(localPathType, "globalAttributes", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[68] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case LOCAL_ATTRIBUTE:{
            jj_consume_token(LOCAL_ATTRIBUTE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
localAttr = new LocalAttribute(this.getString(tmp.image));this.appendValue(localPathType, "localAttributes", localAttr);
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
localAttr = new LocalAttribute(this.getSingle(tmp.image));this.appendValue(localPathType, "localAttributes", localAttr);
              break;
              }
            default:
              jj_la1[69] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(101);
            label_8:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case UUID:
              case SYMBOLICNAME:
              case DESCRIPTION:
              case HIDDEN_TRUE:
              case HIDDEN_FALSE:
              case RULE:
              case KIND:
              case TRIGGER:
              case DEFAULTVALUE:
              case MULTIVALUE_TRUE:
              case MULTIVALUE_FALSE:
              case RESETONCLONE_TRUE:
              case RESETONCLONE_FALSE:
              case RESETONREVISION_TRUE:
              case RESETONREVISION_FALSE:
              case RANGEVALUE_TRUE:
              case RANGEVALUE_FALSE:
              case MULTILINE_TRUE:
              case MULTILINE_FALSE:
              case DIMENSION:
              case MAXLENGTH:
              case RANGE_EQUAL:
              case RANGE_GREATERTHAN:
              case RANGE_GREATERTHANEQUAL:
              case RANGE_LESSTHAN:
              case RANGE_LESSTHANEQUAL:
              case RANGE_NOTEQUAL:
              case RANGE_MATCH:
              case RANGE_NOTMATCH:
              case RANGE_SMATCH:
              case RANGE_NOTSMATCH:
              case RANGE_PROGRAM:
              case RANGE_BETWEEN:
              case PROPERTY:{
                ;
                break;
                }
              default:
                jj_la1[70] = jj_gen;
                break label_8;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case KIND:{
                jj_consume_token(KIND);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case KIND_BINARY:{
                  jj_consume_token(KIND_BINARY);
this.setValue(localAttr, "kind",             AttributeCI_mxJPO.Kind.Binary);
                  break;
                  }
                case KIND_BOOLEAN:{
                  jj_consume_token(KIND_BOOLEAN);
this.setValue(localAttr, "kind",             AttributeCI_mxJPO.Kind.Boolean);
                  break;
                  }
                case KIND_DATE:{
                  jj_consume_token(KIND_DATE);
this.setValue(localAttr, "kind",             AttributeCI_mxJPO.Kind.Date);
                  break;
                  }
                case KIND_INTEGER:{
                  jj_consume_token(KIND_INTEGER);
this.setValue(localAttr, "kind",             AttributeCI_mxJPO.Kind.Integer);
                  break;
                  }
                case KIND_REAL:{
                  jj_consume_token(KIND_REAL);
this.setValue(localAttr, "kind",             AttributeCI_mxJPO.Kind.Real);
                  break;
                  }
                case KIND_STRING:{
                  jj_consume_token(KIND_STRING);
this.setValue(localAttr, "kind",             AttributeCI_mxJPO.Kind.String);
                  break;
                  }
                default:
                  jj_la1[71] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case UUID:{
                jj_consume_token(UUID);
property = new AdminProperty();
                                                                                                 this.appendValue(this.getValue(localAttr, "properties"), "propertiesStack", property);
                                                                                                 this.setValue(property, "name",  "UUID");
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[72] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case SYMBOLICNAME:{
                jj_consume_token(SYMBOLICNAME);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.appendValue(localAttr, "symbolicNames", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.appendValue(localAttr, "symbolicNames", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[73] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case DESCRIPTION:{
                jj_consume_token(DESCRIPTION);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case MULTILINESTRING:{
                  tmp = jj_consume_token(MULTILINESTRING);
this.setValue(localAttr, "description",      this.getString(tmp.image));
                  break;
                  }
                case MULTILINESINGLE:{
                  tmp = jj_consume_token(MULTILINESINGLE);
this.setValue(localAttr, "description",      this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[74] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case DEFAULTVALUE:{
                jj_consume_token(DEFAULTVALUE);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case MULTILINESTRING:{
                  tmp = jj_consume_token(MULTILINESTRING);
this.setValue(localAttr, "defaultValue",     this.getString(tmp.image));
                  break;
                  }
                case MULTILINESINGLE:{
                  tmp = jj_consume_token(MULTILINESINGLE);
this.setValue(localAttr, "defaultValue",     this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[75] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case HIDDEN_TRUE:{
                jj_consume_token(HIDDEN_TRUE);
this.setValue(localAttr, "hidden",           true);
                break;
                }
              case HIDDEN_FALSE:{
                jj_consume_token(HIDDEN_FALSE);
this.setValue(localAttr, "hidden",           false);
                break;
                }
              case MULTIVALUE_TRUE:{
                jj_consume_token(MULTIVALUE_TRUE);
this.setValue(localAttr, "multiValue",       true);
                break;
                }
              case MULTIVALUE_FALSE:{
                jj_consume_token(MULTIVALUE_FALSE);
this.setValue(localAttr, "multiValue",       false);
                break;
                }
              case RESETONCLONE_TRUE:{
                jj_consume_token(RESETONCLONE_TRUE);
this.setValue(localAttr, "resetOnClone",     true);
                break;
                }
              case RESETONCLONE_FALSE:{
                jj_consume_token(RESETONCLONE_FALSE);
this.setValue(localAttr, "resetOnClone",     false);
                break;
                }
              case RESETONREVISION_TRUE:{
                jj_consume_token(RESETONREVISION_TRUE);
this.setValue(localAttr, "resetOnRevision",  true);
                break;
                }
              case RESETONREVISION_FALSE:{
                jj_consume_token(RESETONREVISION_FALSE);
this.setValue(localAttr, "resetOnRevision",  false);
                break;
                }
              case RANGEVALUE_TRUE:{
                jj_consume_token(RANGEVALUE_TRUE);
this.setValue(localAttr, "rangeValue",       true);
                break;
                }
              case RANGEVALUE_FALSE:{
                jj_consume_token(RANGEVALUE_FALSE);
this.setValue(localAttr, "rangeValue",       false);
                break;
                }
              case MULTILINE_TRUE:{
                jj_consume_token(MULTILINE_TRUE);
this.setValue(localAttr, "multiline",        true);
                break;
                }
              case MULTILINE_FALSE:{
                jj_consume_token(MULTILINE_FALSE);
this.setValue(localAttr, "multiline",        false);
                break;
                }
              case MAXLENGTH:{
                jj_consume_token(MAXLENGTH);
                tmp = jj_consume_token(MAXLENGTH_NUMBER);
this.setValue(localAttr, "maxLength",        this.getSingle(tmp.image));
                break;
                }
              case RULE:{
                jj_consume_token(RULE);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.appendValue(localAttr, "rules",         this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.appendValue(localAttr, "rules",         this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[76] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case DIMENSION:{
                jj_consume_token(DIMENSION);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.setValue(localAttr, "dimension",        this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.setValue(localAttr, "dimension",        this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[77] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case TRIGGER:{
                jj_consume_token(TRIGGER);
trigger = new Trigger(); this.appendValue(localAttr, "triggers", trigger);
                tmp = jj_consume_token(TRIGEVENT);
this.setValue(trigger, "eventType",          this.getSingle(tmp.image));
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ACTION:{
                  jj_consume_token(ACTION);
this.setValue(trigger, "kind",               "action");
                  break;
                  }
                case CHECK:{
                  jj_consume_token(CHECK);
this.setValue(trigger, "kind",               "check");
                  break;
                  }
                case OVERRIDE:{
                  jj_consume_token(OVERRIDE);
this.setValue(trigger, "kind",               "override");
                  break;
                  }
                default:
                  jj_la1[78] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.setValue(trigger, "program",            this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.setValue(trigger, "program",            this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[79] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case INPUT:{
                  jj_consume_token(INPUT);
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case STRING:{
                    tmp = jj_consume_token(STRING);
this.setValue(trigger, "arguments", this.getString(tmp.image));
                    break;
                    }
                  case SINGLE:{
                    tmp = jj_consume_token(SINGLE);
this.setValue(trigger, "arguments", this.getSingle(tmp.image));
                    break;
                    }
                  default:
                    jj_la1[80] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                  break;
                  }
                default:
                  jj_la1[81] = jj_gen;
                  ;
                }
                break;
                }
              case RANGE_EQUAL:{
                jj_consume_token(RANGE_EQUAL);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                default:
                  jj_la1[82] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case RANGE_GREATERTHAN:{
                jj_consume_token(RANGE_GREATERTHAN);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                default:
                  jj_la1[83] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case RANGE_GREATERTHANEQUAL:{
                jj_consume_token(RANGE_GREATERTHANEQUAL);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                default:
                  jj_la1[84] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case RANGE_LESSTHAN:{
                jj_consume_token(RANGE_LESSTHAN);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                default:
                  jj_la1[85] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case RANGE_LESSTHANEQUAL:{
                jj_consume_token(RANGE_LESSTHANEQUAL);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                default:
                  jj_la1[86] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case RANGE_NOTEQUAL:{
                jj_consume_token(RANGE_NOTEQUAL);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                default:
                  jj_la1[87] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case RANGE_MATCH:{
                jj_consume_token(RANGE_MATCH);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                default:
                  jj_la1[88] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case RANGE_NOTMATCH:{
                jj_consume_token(RANGE_NOTMATCH);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                default:
                  jj_la1[89] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case RANGE_SMATCH:{
                jj_consume_token(RANGE_SMATCH);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                default:
                  jj_la1[90] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case RANGE_NOTSMATCH:{
                jj_consume_token(RANGE_NOTSMATCH);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                default:
                  jj_la1[91] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case RANGE_PROGRAM:{
                jj_consume_token(RANGE_PROGRAM);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
range = new Range();this.setValue(range, "type", "program");this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
range = new Range();this.setValue(range, "type", "program");this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(localAttr, "rangesStack", range);
                  break;
                  }
                default:
                  jj_la1[92] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case INPUT:{
                  jj_consume_token(INPUT);
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case STRING:{
                    tmp = jj_consume_token(STRING);
this.setValue(range, "value2", this.getString(tmp.image));
                    break;
                    }
                  case SINGLE:{
                    tmp = jj_consume_token(SINGLE);
this.setValue(range, "value2", this.getSingle(tmp.image));
                    break;
                    }
                  default:
                    jj_la1[93] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                  break;
                  }
                default:
                  jj_la1[94] = jj_gen;
                  ;
                }
                break;
                }
              case RANGE_BETWEEN:{
                jj_consume_token(RANGE_BETWEEN);
range = new Range();this.setValue(range, "type", "between");this.appendValue(localAttr, "rangesStack", range);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case BETW1_STRING:{
                  tmp = jj_consume_token(BETW1_STRING);
this.setValue(range, "value1", this.getString(tmp.image));
                  break;
                  }
                case BETW1_SINGLE:{
                  tmp = jj_consume_token(BETW1_SINGLE);
this.setValue(range, "value1", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[95] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case BETW2_INCLUSIVE:{
                  jj_consume_token(BETW2_INCLUSIVE);
this.setValue(range, "include1", true);
                  break;
                  }
                case BETW2_EXCLUSIVE:{
                  jj_consume_token(BETW2_EXCLUSIVE);
this.setValue(range, "include1", false);
                  break;
                  }
                default:
                  jj_la1[96] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case BETW3_STRING:{
                  tmp = jj_consume_token(BETW3_STRING);
this.setValue(range, "value2", this.getString(tmp.image));
                  break;
                  }
                case BETW3_SINGLE:{
                  tmp = jj_consume_token(BETW3_SINGLE);
this.setValue(range, "value2", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[97] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case BETW4_INCLUSIVE:{
                  jj_consume_token(BETW4_INCLUSIVE);
this.setValue(range, "include2", true);
                  break;
                  }
                case BETW4_EXCLUSIVE:{
                  jj_consume_token(BETW4_EXCLUSIVE);
this.setValue(range, "include2", false);
                  break;
                  }
                default:
                  jj_la1[98] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case PROPERTY:{
                jj_consume_token(PROPERTY);
property = new AdminProperty(); this.appendValue(this.getValue(localAttr, "properties"), "propertiesStack", property);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.setValue(property, "name", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.setValue(property, "name", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[99] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                label_9:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case PROPERTYTO:
                  case PROPERTYVAL:{
                    ;
                    break;
                    }
                  default:
                    jj_la1[100] = jj_gen;
                    break label_9;
                  }
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case PROPERTYVAL:{
                    jj_consume_token(PROPERTYVAL);
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case STRING:{
                      tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
                      break;
                      }
                    case SINGLE:{
                      tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
                      break;
                      }
                    default:
                      jj_la1[101] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                    break;
                    }
                  case PROPERTYTO:{
                    jj_consume_token(PROPERTYTO);
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case ADMINTYPE_STRING:{
                      tmp = jj_consume_token(ADMINTYPE_STRING);
this.setValue(property, "refAdminType", this.getString(tmp.image));
                      break;
                      }
                    case ADMINTYPE_SINGLE:{
                      tmp = jj_consume_token(ADMINTYPE_SINGLE);
this.setValue(property, "refAdminType", this.getSingle(tmp.image));
                      break;
                      }
                    default:
                      jj_la1[102] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case STRING:{
                      tmp = jj_consume_token(STRING);
this.setValue(property, "refAdminName", this.getString(tmp.image));
                      break;
                      }
                    case SINGLE:{
                      tmp = jj_consume_token(SINGLE);
this.setValue(property, "refAdminName", this.getSingle(tmp.image));
                      break;
                      }
                    default:
                      jj_la1[103] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                    break;
                    }
                  default:
                    jj_la1[104] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
                break;
                }
              default:
                jj_la1[105] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(100);
            break;
            }
          case PROPERTY:{
            jj_consume_token(PROPERTY);
property = new AdminProperty(); this.appendValue(this.getValue(localPathType, "properties"), "propertiesStack", property);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "name", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "name", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[106] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            label_10:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case PROPERTYTO:
              case PROPERTYVAL:{
                ;
                break;
                }
              default:
                jj_la1[107] = jj_gen;
                break label_10;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case PROPERTYVAL:{
                jj_consume_token(PROPERTYVAL);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[108] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case PROPERTYTO:{
                jj_consume_token(PROPERTYTO);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case ADMINTYPE_STRING:{
                  tmp = jj_consume_token(ADMINTYPE_STRING);
this.setValue(property, "refAdminType", this.getString(tmp.image));
                  break;
                  }
                case ADMINTYPE_SINGLE:{
                  tmp = jj_consume_token(ADMINTYPE_SINGLE);
this.setValue(property, "refAdminType", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[109] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case STRING:{
                  tmp = jj_consume_token(STRING);
this.setValue(property, "refAdminName", this.getString(tmp.image));
                  break;
                  }
                case SINGLE:{
                  tmp = jj_consume_token(SINGLE);
this.setValue(property, "refAdminName", this.getSingle(tmp.image));
                  break;
                  }
                default:
                  jj_la1[110] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              default:
                jj_la1[111] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
            }
          default:
            jj_la1[112] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(100);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
property = new AdminProperty();this.appendValue(_relationship, "properties", "propertiesStack", property);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(property, "name", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(property, "name", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[113] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYTO:
          case PROPERTYVAL:{
            ;
            break;
            }
          default:
            jj_la1[114] = jj_gen;
            break label_11;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYVAL:{
            jj_consume_token(PROPERTYVAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[115] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case PROPERTYTO:{
            jj_consume_token(PROPERTYTO);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ADMINTYPE_STRING:{
              tmp = jj_consume_token(ADMINTYPE_STRING);
this.setValue(property, "refAdminType", this.getString(tmp.image));
              break;
              }
            case ADMINTYPE_SINGLE:{
              tmp = jj_consume_token(ADMINTYPE_SINGLE);
this.setValue(property, "refAdminType", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[116] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "refAdminName", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "refAdminName", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[117] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[118] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /** Generated Token Manager. */
  public RelationshipParserTokenManager_mxJPO token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[120];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2010ffe0,0x30000,0x30000,0xc0000,0x600000,0x30000,0x30000,0x0,0x30000,0x30000,0x40000000,0x0,0x0,0x30000,0x30000,0x30000,0x0,0x30000,0x30000,0x201098e0,0x1f800000,0x30000,0x30000,0xc0000,0xc0000,0x30000,0x30000,0x0,0x30000,0x30000,0x40000000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x40000000,0x0,0x0,0x0,0x0,0x30000,0x0,0x30000,0x0,0x30000,0x0,0x201098e0,0x30000,0x18e0,0x30000,0x30000,0xc0000,0x0,0x30000,0x30000,0x0,0x0,0x30000,0x30000,0x0,0x30000,0x30000,0x201098e0,0x1f800000,0x30000,0x30000,0xc0000,0xc0000,0x30000,0x30000,0x0,0x30000,0x30000,0x40000000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x40000000,0x0,0x0,0x0,0x0,0x30000,0x0,0x30000,0x0,0x30000,0x0,0x201098e0,0x30000,0x0,0x30000,0x0,0x30000,0x0,0x18e0,0x30000,0x0,0x30000,0x0,0x30000,0x0,0x2010ffe0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xc00018,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x18,0x3fffe0,0x0,0x0,0x0,0x3fffe0,0x0,0x0,0xff000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff000000,0x0,0xc00018,0x0,0x0,0x0,0x3f0000,0x0,0x0,0x3f0000,0x3c0000,0x0,0x0,0x3c0000,0x0,0x0,0xff000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff000000,0x0,0x0,0x0,0x0,0x0,0x0,0xc00018,0x0,0x0,0x0,0x0,0x0,0x0,0xc00018,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8003ffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000,0xc00000,0x3000000,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x8003ffdf,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8003ffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000,0xc00000,0x3000000,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x8003ffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0xc,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0xc,0x0,0x3,0x0,0x0,0x3,0x0,0xc,0x0,0x3,0x0,0x0,0x3,0x0,0xc,0x0,0x3,0x0,};
   }

  /** Constructor with InputStream. */
  public RelationshipParser_mxJPO(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RelationshipParser_mxJPO(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RelationshipParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RelationshipParser_mxJPO(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RelationshipParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new RelationshipParserTokenManager_mxJPO(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RelationshipParser_mxJPO(RelationshipParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RelationshipParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 120; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[102];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 120; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 102; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
