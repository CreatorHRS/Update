/* RelationshipParser.java */
/* Generated By:JavaCC: Do not edit this line. RelationshipParser.java */
package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;

import org.mxupdate.update.datamodel.Relationship_mxJPO.Kind;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Relationship_mxJPO}.
 */
@SuppressWarnings("unused")
class RelationshipParser_mxJPO
    extends AbstractParser_mxJPO implements RelationshipParserConstants_mxJPO {

/**************************************************************************** */
/**
 * Parses one complete relationship definition.
 *
 * @param _relationship target relationship to update with parsed values
 */
  final public void parse(final Relationship_mxJPO _relationship) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {Token tmp;
    AdminProperty property;
    Trigger trigger;
    String fromTo;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOLICNAME:
      case DESCRIPTION:
      case ABSTRACT_TRUE:
      case ABSTRACT_FALSE:
      case DERIVED:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case PREVENTDUPLICATES_TRUE:
      case PREVENTDUPLICATES_FALSE:
      case ATTRIBUTE:
      case RULE:
      case KIND:
      case TRIGGER:
      case START_FROM:
      case START_TO:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.appendValue(_relationship, "symbolicNames", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.appendValue(_relationship, "symbolicNames", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTILINESTRING:{
          tmp = jj_consume_token(MULTILINESTRING);
this.setValue(_relationship, "description",                    this.getString(tmp.image));
          break;
          }
        case MULTILINESINGLE:{
          tmp = jj_consume_token(MULTILINESINGLE);
this.setValue(_relationship, "description",                    this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case KIND:{
        jj_consume_token(KIND);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BASIC:{
          jj_consume_token(BASIC);
this.setValue(_relationship, "kind",                           Kind.Basic);
          break;
          }
        case COMPOSITIONAL:{
          jj_consume_token(COMPOSITIONAL);
this.setValue(_relationship, "kind",                           Kind.Compositional);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ABSTRACT_TRUE:{
        jj_consume_token(ABSTRACT_TRUE);
this.setValue(_relationship, "abstractFlag",                   true);
        break;
        }
      case ABSTRACT_FALSE:{
        jj_consume_token(ABSTRACT_FALSE);
this.setValue(_relationship, "abstractFlag",                   false);
        break;
        }
      case DERIVED:{
        jj_consume_token(DERIVED);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(_relationship, "derived",                        this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(_relationship, "derived",                        this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_relationship, "hidden",                         true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_relationship, "hidden",                         false);
        break;
        }
      case PREVENTDUPLICATES_TRUE:{
        jj_consume_token(PREVENTDUPLICATES_TRUE);
this.setValue(_relationship, "preventDuplicates",              true);
        break;
        }
      case PREVENTDUPLICATES_FALSE:{
        jj_consume_token(PREVENTDUPLICATES_FALSE);
this.setValue(_relationship, "preventDuplicates",              false);
        break;
        }
      case RULE:{
        jj_consume_token(RULE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(_relationship, "rule",                           this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(_relationship, "rule",                           this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case TRIGGER:{
        jj_consume_token(TRIGGER);
trigger = new Trigger();this.appendValue(_relationship, "triggers", "triggersStack", trigger);
        tmp = jj_consume_token(TRIGEVENT);
this.setValue(trigger, "eventType",                            this.getSingle(tmp.image));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ACTION:{
          jj_consume_token(ACTION);
this.setValue(trigger, "kind",                                 "action");
          break;
          }
        case CHECK:{
          jj_consume_token(CHECK);
this.setValue(trigger, "kind",                                 "check");
          break;
          }
        case OVERRIDE:{
          jj_consume_token(OVERRIDE);
this.setValue(trigger, "kind",                                 "override");
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(trigger, "program",                              this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(trigger, "program",                              this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INPUT:{
          jj_consume_token(INPUT);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case STRING:{
            tmp = jj_consume_token(STRING);
this.setValue(trigger, "arguments",                            this.getString(tmp.image));
            break;
            }
          case SINGLE:{
            tmp = jj_consume_token(SINGLE);
this.setValue(trigger, "arguments",                            this.getSingle(tmp.image));
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        break;
        }
      case START_FROM:
      case START_TO:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case START_FROM:{
          jj_consume_token(START_FROM);
fromTo = "from";
          break;
          }
        case START_TO:{
          jj_consume_token(START_TO);
fromTo = "to";
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FROMTO_PROPAGATEMODIFY_TRUE:
          case FROMTO_PROPAGATEMODIFY_FALSE:
          case FROMTO_PROPAGATECONNECTION_TRUE:
          case FROMTO_PROPAGATECONNECTION_FALSE:
          case FROMTO_MEANING:
          case FROMTO_REVISION_NONE:
          case FROMTO_REVISION_FLOAT:
          case FROMTO_REVISION_REPLICATE:
          case FROMTO_CLONE_NONE:
          case FROMTO_CLONE_FLOAT:
          case FROMTO_CLONE_REPLICATE:
          case FROMTO_CARDINALITY_ONE:
          case FROMTO_CARDINALITY_MANY:
          case FROMTO_TYPE_ALL:
          case FROMTO_TYPE:
          case FROMTO_RELATIONSHIP_ALL:
          case FROMTO_RELATIONSHIP:{
            ;
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FROMTO_PROPAGATEMODIFY_TRUE:{
            jj_consume_token(FROMTO_PROPAGATEMODIFY_TRUE);
this.setValue(_relationship, fromTo, "propagateModify",        true);
            break;
            }
          case FROMTO_PROPAGATEMODIFY_FALSE:{
            jj_consume_token(FROMTO_PROPAGATEMODIFY_FALSE);
this.setValue(_relationship, fromTo, "propagateModify",        false);
            break;
            }
          case FROMTO_PROPAGATECONNECTION_TRUE:{
            jj_consume_token(FROMTO_PROPAGATECONNECTION_TRUE);
this.setValue(_relationship, fromTo, "propagateConnection",    true);
            break;
            }
          case FROMTO_PROPAGATECONNECTION_FALSE:{
            jj_consume_token(FROMTO_PROPAGATECONNECTION_FALSE);
this.setValue(_relationship, fromTo, "propagateConnection",    false);
            break;
            }
          case FROMTO_MEANING:{
            jj_consume_token(FROMTO_MEANING);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FROMTO_STRING:{
              tmp = jj_consume_token(FROMTO_STRING);
this.setValue(_relationship, fromTo, "meaning",                this.getString(tmp.image));
              break;
              }
            case FROMTO_SINGLE:{
              tmp = jj_consume_token(FROMTO_SINGLE);
this.setValue(_relationship, fromTo, "meaning",                this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[12] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case FROMTO_REVISION_NONE:{
            jj_consume_token(FROMTO_REVISION_NONE);
this.setValue(_relationship, fromTo, "revisionAction",         "none");
            break;
            }
          case FROMTO_REVISION_FLOAT:{
            jj_consume_token(FROMTO_REVISION_FLOAT);
this.setValue(_relationship, fromTo, "revisionAction",         "float");
            break;
            }
          case FROMTO_REVISION_REPLICATE:{
            jj_consume_token(FROMTO_REVISION_REPLICATE);
this.setValue(_relationship, fromTo, "revisionAction",         "replicate");
            break;
            }
          case FROMTO_CLONE_NONE:{
            jj_consume_token(FROMTO_CLONE_NONE);
this.setValue(_relationship, fromTo, "cloneAction",            "none");
            break;
            }
          case FROMTO_CLONE_FLOAT:{
            jj_consume_token(FROMTO_CLONE_FLOAT);
this.setValue(_relationship, fromTo, "cloneAction",            "float");
            break;
            }
          case FROMTO_CLONE_REPLICATE:{
            jj_consume_token(FROMTO_CLONE_REPLICATE);
this.setValue(_relationship, fromTo, "cloneAction",            "replicate");
            break;
            }
          case FROMTO_CARDINALITY_ONE:{
            jj_consume_token(FROMTO_CARDINALITY_ONE);
this.setValue(_relationship, fromTo, "cardinality",            "one");
            break;
            }
          case FROMTO_CARDINALITY_MANY:{
            jj_consume_token(FROMTO_CARDINALITY_MANY);
this.setValue(_relationship, fromTo, "cardinality",            "many");
            break;
            }
          case FROMTO_TYPE:{
            jj_consume_token(FROMTO_TYPE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FROMTO_STRING:{
              tmp = jj_consume_token(FROMTO_STRING);
this.appendValue(_relationship, fromTo, "types",               this.getString(tmp.image));
              break;
              }
            case FROMTO_SINGLE:{
              tmp = jj_consume_token(FROMTO_SINGLE);
this.appendValue(_relationship, fromTo, "types",               this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case FROMTO_TYPE_ALL:{
            jj_consume_token(FROMTO_TYPE_ALL);
this.setValue(_relationship, fromTo, "typeAll",                true);
            break;
            }
          case FROMTO_RELATIONSHIP:{
            jj_consume_token(FROMTO_RELATIONSHIP);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FROMTO_STRING:{
              tmp = jj_consume_token(FROMTO_STRING);
this.appendValue(_relationship, fromTo, "relations",           this.getString(tmp.image));
              break;
              }
            case FROMTO_SINGLE:{
              tmp = jj_consume_token(FROMTO_SINGLE);
this.appendValue(_relationship, fromTo, "relations",           this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case FROMTO_RELATIONSHIP_ALL:{
            jj_consume_token(FROMTO_RELATIONSHIP_ALL);
this.setValue(_relationship, fromTo, "relationAll",            true);
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(FROMTO_END);
        break;
        }
      case ATTRIBUTE:{
        jj_consume_token(ATTRIBUTE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.appendValue(_relationship, "attributes",                  this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.appendValue(_relationship, "attributes",                  this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
property = new AdminProperty();this.appendValue(_relationship, "properties", "propertiesStack", property);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(property, "name", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(property, "name", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYTO:
          case PROPERTYVAL:{
            ;
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            break label_3;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYVAL:{
            jj_consume_token(PROPERTYVAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[19] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case PROPERTYTO:{
            jj_consume_token(PROPERTYTO);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ADMINTYPE_STRING:{
              tmp = jj_consume_token(ADMINTYPE_STRING);
this.setValue(property, "refAdminType", this.getString(tmp.image));
              break;
              }
            case ADMINTYPE_SINGLE:{
              tmp = jj_consume_token(ADMINTYPE_SINGLE);
this.setValue(property, "refAdminType", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[20] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "refAdminName", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "refAdminName", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[21] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /** Generated Token Manager. */
  public RelationshipParserTokenManager_mxJPO token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6090ffe0,0x30000,0xc0000,0x600000,0x30000,0x30000,0x1c000000,0x30000,0x30000,0x1000000,0x60000000,0x80000000,0x0,0x0,0x0,0x80000000,0x30000,0x30000,0x0,0x30000,0x0,0x30000,0x0,0x6090ffe0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffff,0x60000,0x60000,0x60000,0xffff,0x0,0x0,0x300000,0x0,0xc00000,0x0,0x300000,0x80000,};
   }

  /** Constructor with InputStream. */
  public RelationshipParser_mxJPO(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RelationshipParser_mxJPO(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RelationshipParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RelationshipParser_mxJPO(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RelationshipParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new RelationshipParserTokenManager_mxJPO(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RelationshipParser_mxJPO(RelationshipParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RelationshipParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
