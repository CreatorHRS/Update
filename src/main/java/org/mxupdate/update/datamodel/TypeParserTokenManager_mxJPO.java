/* TypeParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TypeParserTokenManager.java */
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.datamodel;
import java.lang.reflect.InvocationTargetException;
import org.mxupdate.update.datamodel.AttributeCI_mxJPO;
import org.mxupdate.update.datamodel.AttributeCI_mxJPO.Range;
import org.mxupdate.update.datamodel.PathType_mxJPO.Cardinality;
import org.mxupdate.update.datamodel.Type_mxJPO;
import org.mxupdate.update.datamodel.helper.LocalAttributeList_mxJPO.LocalAttribute;
import org.mxupdate.update.datamodel.helper.LocalPathTypeList_mxJPO.LocalPathType;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/** Token Manager. */
@SuppressWarnings("unused")class TypeParserTokenManager_mxJPO implements TypeParserConstants_mxJPO {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_7(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0){
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_7(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_7(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     { jjCheckNAdd(3); }
                  }
                  else if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0){
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa1_5(0x4000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_5(0x2000000000000000L);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_5(active0, 0x2000000000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(0, active0);
}
private int jjMoveStringLiteralDfa2_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_5(active0, 0x6000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(1, active0);
}
private int jjMoveStringLiteralDfa3_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa4_5(active0, 0x6000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(2, active0);
}
private int jjMoveStringLiteralDfa4_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa5_5(active0, 0x6000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(3, active0);
}
private int jjMoveStringLiteralDfa5_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa6_5(active0, 0x6000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(4, active0);
}
private int jjMoveStringLiteralDfa6_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa7_5(active0, 0x6000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(5, active0);
}
private int jjMoveStringLiteralDfa7_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa8_5(active0, 0x6000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(6, active0);
}
private int jjMoveStringLiteralDfa8_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(8, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(8, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_5(7, active0);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0){
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_8(){
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa1_8(0xd00000L);
      case 99:
         return jjMoveStringLiteralDfa1_8(0x200000L);
      case 100:
         return jjMoveStringLiteralDfa1_8(0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa1_8(0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa1_8(0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa1_8(0x8000000L);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_8(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_8(active0, 0x1100000L);
      case 101:
         return jjMoveStringLiteralDfa2_8(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa2_8(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa2_8(active0, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa2_8(active0, 0xa00000L);
      case 116:
         return jjMoveStringLiteralDfa2_8(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_8(0, active0);
}
private int jjMoveStringLiteralDfa2_8(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_8(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_8(active0, 0x4000000L);
      case 109:
         return jjMoveStringLiteralDfa3_8(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa3_8(active0, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa3_8(active0, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa3_8(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa3_8(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa3_8(active0, 0x3000000L);
      default :
         break;
   }
   return jjStartNfa_8(1, active0);
}
private int jjMoveStringLiteralDfa3_8(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_8(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_8(active0, 0x400000L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 24);
         return jjMoveStringLiteralDfa4_8(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa4_8(active0, 0x8100000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 26);
         return jjMoveStringLiteralDfa4_8(active0, 0x800000L);
      case 112:
         return jjMoveStringLiteralDfa4_8(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_8(2, active0);
}
private int jjMoveStringLiteralDfa4_8(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_8(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(4, 20);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_8(active0, 0x800000L);
      case 103:
         return jjMoveStringLiteralDfa5_8(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa5_8(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa5_8(active0, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa5_8(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_8(3, active0);
}
private int jjMoveStringLiteralDfa5_8(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_8(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_8(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa6_8(active0, 0x2000000L);
      case 103:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(5, 27);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_8(active0, 0x200000L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_8(4, active0);
}
private int jjMoveStringLiteralDfa6_8(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_8(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_8(active0, 0x200000L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(6, 23);
         break;
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_8(5, active0);
}
private int jjMoveStringLiteralDfa7_8(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_8(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(7, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_8(6, active0);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_1(0x20000L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x40000L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0x80000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa2_1(active1, 0x20000L);
      case 104:
         return jjMoveStringLiteralDfa2_1(active1, 0x40000L);
      case 118:
         return jjMoveStringLiteralDfa2_1(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_1(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa3_1(active1, 0xc0000L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_1(active1, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active1, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa4_1(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_1(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 107:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(4, 82);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_1(active1, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_1(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_1(active1, 0x80000L);
      case 110:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(5, 81);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa7_1(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_1(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(7, 83);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, 0L, active1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 87)
                     kind = 87;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x22a00000000L) != 0L || (active1 & 0x2000L) != 0L)
            return 43;
         if ((active1 & 0x204800L) != 0L)
            return 162;
         return -1;
      case 1:
         if ((active1 & 0x200000L) != 0L)
            return 163;
         if ((active1 & 0x800L) != 0L)
            return 170;
         if ((active0 & 0xa00000000L) != 0L || (active1 & 0x2000L) != 0L)
            return 159;
         if ((active0 & 0x2000000000L) != 0L)
            return 42;
         return -1;
      case 2:
         if ((active1 & 0x2000L) != 0L)
            return 158;
         if ((active0 & 0x2000000000L) != 0L)
            return 41;
         if ((active1 & 0x800L) != 0L)
            return 165;
         return -1;
      case 3:
         if ((active1 & 0x800L) != 0L)
            return 166;
         if ((active0 & 0x2000000000L) != 0L)
            return 38;
         if ((active1 & 0x2000L) != 0L)
            return 157;
         return -1;
      case 4:
         if ((active1 & 0x2000L) != 0L)
            return 156;
         if ((active0 & 0x2000000000L) != 0L)
            return 202;
         return -1;
      case 5:
         if ((active1 & 0x2000L) != 0L)
            return 155;
         return -1;
      case 6:
         if ((active1 & 0x2000L) != 0L)
            return 154;
         return -1;
      case 7:
         if ((active1 & 0x2000L) != 0L)
            return 153;
         return -1;
      case 8:
         if ((active1 & 0x2000L) != 0L)
            return 152;
         return -1;
      case 9:
         if ((active1 & 0x2000L) != 0L)
            return 151;
         return -1;
      case 10:
         if ((active1 & 0x2000L) != 0L)
            return 146;
         return -1;
      case 11:
         if ((active1 & 0x2000L) != 0L)
            return 147;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0, long active1){
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_11(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_11(0x15500002400L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_11(0x10000200L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_11(0x40040000900L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_11(0x1000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_11(0x0L, 0x8000L);
      case 107:
         return jjMoveStringLiteralDfa1_11(0x80000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_11(0x88080004000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_11(0x20L, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa1_11(0x22a00000000L, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa1_11(0x80L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_11(0x0L, 0x204800L);
      case 117:
         return jjMoveStringLiteralDfa1_11(0x40L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_11(0x0L, 0x400000L);
      case 123:
         return jjStopAtPos(0, 89);
      case 125:
         return jjStopAtPos(0, 90);
      default :
         return jjMoveNfa_11(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_11(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_11(active0, 0x82000000420L, active1, 0x400000L);
      case 98:
         return jjMoveStringLiteralDfa2_11(active0, 0x200L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_11(active0, 0xa40004900L, active1, 0x2000L);
      case 104:
         return jjMoveStringLiteralDfa2_11(active0, 0x2000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_11(active0, 0x40000081000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_11(active0, 0x10100000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_11(active0, 0L, active1, 0x8000L);
      case 111:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_11(1, 85, 163);
         break;
      case 114:
         return jjMoveStringLiteralDfa2_11(active0, 0x5400000000L, active1, 0x104000L);
      case 116:
         return jjMoveStringLiteralDfa2_11(active0, 0x10000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_11(active0, 0x28080000040L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_11(active0, 0x80L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_11(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_11(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_11(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_11(active0, 0x4000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_11(active0, 0x400L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_11(active0, 0x20L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_11(active0, 0x1000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_11(active0, 0x1400000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_11(active0, 0x40000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_11(active0, 0x2040L, active1, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa3_11(active0, 0x28080000000L, active1, 0x402000L);
      case 109:
         return jjMoveStringLiteralDfa3_11(active0, 0x40000000080L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_11(active0, 0x2000080000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_11(active0, 0L, active1, 0x100000L);
      case 112:
         return jjMoveStringLiteralDfa3_11(active0, 0L, active1, 0x8800L);
      case 114:
         return jjMoveStringLiteralDfa3_11(active0, 0x800L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_11(active0, 0xa00000300L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_11(active0, 0x10004000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_11(active0, 0x10100000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_11(active0, 0x80000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_11(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_11(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_11(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_11(active0, 0x40000000L, active1, 0x2000L);
      case 98:
         return jjMoveStringLiteralDfa4_11(active0, 0x80L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_11(active0, 0x100L, active1, 0L);
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(3, 6);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(3, 19);
         return jjMoveStringLiteralDfa4_11(active0, 0x3000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(3, 41);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_11(3, 75, 166);
         return jjMoveStringLiteralDfa4_11(active0, 0x40a00000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_11(active0, 0x2000000000L, active1, 0x4000L);
      case 104:
         return jjMoveStringLiteralDfa4_11(active0, 0x4000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_11(active0, 0x800L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_11(active0, 0x20L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_11(active0, 0x90100000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_11(active0, 0x4000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_11(active0, 0L, active1, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa4_11(active0, 0x10000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_11(active0, 0x1400000400L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_11(active0, 0x8080000200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_11(active0, 0L, active1, 0x408000L);
      default :
         break;
   }
   return jjStartNfa_11(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_11(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_11(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_11(active0, 0x20L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_11(active0, 0x2000L, active1, 0L);
      case 101:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(4, 86);
         return jjMoveStringLiteralDfa5_11(active0, 0x83400001000L, active1, 0x100000L);
      case 103:
         return jjMoveStringLiteralDfa5_11(active0, 0x4000000000L, active1, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa5_11(active0, 0x8090000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_11(active0, 0x40000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_11(active0, 0x4080L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_11(active0, 0x300L, active1, 0L);
      case 116:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(4, 79);
         return jjMoveStringLiteralDfa5_11(active0, 0x10b00000400L, active1, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa5_11(active0, 0x40000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_11(active0, 0x800L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_11(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_11(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_11(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_11(active0, 0x200L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_11(active0, 0x10000000L, active1, 0L);
      case 100:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(5, 14);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_11(active0, 0x4000002800L, active1, 0x4000L);
      case 103:
         return jjMoveStringLiteralDfa6_11(active0, 0x20L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_11(active0, 0x10100000100L, active1, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa6_11(active0, 0x8040000080L, active1, 0L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         return jjMoveStringLiteralDfa6_11(active0, 0x80000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_11(active0, 0xa00000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_11(active0, 0x400L, active1, 0x100000L);
      case 115:
         return jjMoveStringLiteralDfa6_11(active0, 0x40000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_11(active0, 0x1400000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_11(active0, 0x2080000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_11(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_11(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_11(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_11(active0, 0x2080000400L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_11(active0, 0x200L, active1, 0L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         break;
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(6, 5);
         break;
      case 103:
         return jjMoveStringLiteralDfa7_11(active0, 0x80000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_11(active0, 0x48000000080L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_11(active0, 0x10000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(6, 13);
         return jjMoveStringLiteralDfa7_11(active0, 0xa00000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_11(active0, 0x1400000000L, active1, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa7_11(active0, 0x100L, active1, 0L);
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(6, 78);
         break;
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 30);
         return jjMoveStringLiteralDfa7_11(active0, 0L, active1, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa7_11(active0, 0x10000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_11(active0, 0x4100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_11(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_11(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_11(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_11(active0, 0x4100000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_11(active0, 0x200000480L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_11(active0, 0x10000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_11(active0, 0x2080000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_11(active0, 0x9400000000L, active1, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa8_11(active0, 0x40000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_11(active0, 0x800000000L, active1, 0L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(7, 9);
         return jjMoveStringLiteralDfa8_11(active0, 0x80010000100L, active1, 0L);
      case 121:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(7, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_11(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_11(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_11(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_11(active0, 0x400000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(8, 28);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(8, 39);
         return jjMoveStringLiteralDfa9_11(active0, 0x800000000L, active1, 0L);
      case 104:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(8, 43);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_11(active0, 0x100L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_11(active0, 0x4300000000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(8, 42);
         return jjMoveStringLiteralDfa9_11(active0, 0x10000000080L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_11(active0, 0x1000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_11(active0, 0L, active1, 0x2000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(8, 10);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_11(active0, 0x2080000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_11(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_11(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_11(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_11(active0, 0x80L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(9, 31);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(9, 37);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(9, 40);
         return jjMoveStringLiteralDfa10_11(active0, 0x1000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa10_11(active0, 0L, active1, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa10_11(active0, 0x400000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_11(active0, 0x200000100L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_11(active0, 0x4100000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa10_11(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_11(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_11(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_11(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(10, 32);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(10, 38);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_11(active0, 0x800000000L, active1, 0x2000L);
      case 109:
         return jjMoveStringLiteralDfa11_11(active0, 0x80L, active1, 0L);
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(10, 8);
         return jjMoveStringLiteralDfa11_11(active0, 0x200000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_11(active0, 0x400000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa11_11(active0, 0x1000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_11(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_11(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_11(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(11, 7);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(11, 33);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_11(active0, 0x1000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_11(active0, 0x400000000L, active1, 0L);
      case 112:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_11(11, 77, 147);
         break;
      case 115:
         return jjMoveStringLiteralDfa12_11(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_11(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_11(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_11(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(12, 34);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_11(active0, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa13_11(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_11(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_11(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_11(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa14_11(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa14_11(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_11(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_11(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_11(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(14, 35);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_11(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_11(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_11(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_11(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(15, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_11(14, active0, 0L);
}
private int jjStartNfaWithStates_11(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_11(state, pos + 1);
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 202;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 202:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(135, 142); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(123, 130); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(111, 118); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(100, 106); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(89, 95); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(79, 84); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(72, 74); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 67); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(58, 60); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(51, 53); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(39, 40); }
                  break;
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 4:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(9, 10); }
                  break;
               case 11:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(11, 12); }
                  break;
               case 25:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(13, 14); }
                  break;
               case 39:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(39, 40); }
                  break;
               case 40:
                  if (curChar == 61 && kind > 45)
                     kind = 45;
                  break;
               case 45:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  break;
               case 46:
                  if (curChar == 62 && kind > 46)
                     kind = 46;
                  break;
               case 51:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(51, 53); }
                  break;
               case 52:
                  if (curChar == 61 && kind > 47)
                     kind = 47;
                  break;
               case 53:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 58:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(58, 60); }
                  break;
               case 59:
                  if (curChar == 32 && kind > 48)
                     kind = 48;
                  break;
               case 60:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 65:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 67); }
                  break;
               case 66:
                  if (curChar == 61 && kind > 49)
                     kind = 49;
                  break;
               case 67:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 72:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(72, 74); }
                  break;
               case 73:
                  if (curChar == 61 && kind > 50)
                     kind = 50;
                  break;
               case 74:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 79:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(79, 84); }
                  break;
               case 89:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(89, 95); }
                  break;
               case 95:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 100:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(100, 106); }
                  break;
               case 111:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(111, 118); }
                  break;
               case 118:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 123:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(123, 130); }
                  break;
               case 135:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(135, 142); }
                  break;
               case 147:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(15, 16); }
                  break;
               case 163:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(17, 18); }
                  break;
               case 166:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(19, 20); }
                  break;
               case 174:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(21, 22); }
                  break;
               case 188:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(23, 24); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 43:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 159;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 144;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 132;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 120;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 108;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 97;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 86;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 76;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 69;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 62;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 55;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 48;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 143;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 131;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 119;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 107;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 96;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 68;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 61;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 54;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 47;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 0:
                  if (curChar == 99)
                     { jjAddStates(25, 26); }
                  else if (curChar == 116)
                     { jjAddStates(27, 28); }
                  else if (curChar == 114)
                     { jjAddStates(29, 41); }
                  else if (curChar == 108)
                     { jjAddStates(42, 43); }
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 135;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 123;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 111;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 100;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 72;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 65;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 45;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 134;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 122;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 110;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 99;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 88;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 78;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 71;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 64;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 57;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 50;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 162:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 170;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 3:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 123 && kind > 70)
                     kind = 70;
                  break;
               case 6:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 108)
                     { jjAddStates(42, 43); }
                  break;
               case 10:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if (curChar == 101 && kind > 29)
                     kind = 29;
                  break;
               case 13:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 22:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 26:
                  if (curChar == 101 && kind > 69)
                     kind = 69;
                  break;
               case 27:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 35:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 114)
                     { jjAddStates(29, 41); }
                  break;
               case 44:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 48:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 54:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 55:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 62:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 69:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 75:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 76:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 80:
                  if (curChar == 104 && kind > 51)
                     kind = 51;
                  break;
               case 81:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 86:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 90:
                  if (curChar == 104 && kind > 52)
                     kind = 52;
                  break;
               case 91:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 96:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 97:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 101:
                  if (curChar == 104 && kind > 53)
                     kind = 53;
                  break;
               case 102:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 108:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 112:
                  if (curChar == 104 && kind > 54)
                     kind = 54;
                  break;
               case 113:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 119:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 120:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 124:
                  if (curChar == 109 && kind > 55)
                     kind = 55;
                  break;
               case 125:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 132:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 136:
                  if (curChar == 110 && kind > 56)
                     kind = 56;
                  break;
               case 137:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 144:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 148:
                  if (curChar == 108 && kind > 76)
                     kind = 76;
                  break;
               case 149:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 152:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 116)
                     { jjAddStates(27, 28); }
                  break;
               case 164:
                  if (curChar == 123 && kind > 71)
                     kind = 71;
                  break;
               case 165:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 167:
                  if (curChar == 108 && kind > 74)
                     kind = 74;
                  break;
               case 168:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 171:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 99)
                     { jjAddStates(25, 26); }
                  break;
               case 173:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 175:
                  if (curChar == 101 && kind > 72)
                     kind = 72;
                  break;
               case 176:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 179:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 189:
                  if (curChar == 121 && kind > 73)
                     kind = 73;
                  break;
               case 190:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 194:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 202 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0){
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_9(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                     { jjCheckNAdd(13); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000600L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 17)
                     kind = 17;
                  break;
               case 13:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 13:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  { jjCheckNAdd(13); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(44, 49); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 11:
                  if (curChar == 110)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 12:
                  if (curChar == 116)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 13:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 18)
                     kind = 18;
                  { jjCheckNAdd(13); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0){
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 63)
                     kind = 63;
                  break;
               case 10:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAdd(10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAdd(10); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(50, 52); }
                  break;
               case 8:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAdd(10); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0){
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_10(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0){
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 57)
                     kind = 57;
                  break;
               case 10:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(10); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(50, 52); }
                  break;
               case 8:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(10); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa1_3(0x10L);
      case 105:
         return jjMoveStringLiteralDfa1_3(0x8L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_3(active1, 0x8L);
      case 120:
         return jjMoveStringLiteralDfa2_3(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_3(active1, 0x18L);
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa4_3(active1, 0x18L);
      default :
         break;
   }
   return jjStartNfa_3(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa5_3(active1, 0x18L);
      default :
         break;
   }
   return jjStartNfa_3(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa6_3(active1, 0x18L);
      default :
         break;
   }
   return jjStartNfa_3(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa7_3(active1, 0x18L);
      default :
         break;
   }
   return jjStartNfa_3(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa8_3(active1, 0x18L);
      default :
         break;
   }
   return jjStartNfa_3(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(8, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(8, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_3(7, 0L, active1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 5, 6, 7, 8, 9, 10, 4, 5, 11, 20, 25, 33, 147, 
   150, 163, 164, 166, 169, 174, 177, 188, 192, 186, 201, 162, 171, 43, 49, 56, 
   63, 70, 77, 87, 98, 109, 121, 133, 145, 160, 23, 36, 7, 8, 9, 10, 
   11, 12, 7, 8, 9, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\160\141\143\153\141\147\145", 
"\165\165\151\144", "\163\171\155\142\157\154\151\143\156\141\155\145", 
"\144\145\163\143\162\151\160\164\151\157\156", "\141\142\163\164\162\141\143\164", "\41\141\142\163\164\162\141\143\164", 
"\144\145\162\151\166\145\144", "\150\151\144\144\145\156", "\41\150\151\144\144\145\156", 
"\155\145\164\150\157\144", null, null, null, null, "\153\151\156\144", "\142\141\163\151\143", 
"\143\157\155\160\157\163\145\144", "\142\151\156\141\162\171", "\142\157\157\154\145\141\156", 
"\144\141\164\145", "\151\156\164\145\147\145\162", "\162\145\141\154", 
"\163\164\162\151\156\147", "\141\164\164\162\151\142\165\164\145", null, "\144\145\146\141\165\154\164", 
"\155\165\154\164\151\166\141\154\165\145", "\41\155\165\154\164\151\166\141\154\165\145", 
"\162\145\163\145\164\157\156\143\154\157\156\145", "\41\162\145\163\145\164\157\156\143\154\157\156\145", 
"\162\145\163\145\164\157\156\162\145\166\151\163\151\157\156", "\41\162\145\163\145\164\157\156\162\145\166\151\163\151\157\156", 
"\162\141\156\147\145\166\141\154\165\145", "\41\162\141\156\147\145\166\141\154\165\145", 
"\155\165\154\164\151\154\151\156\145", "\41\155\165\154\164\151\154\151\156\145", "\162\165\154\145", 
"\144\151\155\145\156\163\151\157\156", "\155\141\170\154\145\156\147\164\150", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, 
"\151\156\143\154\165\163\151\166\145", "\145\170\143\154\165\163\151\166\145", null, null, null, null, 
"\151\156\143\154\165\163\151\166\145", "\145\170\143\154\165\163\151\166\145", null, null, null, null, null, null, 
"\164\171\160\145", null, "\162\145\154\141\164\151\157\156\163\150\151\160", 
"\164\162\151\147\147\145\162", "\151\156\160\165\164", null, "\141\143\164\151\157\156", 
"\143\150\145\143\153", "\157\166\145\162\162\151\144\145", "\160\162\157\160\145\162\164\171", 
"\164\157", "\166\141\154\165\145", null, null, "\173", "\175", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 11;
int defaultLexState = 11;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
     case 10:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
     case 11:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_11();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public TypeParserTokenManager_mxJPO(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public TypeParserTokenManager_mxJPO (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
	
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 202; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {
  
    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 12 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "ADMINREF_EXPECTED",
   "TRIGKIND_EXPECTED",
   "TRIGEVENT_EXPECTED",
   "BETW4_EXPECTED",
   "BETW3_EXPECTED",
   "BETW2_EXPECTED",
   "BETW1_EXPECTED",
   "MAXLENGTH_EXPECTED",
   "KIND_EXPECTED",
   "MULTILINESTRING_EXPECTED",
   "STRING_EXPECTED",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 10, 10, 10, 9, -1, -1, 10, -1, -1, 10, 11, 11, 11, 11, 8, 11, 11, 11, 11, 11, 
   11, 11, 11, 10, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 7, 11, 10, 10, 10, 10, 10, 
   10, 10, 10, 10, 10, 10, 6, 5, 5, -1, -1, 4, 4, 3, 3, -1, -1, 11, 11, 10, -1, -1, -1, -1, -1, 
   10, -1, 10, 2, 10, 1, 10, 10, 10, 10, 0, 10, 10, 10, -1, -1, 
};
static final long[] jjtoToken = {
   0xe7ffffffffffffe1L, 0x7fffff9L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[202];
    private final int[] jjstateSet = new int[2 * 202];

    
    protected int curChar;
}
