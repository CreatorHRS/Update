/* PolicyParser.java */
/* Generated By:JavaCC: Do not edit this line. PolicyParser.java */
package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.datamodel.Policy_mxJPO.Signature;
import org.mxupdate.update.datamodel.Policy_mxJPO.State;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO.Access;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Policy_mxJPO}.
 */
@SuppressWarnings("unused")
class PolicyParser_mxJPO
    extends AbstractParser_mxJPO<Policy_mxJPO> implements PolicyParserConstants_mxJPO {

/**************************************************************************** */

/**
 * Parses one complete policy definition.
 *
 * @param _policy   target policy to update with parsed values
 */
  final public void parse(final Policy_mxJPO _policy) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {Token tmp;
    AdminProperty property;
    Access access = new Access();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOLICNAME:
      case DESCRIPTION:
      case TYPE_ALL:
      case TYPE_LIST:
      case TYPE:
      case FORMAT_ALL:
      case FORMAT_LIST:
      case FORMAT:
      case STORE:
      case DEFAULTFORMAT:
      case ENFORCE_TRUE:
      case ENFORCE_TRUE_VIA_VALUE:
      case ENFORCE_TRUE_VIA_VALUE_APOSTROPHE:
      case ENFORCE_FALSE:
      case ENFORCE_FALSE_VIA_VALUE:
      case ENFORCE_FALSE_VIA_VALUE_APOSTROPHE:
      case SEQUENCE:
      case MINORSEQUENCE:
      case MAJORSEQUENCE:
      case HIDDEN_TRUE:
      case HIDDEN_TRUE_VIA_VALUE:
      case HIDDEN_TRUE_VIA_VALUE_APOSTROPHE:
      case HIDDEN_FALSE:
      case HIDDEN_FALSE_VIA_VALUE:
      case HIDDEN_FALSE_VIA_VALUE_APOSTROPHE:
      case ALLSTATE:
      case STATE:
      case PROPERTY:
      case DELIMITER:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.appendValue(_policy, "symbolicNames",                     this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.appendValue(_policy, "symbolicNames",                     this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTILINESTRING:{
          tmp = jj_consume_token(MULTILINESTRING);
this.setValue(_policy, "description",                          this.getString(tmp.image));
          break;
          }
        case MULTILINESINGLE:{
          tmp = jj_consume_token(MULTILINESINGLE);
this.setValue(_policy, "description",                          this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case FORMAT_ALL:{
        jj_consume_token(FORMAT_ALL);
this.setValue(_policy, "allFormats",                           true);
        break;
        }
      case FORMAT_LIST:{
        jj_consume_token(FORMAT_LIST);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LISTSTRING:
          case LISTSINGLE:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_2;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LISTSTRING:{
            tmp = jj_consume_token(LISTSTRING);
this.appendValue(_policy, "formats",                           this.getString(tmp.image));
            break;
            }
          case LISTSINGLE:{
            tmp = jj_consume_token(LISTSINGLE);
this.appendValue(_policy, "formats",                           this.getSingle(tmp.image));
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(LISTCLOSE);
        break;
        }
      case FORMAT:{
        jj_consume_token(FORMAT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.appendValue(_policy, "formats",                           this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.appendValue(_policy, "formats",                           this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case TYPE_ALL:{
        jj_consume_token(TYPE_ALL);
this.setValue(_policy, "allTypes",                             true);
        break;
        }
      case TYPE_LIST:{
        jj_consume_token(TYPE_LIST);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LISTSTRING:
          case LISTSINGLE:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_3;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LISTSTRING:{
            tmp = jj_consume_token(LISTSTRING);
this.appendValue(_policy, "types",                             this.getString(tmp.image));
            break;
            }
          case LISTSINGLE:{
            tmp = jj_consume_token(LISTSINGLE);
this.appendValue(_policy, "types",                             this.getSingle(tmp.image));
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(LISTCLOSE);
        break;
        }
      case TYPE:{
        jj_consume_token(TYPE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.appendValue(_policy, "types",                             this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.appendValue(_policy, "types",                             this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case DEFAULTFORMAT:{
        jj_consume_token(DEFAULTFORMAT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(_policy, "defaultFormat",                        this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(_policy, "defaultFormat",                        this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ENFORCE_TRUE:
      case ENFORCE_TRUE_VIA_VALUE:
      case ENFORCE_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENFORCE_TRUE:{
          jj_consume_token(ENFORCE_TRUE);
          break;
          }
        case ENFORCE_TRUE_VIA_VALUE:{
          jj_consume_token(ENFORCE_TRUE_VIA_VALUE);
          break;
          }
        case ENFORCE_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(ENFORCE_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(_policy, "enforce",                              true);
        break;
        }
      case ENFORCE_FALSE:
      case ENFORCE_FALSE_VIA_VALUE:
      case ENFORCE_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENFORCE_FALSE:{
          jj_consume_token(ENFORCE_FALSE);
          break;
          }
        case ENFORCE_FALSE_VIA_VALUE:{
          jj_consume_token(ENFORCE_FALSE_VIA_VALUE);
          break;
          }
        case ENFORCE_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(ENFORCE_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(_policy, "enforce",                              false);
        break;
        }
      case DELIMITER:{
        jj_consume_token(DELIMITER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DELIMITERSTRING:{
          tmp = jj_consume_token(DELIMITERSTRING);
this.setValue(_policy, "delimiter",                            this.getString(tmp.image));
          break;
          }
        case DELIMITERSINGLE:{
          tmp = jj_consume_token(DELIMITERSINGLE);
this.setValue(_policy, "delimiter",                            this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case SEQUENCE:
      case MINORSEQUENCE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEQUENCE:{
          jj_consume_token(SEQUENCE);
          break;
          }
        case MINORSEQUENCE:{
          jj_consume_token(MINORSEQUENCE);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(_policy, "minorsequence",                        this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(_policy, "minorsequence",                        this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case MAJORSEQUENCE:{
        jj_consume_token(MAJORSEQUENCE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(_policy, "majorsequence",                        this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(_policy, "majorsequence",                        this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case STORE:{
        jj_consume_token(STORE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(_policy, "store",                                this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(_policy, "store",                                this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case HIDDEN_TRUE:
      case HIDDEN_TRUE_VIA_VALUE:
      case HIDDEN_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case HIDDEN_TRUE:{
          jj_consume_token(HIDDEN_TRUE);
          break;
          }
        case HIDDEN_TRUE_VIA_VALUE:{
          jj_consume_token(HIDDEN_TRUE_VIA_VALUE);
          break;
          }
        case HIDDEN_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(HIDDEN_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(_policy, "hidden",                               true);
        break;
        }
      case HIDDEN_FALSE:
      case HIDDEN_FALSE_VIA_VALUE:
      case HIDDEN_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case HIDDEN_FALSE:{
          jj_consume_token(HIDDEN_FALSE);
          break;
          }
        case HIDDEN_FALSE_VIA_VALUE:{
          jj_consume_token(HIDDEN_FALSE_VIA_VALUE);
          break;
          }
        case HIDDEN_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(HIDDEN_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(_policy, "hidden",                               false);
        break;
        }
      case ALLSTATE:{
        jj_consume_token(ALLSTATE);
        jj_consume_token(156);
this.setValue(_policy, "allState",                             true);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case REVOKE:
          case LOGIN:
          case OWNER:
          case PUBLIC:
          case USER:{
            ;
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            break label_4;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case REVOKE:{
            jj_consume_token(REVOKE);
this.setValue(access, "revoke",                                true);
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LOGIN:{
            jj_consume_token(LOGIN);
this.setValue(access, "login",                                 true);
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OWNER:{
            jj_consume_token(OWNER);
this.setValue(access, "kind",                                  "owner");
            break;
            }
          case PUBLIC:{
            jj_consume_token(PUBLIC);
this.setValue(access, "kind",                                  "public");
            break;
            }
          case USER:{
            jj_consume_token(USER);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STATEACCESS_STRING:{
              tmp = jj_consume_token(STATEACCESS_STRING);
this.setValue(access, "kind", "user");this.setValue(access, "userRef", this.getString(tmp.image));
              break;
              }
            case STATEACCESS_SINGLE:{
              tmp = jj_consume_token(STATEACCESS_SINGLE);
this.setValue(access, "kind", "user");this.setValue(access, "userRef", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[22] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          stateAccessDef(access);
this.appendValue(_policy, "allStateAccess", "accessList", access);/*reset*/access = new Access();
        }
        jj_consume_token(157);
        break;
        }
      case STATE:{
        state(_policy);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
property = new AdminProperty();this.appendValue(_policy, "properties", "propertiesStack", property);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(property, "name", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(property, "name", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYTO:
          case PROPERTYVAL:{
            ;
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            break label_5;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYVAL:{
            jj_consume_token(PROPERTYVAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[26] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case PROPERTYTO:{
            jj_consume_token(PROPERTYTO);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ADMINTYPE_STRING:{
              tmp = jj_consume_token(ADMINTYPE_STRING);
this.setValue(property, "refAdminType", this.getString(tmp.image));
              break;
              }
            case ADMINTYPE_SINGLE:{
              tmp = jj_consume_token(ADMINTYPE_SINGLE);
this.setValue(property, "refAdminType", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[27] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "refAdminName", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "refAdminName", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[28] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * Parses one state definition.
 *
 * @param _policy   policy for which the all state definition is parsed
 */
  final public void state(final Policy_mxJPO _policy) throws ParseException {final State state = new State();
    Set<String> tmpSet;
    Token tmp;
    Trigger trigger;
    Signature signature;
    AdminProperty property;
    Access access = new Access();
    jj_consume_token(STATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      tmp = jj_consume_token(STRING);
this.setValue(state, "name", this.getString(tmp.image));
      break;
      }
    case SINGLE:{
      tmp = jj_consume_token(SINGLE);
this.setValue(state, "name", this.getSingle(tmp.image));
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(156);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REGISTEREDNAME:
      case REVISION_TRUE:
      case REVISION_TRUE_VIA_VALUE:
      case REVISION_TRUE_VIA_VALUE_APOSTROPHE:
      case REVISION_FALSE:
      case REVISION_FALSE_VIA_VALUE:
      case REVISION_FALSE_VIA_VALUE_APOSTROPHE:
      case MINORREVISION_TRUE:
      case MINORREVISION_TRUE_VIA_VALUE:
      case MINORREVISION_TRUE_VIA_VALUE_APOSTROPHE:
      case MINORREVISION_FALSE:
      case MINORREVISION_FALSE_VIA_VALUE:
      case MINORREVISION_FALSE_VIA_VALUE_APOSTROPHE:
      case MAJORREVISION_TRUE:
      case MAJORREVISION_TRUE_VIA_VALUE:
      case MAJORREVISION_TRUE_VIA_VALUE_APOSTROPHE:
      case MAJORREVISION_FALSE:
      case MAJORREVISION_FALSE_VIA_VALUE:
      case MAJORREVISION_FALSE_VIA_VALUE_APOSTROPHE:
      case VERSION_TRUE:
      case VERSION_TRUE_VIA_VALUE:
      case VERSION_TRUE_VIA_VALUE_APOSTROPHE:
      case VERSION_FALSE:
      case VERSION_FALSE_VIA_VALUE:
      case VERSION_FALSE_VIA_VALUE_APOSTROPHE:
      case PROMOTE_TRUE:
      case PROMOTE_TRUE_VIA_VALUE:
      case PROMOTE_TRUE_VIA_VALUE_APOSTROPHE:
      case PROMOTE_FALSE:
      case PROMOTE_FALSE_VIA_VALUE:
      case PROMOTE_FALSE_VIA_VALUE_APOSTROPHE:
      case CHECKOUTHISTORY_TRUE:
      case CHECKOUTHISTORY_TRUE_VIA_VALUE:
      case CHECKOUTHISTORY_TRUE_VIA_VALUE_APOSTROPHE:
      case CHECKOUTHISTORY_FALSE:
      case CHECKOUTHISTORY_FALSE_VIA_VALUE:
      case CHECKOUTHISTORY_FALSE_VIA_VALUE_APOSTROPHE:
      case ENFORCERESERVEACCESS_TRUE:
      case ENFORCERESERVEACCESS_TRUE_VIA_VALUE:
      case ENFORCERESERVEACCESS_TRUE_VIA_VALUE_APOSTROPHE:
      case ENFORCERESERVEACCESS_FALSE:
      case ENFORCERESERVEACCESS_FALSE_VIA_NOT:
      case ENFORCERESERVEACCESS_FALSE_VIA_VALUE:
      case ENFORCERESERVEACCESS_FALSE_VIA_VALUE_APOSTROPHE:
      case PUBLISHED_TRUE:
      case PUBLISHED_TRUE_VIA_VALUE:
      case PUBLISHED_TRUE_VIA_VALUE_APOSTROPHE:
      case PUBLISHED_FALSE:
      case PUBLISHED_FALSE_VIA_VALUE:
      case PUBLISHED_FALSE_VIA_VALUE_APOSTROPHE:
      case REVOKE:
      case LOGIN:
      case OWNER:
      case PUBLIC:
      case USER:
      case SIGNATURE:
      case LEGACYACTION:
      case LEGACYCHECK:
      case TRIGGER:
      case PROPERTY:
      case ROUTE:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REGISTEREDNAME:{
        jj_consume_token(REGISTEREDNAME);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.appendValue(state, "symbolicNames", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.appendValue(state, "symbolicNames", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case REVISION_TRUE:
      case REVISION_TRUE_VIA_VALUE:
      case REVISION_TRUE_VIA_VALUE_APOSTROPHE:
      case MINORREVISION_TRUE:
      case MINORREVISION_TRUE_VIA_VALUE:
      case MINORREVISION_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINORREVISION_TRUE:{
          jj_consume_token(MINORREVISION_TRUE);
          break;
          }
        case MINORREVISION_TRUE_VIA_VALUE:{
          jj_consume_token(MINORREVISION_TRUE_VIA_VALUE);
          break;
          }
        case MINORREVISION_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(MINORREVISION_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        case REVISION_TRUE:{
          jj_consume_token(REVISION_TRUE);
          break;
          }
        case REVISION_TRUE_VIA_VALUE:{
          jj_consume_token(REVISION_TRUE_VIA_VALUE);
          break;
          }
        case REVISION_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(REVISION_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "minorrevisionable", true);
        break;
        }
      case REVISION_FALSE:
      case REVISION_FALSE_VIA_VALUE:
      case REVISION_FALSE_VIA_VALUE_APOSTROPHE:
      case MINORREVISION_FALSE:
      case MINORREVISION_FALSE_VIA_VALUE:
      case MINORREVISION_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINORREVISION_FALSE:{
          jj_consume_token(MINORREVISION_FALSE);
          break;
          }
        case MINORREVISION_FALSE_VIA_VALUE:{
          jj_consume_token(MINORREVISION_FALSE_VIA_VALUE);
          break;
          }
        case MINORREVISION_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(MINORREVISION_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        case REVISION_FALSE:{
          jj_consume_token(REVISION_FALSE);
          break;
          }
        case REVISION_FALSE_VIA_VALUE:{
          jj_consume_token(REVISION_FALSE_VIA_VALUE);
          break;
          }
        case REVISION_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(REVISION_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "minorrevisionable", false);
        break;
        }
      case MAJORREVISION_TRUE:
      case MAJORREVISION_TRUE_VIA_VALUE:
      case MAJORREVISION_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MAJORREVISION_TRUE:{
          jj_consume_token(MAJORREVISION_TRUE);
          break;
          }
        case MAJORREVISION_TRUE_VIA_VALUE:{
          jj_consume_token(MAJORREVISION_TRUE_VIA_VALUE);
          break;
          }
        case MAJORREVISION_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(MAJORREVISION_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "majorrevisionable", true);
        break;
        }
      case MAJORREVISION_FALSE:
      case MAJORREVISION_FALSE_VIA_VALUE:
      case MAJORREVISION_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MAJORREVISION_FALSE:{
          jj_consume_token(MAJORREVISION_FALSE);
          break;
          }
        case MAJORREVISION_FALSE_VIA_VALUE:{
          jj_consume_token(MAJORREVISION_FALSE_VIA_VALUE);
          break;
          }
        case MAJORREVISION_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(MAJORREVISION_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "majorrevisionable", false);
        break;
        }
      case VERSION_TRUE:
      case VERSION_TRUE_VIA_VALUE:
      case VERSION_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VERSION_TRUE:{
          jj_consume_token(VERSION_TRUE);
          break;
          }
        case VERSION_TRUE_VIA_VALUE:{
          jj_consume_token(VERSION_TRUE_VIA_VALUE);
          break;
          }
        case VERSION_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(VERSION_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "versionable", true);
        break;
        }
      case VERSION_FALSE:
      case VERSION_FALSE_VIA_VALUE:
      case VERSION_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VERSION_FALSE:{
          jj_consume_token(VERSION_FALSE);
          break;
          }
        case VERSION_FALSE_VIA_VALUE:{
          jj_consume_token(VERSION_FALSE_VIA_VALUE);
          break;
          }
        case VERSION_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(VERSION_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "versionable", false);
        break;
        }
      case PROMOTE_TRUE:
      case PROMOTE_TRUE_VIA_VALUE:
      case PROMOTE_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PROMOTE_TRUE:{
          jj_consume_token(PROMOTE_TRUE);
          break;
          }
        case PROMOTE_TRUE_VIA_VALUE:{
          jj_consume_token(PROMOTE_TRUE_VIA_VALUE);
          break;
          }
        case PROMOTE_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(PROMOTE_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "autoPromotion", true);
        break;
        }
      case PROMOTE_FALSE:
      case PROMOTE_FALSE_VIA_VALUE:
      case PROMOTE_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PROMOTE_FALSE:{
          jj_consume_token(PROMOTE_FALSE);
          break;
          }
        case PROMOTE_FALSE_VIA_VALUE:{
          jj_consume_token(PROMOTE_FALSE_VIA_VALUE);
          break;
          }
        case PROMOTE_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(PROMOTE_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "autoPromotion", false);
        break;
        }
      case CHECKOUTHISTORY_TRUE:
      case CHECKOUTHISTORY_TRUE_VIA_VALUE:
      case CHECKOUTHISTORY_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHECKOUTHISTORY_TRUE:{
          jj_consume_token(CHECKOUTHISTORY_TRUE);
          break;
          }
        case CHECKOUTHISTORY_TRUE_VIA_VALUE:{
          jj_consume_token(CHECKOUTHISTORY_TRUE_VIA_VALUE);
          break;
          }
        case CHECKOUTHISTORY_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(CHECKOUTHISTORY_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "checkoutHistory", true);
        break;
        }
      case CHECKOUTHISTORY_FALSE:
      case CHECKOUTHISTORY_FALSE_VIA_VALUE:
      case CHECKOUTHISTORY_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHECKOUTHISTORY_FALSE:{
          jj_consume_token(CHECKOUTHISTORY_FALSE);
          break;
          }
        case CHECKOUTHISTORY_FALSE_VIA_VALUE:{
          jj_consume_token(CHECKOUTHISTORY_FALSE_VIA_VALUE);
          break;
          }
        case CHECKOUTHISTORY_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(CHECKOUTHISTORY_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "checkoutHistory", false);
        break;
        }
      case ENFORCERESERVEACCESS_TRUE:
      case ENFORCERESERVEACCESS_TRUE_VIA_VALUE:
      case ENFORCERESERVEACCESS_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENFORCERESERVEACCESS_TRUE:{
          jj_consume_token(ENFORCERESERVEACCESS_TRUE);
          break;
          }
        case ENFORCERESERVEACCESS_TRUE_VIA_VALUE:{
          jj_consume_token(ENFORCERESERVEACCESS_TRUE_VIA_VALUE);
          break;
          }
        case ENFORCERESERVEACCESS_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(ENFORCERESERVEACCESS_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "enforcereserveaccess", true);
        break;
        }
      case ENFORCERESERVEACCESS_FALSE:
      case ENFORCERESERVEACCESS_FALSE_VIA_NOT:
      case ENFORCERESERVEACCESS_FALSE_VIA_VALUE:
      case ENFORCERESERVEACCESS_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENFORCERESERVEACCESS_FALSE:{
          jj_consume_token(ENFORCERESERVEACCESS_FALSE);
          break;
          }
        case ENFORCERESERVEACCESS_FALSE_VIA_NOT:{
          jj_consume_token(ENFORCERESERVEACCESS_FALSE_VIA_NOT);
          break;
          }
        case ENFORCERESERVEACCESS_FALSE_VIA_VALUE:{
          jj_consume_token(ENFORCERESERVEACCESS_FALSE_VIA_VALUE);
          break;
          }
        case ENFORCERESERVEACCESS_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(ENFORCERESERVEACCESS_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "enforcereserveaccess", false);
        break;
        }
      case PUBLISHED_TRUE:
      case PUBLISHED_TRUE_VIA_VALUE:
      case PUBLISHED_TRUE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLISHED_TRUE:{
          jj_consume_token(PUBLISHED_TRUE);
          break;
          }
        case PUBLISHED_TRUE_VIA_VALUE:{
          jj_consume_token(PUBLISHED_TRUE_VIA_VALUE);
          break;
          }
        case PUBLISHED_TRUE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(PUBLISHED_TRUE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "published", true);
        break;
        }
      case PUBLISHED_FALSE:
      case PUBLISHED_FALSE_VIA_VALUE:
      case PUBLISHED_FALSE_VIA_VALUE_APOSTROPHE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLISHED_FALSE:{
          jj_consume_token(PUBLISHED_FALSE);
          break;
          }
        case PUBLISHED_FALSE_VIA_VALUE:{
          jj_consume_token(PUBLISHED_FALSE_VIA_VALUE);
          break;
          }
        case PUBLISHED_FALSE_VIA_VALUE_APOSTROPHE:{
          jj_consume_token(PUBLISHED_FALSE_VIA_VALUE_APOSTROPHE);
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "published", false);
        break;
        }
      case REVOKE:
      case LOGIN:
      case OWNER:
      case PUBLIC:
      case USER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case REVOKE:{
          jj_consume_token(REVOKE);
this.setValue(access, "revoke", true);
          break;
          }
        default:
          jj_la1[48] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LOGIN:{
          jj_consume_token(LOGIN);
this.setValue(access, "login", true);
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OWNER:{
          jj_consume_token(OWNER);
this.setValue(access, "kind", "owner");
          break;
          }
        case PUBLIC:{
          jj_consume_token(PUBLIC);
this.setValue(access, "kind", "public");
          break;
          }
        case USER:{
          jj_consume_token(USER);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case STATEACCESS_STRING:{
            tmp = jj_consume_token(STATEACCESS_STRING);
this.setValue(access, "kind", "user");this.setValue(access, "userRef", this.getString(tmp.image));
            break;
            }
          case STATEACCESS_SINGLE:{
            tmp = jj_consume_token(STATEACCESS_SINGLE);
this.setValue(access, "kind", "user");this.setValue(access, "userRef", this.getSingle(tmp.image));
            break;
            }
          default:
            jj_la1[50] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        stateAccessDef(access);
this.appendValue(state, "access", "accessList", access);/*reset*/access = new Access();
        break;
        }
      case LEGACYACTION:{
        jj_consume_token(LEGACYACTION);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(state, "actionProgram",                          this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(state, "actionProgram",                          this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(INPUT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(state, "actionInput",                            this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(state, "actionInput",                            this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case LEGACYCHECK:{
        jj_consume_token(LEGACYCHECK);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(state, "checkProgram",                           this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(state, "checkProgram",                           this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(INPUT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(state, "checkInput",                             this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(state, "checkInput",                             this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ROUTE:{
        jj_consume_token(ROUTE);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ROUTEUSERSTRING:
          case ROUTEUSERSINGLE:{
            ;
            break;
            }
          default:
            jj_la1[56] = jj_gen;
            break label_7;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ROUTEUSERSTRING:{
            tmp = jj_consume_token(ROUTEUSERSTRING);
this.appendValue(state, "routeUsers",                          this.getString(tmp.image));
            break;
            }
          case ROUTEUSERSINGLE:{
            tmp = jj_consume_token(ROUTEUSERSINGLE);
this.appendValue(state, "routeUsers",                          this.getSingle(tmp.image));
            break;
            }
          default:
            jj_la1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(ROUTEUSERCLOSE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(state, "routeMessage",                           this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(state, "routeMessage",                           this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case TRIGGER:{
        jj_consume_token(TRIGGER);
trigger = new Trigger();this.appendValue(state, "triggers", "triggersStack", trigger);
        tmp = jj_consume_token(TRIGEVENT);
this.setValue(trigger, "eventType",                            this.getSingle(tmp.image));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ACTION:{
          jj_consume_token(ACTION);
this.setValue(trigger, "kind",                                 "action");
          break;
          }
        case CHECK:{
          jj_consume_token(CHECK);
this.setValue(trigger, "kind",                                 "check");
          break;
          }
        case OVERRIDE:{
          jj_consume_token(OVERRIDE);
this.setValue(trigger, "kind",                                 "override");
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(trigger, "program",                              this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(trigger, "program",                              this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INPUT:{
          jj_consume_token(INPUT);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case STRING:{
            tmp = jj_consume_token(STRING);
this.setValue(trigger, "arguments",                            this.getString(tmp.image));
            break;
            }
          case SINGLE:{
            tmp = jj_consume_token(SINGLE);
this.setValue(trigger, "arguments",                            this.getSingle(tmp.image));
            break;
            }
          default:
            jj_la1[61] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          ;
        }
        break;
        }
      case SIGNATURE:{
        jj_consume_token(SIGNATURE);
signature = new Signature();this.appendValue(state, "signatures", signature);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(signature, "name",                               this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(signature, "name",                               this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(156);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case APPROVE_LIST:
          case IGNORE_LIST:
          case REJECT_LIST:
          case BRANCH:
          case FILTER:{
            ;
            break;
            }
          default:
            jj_la1[64] = jj_gen;
            break label_8;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BRANCH:{
            jj_consume_token(BRANCH);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(signature, "branch",                             this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(signature, "branch",                             this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[65] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case APPROVE_LIST:{
            jj_consume_token(APPROVE_LIST);
            label_9:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LISTSTRING:
              case LISTSINGLE:{
                ;
                break;
                }
              default:
                jj_la1[66] = jj_gen;
                break label_9;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LISTSTRING:{
                tmp = jj_consume_token(LISTSTRING);
this.appendValue(signature, "approverUsers",                   this.getString(tmp.image));
                break;
                }
              case LISTSINGLE:{
                tmp = jj_consume_token(LISTSINGLE);
this.appendValue(signature, "approverUsers",                   this.getSingle(tmp.image));
                break;
                }
              default:
                jj_la1[67] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(LISTCLOSE);
            break;
            }
          case IGNORE_LIST:{
            jj_consume_token(IGNORE_LIST);
            label_10:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LISTSTRING:
              case LISTSINGLE:{
                ;
                break;
                }
              default:
                jj_la1[68] = jj_gen;
                break label_10;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LISTSTRING:{
                tmp = jj_consume_token(LISTSTRING);
this.appendValue(signature, "ignoreUsers",                     this.getString(tmp.image));
                break;
                }
              case LISTSINGLE:{
                tmp = jj_consume_token(LISTSINGLE);
this.appendValue(signature, "ignoreUsers",                     this.getSingle(tmp.image));
                break;
                }
              default:
                jj_la1[69] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(LISTCLOSE);
            break;
            }
          case REJECT_LIST:{
            jj_consume_token(REJECT_LIST);
            label_11:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LISTSTRING:
              case LISTSINGLE:{
                ;
                break;
                }
              default:
                jj_la1[70] = jj_gen;
                break label_11;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LISTSTRING:{
                tmp = jj_consume_token(LISTSTRING);
this.appendValue(signature, "rejectUsers",                     this.getString(tmp.image));
                break;
                }
              case LISTSINGLE:{
                tmp = jj_consume_token(LISTSINGLE);
this.appendValue(signature, "rejectUsers",                     this.getSingle(tmp.image));
                break;
                }
              default:
                jj_la1[71] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(LISTCLOSE);
            break;
            }
          case FILTER:{
            jj_consume_token(FILTER);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(signature, "filter",                             this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(signature, "filter",                             this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[72] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[73] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(157);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
property = new AdminProperty();this.appendValue(state, "properties", "propertiesStack", property);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(property, "name", this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(property, "name", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYTO:
          case PROPERTYVAL:{
            ;
            break;
            }
          default:
            jj_la1[75] = jj_gen;
            break label_12;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPERTYVAL:{
            jj_consume_token(PROPERTYVAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "value", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "value", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[76] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case PROPERTYTO:{
            jj_consume_token(PROPERTYTO);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ADMINTYPE_STRING:{
              tmp = jj_consume_token(ADMINTYPE_STRING);
this.setValue(property, "refAdminType", this.getString(tmp.image));
              break;
              }
            case ADMINTYPE_SINGLE:{
              tmp = jj_consume_token(ADMINTYPE_SINGLE);
this.setValue(property, "refAdminType", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[77] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRING:{
              tmp = jj_consume_token(STRING);
this.setValue(property, "refAdminName", this.getString(tmp.image));
              break;
              }
            case SINGLE:{
              tmp = jj_consume_token(SINGLE);
this.setValue(property, "refAdminName", this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[78] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[79] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(157);
this.appendValue(_policy, "states", state);
  }

  final public void stateAccessDef(final Access _access) throws ParseException {Token tmp;
    Token access = null;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KEY:
      case ACCESS:
      case FILTER:
      case LOCALFILTER:
      case ORGANIZATION_ANY:
      case ORGANIZATION_SINGLE:
      case ORGANIZATION_ANCESTOR:
      case ORGANIZATION_DESCENDANT:
      case ORGANIZATION_RELATED:
      case PROJECT_ANY:
      case PROJECT_SINGLE:
      case PROJECT_ANCESTOR:
      case PROJECT_DESCENDANT:
      case PROJECT_RELATED:
      case OWNER_ANY:
      case OWNER_CONTEXT:
      case RESERVE_ANY:
      case RESERVE_CONTEXT:
      case RESERVE_NO:
      case RESERVE_INCLUSIVE:
      case MATURITY_ANY:
      case MATURITY_NO:
      case MATURITY_PUBLIC:
      case MATURITY_PROTECTED:
      case MATURITY_PRIVATE:
      case MATURITY_NOTPRIVATE:
      case MATURITY_PPP:
      case CATEGORY_ANY:
      case CATEGORY_OEM:
      case CATEGORY_GOLDPARTNER:
      case CATEGORY_PARTNER:
      case CATEGORY_SUPPLIER:
      case CATEGORY_CUSTOMER:
      case CATEGORY_CONTRACTOR:{
        ;
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KEY:{
        jj_consume_token(KEY);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STATEACCESS_STRING:{
          tmp = jj_consume_token(STATEACCESS_STRING);
this.setValue(_access, "key",                                  this.getString(tmp.image));
          break;
          }
        case STATEACCESS_SINGLE:{
          tmp = jj_consume_token(STATEACCESS_SINGLE);
this.setValue(_access, "key",                                  this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[82] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case FILTER:{
        jj_consume_token(FILTER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(_access, "filter",                               this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(_access, "filter",                               this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case LOCALFILTER:{
        jj_consume_token(LOCALFILTER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          tmp = jj_consume_token(STRING);
this.setValue(_access, "localfilter",                          this.getString(tmp.image));
          break;
          }
        case SINGLE:{
          tmp = jj_consume_token(SINGLE);
this.setValue(_access, "localfilter",                          this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ACCESS:{
        access = jj_consume_token(ACCESS);
        break;
        }
      case ORGANIZATION_ANY:{
        jj_consume_token(ORGANIZATION_ANY);
this.setValue(_access, "organization",                         "any");
        break;
        }
      case ORGANIZATION_SINGLE:{
        jj_consume_token(ORGANIZATION_SINGLE);
this.setValue(_access, "organization",                         "single");
        break;
        }
      case ORGANIZATION_ANCESTOR:{
        jj_consume_token(ORGANIZATION_ANCESTOR);
this.setValue(_access, "organization",                         "ancestor");
        break;
        }
      case ORGANIZATION_DESCENDANT:{
        jj_consume_token(ORGANIZATION_DESCENDANT);
this.setValue(_access, "organization",                         "descendant");
        break;
        }
      case ORGANIZATION_RELATED:{
        jj_consume_token(ORGANIZATION_RELATED);
this.setValue(_access, "organization",                         "related");
        break;
        }
      case PROJECT_ANY:{
        jj_consume_token(PROJECT_ANY);
this.setValue(_access, "project",                              "any");
        break;
        }
      case PROJECT_SINGLE:{
        jj_consume_token(PROJECT_SINGLE);
this.setValue(_access, "project",                              "single");
        break;
        }
      case PROJECT_ANCESTOR:{
        jj_consume_token(PROJECT_ANCESTOR);
this.setValue(_access, "project",                              "ancestor");
        break;
        }
      case PROJECT_DESCENDANT:{
        jj_consume_token(PROJECT_DESCENDANT);
this.setValue(_access, "project",                              "descendant");
        break;
        }
      case PROJECT_RELATED:{
        jj_consume_token(PROJECT_RELATED);
this.setValue(_access, "project",                              "related");
        break;
        }
      case OWNER_ANY:{
        jj_consume_token(OWNER_ANY);
this.setValue(_access, "owner",                                "any");
        break;
        }
      case OWNER_CONTEXT:{
        jj_consume_token(OWNER_CONTEXT);
this.setValue(_access, "owner",                                "context");
        break;
        }
      case RESERVE_ANY:{
        jj_consume_token(RESERVE_ANY);
this.setValue(_access, "reserve",                              "any");
        break;
        }
      case RESERVE_CONTEXT:{
        jj_consume_token(RESERVE_CONTEXT);
this.setValue(_access, "reserve",                              "context");
        break;
        }
      case RESERVE_NO:{
        jj_consume_token(RESERVE_NO);
this.setValue(_access, "reserve",                              "no");
        break;
        }
      case RESERVE_INCLUSIVE:{
        jj_consume_token(RESERVE_INCLUSIVE);
this.setValue(_access, "reserve",                              "inclusive");
        break;
        }
      case MATURITY_ANY:{
        jj_consume_token(MATURITY_ANY);
this.setValue(_access, "maturity",                             "any");
        break;
        }
      case MATURITY_NO:{
        jj_consume_token(MATURITY_NO);
this.setValue(_access, "maturity",                             "no");
        break;
        }
      case MATURITY_PUBLIC:{
        jj_consume_token(MATURITY_PUBLIC);
this.setValue(_access, "maturity",                             "public");
        break;
        }
      case MATURITY_PROTECTED:{
        jj_consume_token(MATURITY_PROTECTED);
this.setValue(_access, "maturity",                             "protected");
        break;
        }
      case MATURITY_PRIVATE:{
        jj_consume_token(MATURITY_PRIVATE);
this.setValue(_access, "maturity",                             "private");
        break;
        }
      case MATURITY_NOTPRIVATE:{
        jj_consume_token(MATURITY_NOTPRIVATE);
this.setValue(_access, "maturity",                             "notprivate");
        break;
        }
      case MATURITY_PPP:{
        jj_consume_token(MATURITY_PPP);
this.setValue(_access, "maturity",                             "ppp");
        break;
        }
      case CATEGORY_ANY:{
        jj_consume_token(CATEGORY_ANY);
this.setValue(_access, "category",                             "any");
        break;
        }
      case CATEGORY_OEM:{
        jj_consume_token(CATEGORY_OEM);
this.setValue(_access, "category",                             "oem");
        break;
        }
      case CATEGORY_GOLDPARTNER:{
        jj_consume_token(CATEGORY_GOLDPARTNER);
this.setValue(_access, "category",                             "goldpartner");
        break;
        }
      case CATEGORY_PARTNER:{
        jj_consume_token(CATEGORY_PARTNER);
this.setValue(_access, "category",                             "partner");
        break;
        }
      case CATEGORY_SUPPLIER:{
        jj_consume_token(CATEGORY_SUPPLIER);
this.setValue(_access, "category",                             "supplier");
        break;
        }
      case CATEGORY_CUSTOMER:{
        jj_consume_token(CATEGORY_CUSTOMER);
this.setValue(_access, "category",                             "customer");
        break;
        }
      case CATEGORY_CONTRACTOR:{
        jj_consume_token(CATEGORY_CONTRACTOR);
this.setValue(_access, "category",                             "contractor");
        break;
        }
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
if (access != null)  {
            final String tmpStr = access.image
                    .replaceFirst("^\\{", "").replaceFirst("\\}$", "")  // remove {}
                    .replaceAll("(\t)|(\n)", " ")                       // replace tabs, new lines
                    .replaceAll("( )+", " ")                            // multiple spaces => one space
                    .trim();                                            // remove trailing spaces
            this.appendValues(_access, "access", Arrays.asList(tmpStr.split(" ")));
        }
  }

  /** Generated Token Manager. */
  public PolicyParserTokenManager_mxJPO token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[86];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7fffffe0,0x80000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x80000000,0x38000,0x1c0000,0x0,0x600000,0x80000000,0x80000000,0x80000000,0x7000000,0x38000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x7fffffe0,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x80000000,0x80000000,0x0,0x0,0x80000000,0x0,0x80000000,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40,0x1,0x6,0x18,0x18,0x1,0x18,0x18,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x40,0x1,0xffffff80,0x1,0x1c700,0xe3800,0x700000,0x3800000,0x1c000000,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x1,0x0,0x1,0x18,0x18,0x18,0x18,0x18,0x18,0x1,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0xffffff80,0x0,0x0,0x1,0x1,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e000000,0x2000000,0x4000000,0x0,0x38000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x38,0x1c0,0xe00,0x7000,0x78000,0x380000,0x1c00000,0x2000000,0x4000000,0x0,0x38000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x3fffffff,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x700,0x0,0x0,0x0,0x0,0x8007,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8007,0x0,0x0,0x0,0x0,0x0,0x0,0x78,0xffff9800,0x6000,0x0,0x0,0xffff9800,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x108000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000,0x0,0xc0000,0x0,0x30000,0x108000,0x0,0x1008000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000,0x0,0xc0000,0x0,0x30000,0x1008000,0x7fff,0x0,0x0,0x0,0x7fff,};
   }

  /** Constructor with InputStream. */
  public PolicyParser_mxJPO(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PolicyParser_mxJPO(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PolicyParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PolicyParser_mxJPO(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PolicyParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new PolicyParserTokenManager_mxJPO(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PolicyParser_mxJPO(PolicyParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PolicyParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[158];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 86; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 158; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
