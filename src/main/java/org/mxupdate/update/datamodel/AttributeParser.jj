/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.6";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}
PARSER_BEGIN(AttributeParser)package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.mxupdate.mapping.TypeDef_mxJPO;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.datamodel.AbstractAttribute_mxJPO;
import org.mxupdate.update.datamodel.AbstractAttribute_mxJPO.Range;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;
import org.mxupdate.update.util.ParameterCache_mxJPO;

/**
 * Parses the update format for {@link AbstractAttribute_mxJPO}.
 */
@SuppressWarnings("unused")
class AttributeParser
    extends AbstractParser_mxJPO<AbstractAttribute_mxJPO<?>>
{
}PARSER_END(AttributeParser)SKIP :
{
    " "
|   "\r"
|   "\t"
|   "\n"
}

TOKEN : /** first level */
{
      <DESCRIPTION:             "description">      : STRING_EXPECTED
    | <DEFAULTVALUE:            "default">          : STRING_EXPECTED
    | <HIDDEN_TRUE:             "hidden">
    | <HIDDEN_FALSE:            "!hidden">
    | <MULTIVALUE_TRUE:         "multivalue">
    | <MULTIVALUE_FALSE:        "!multivalue">
    | <RESETONCLONE_TRUE:       "resetonclone">
    | <RESETONCLONE_FALSE:      "!resetonclone">
    | <RESETONREVISION_TRUE:    "resetonrevision">
    | <RESETONREVISION_FALSE:   "!resetonrevision">
    | <RANGEVALUE_TRUE:         "rangevalue">
    | <RANGEVALUE_FALSE:        "!rangevalue">
    | <MULTILINE_TRUE:          "multiline">
    | <MULTILINE_FALSE:         "!multiline">
    | <MAXLENGTH:               "maxlength">        : MAXLENGTH_EXPECTED
    | <RULE:                    "rule">             : STRING_EXPECTED
    | <DIMENSION:               "dimension">        : STRING_EXPECTED
    | <INPUT:                   "input">                                    : STRING_EXPECTED
}

/************************************************************** Common String */
<STRING_EXPECTED> SKIP :
{
  " " | "\t" | "\n" | "\r"
}

<STRING_EXPECTED> TOKEN :
{
      <STRING: (<APOSTROPHE>(<CHAR> | "\\\"" | "{" | "}" | " " | "\n")*<APOSTROPHE>)> : DEFAULT
    | <SINGLE: (<CHAR>)+> : DEFAULT
    | <#APOSTROPHE: "\"" >
    | <#CHAR: ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

/****************************************************** Integer for Max Value */
<MAXLENGTH_EXPECTED> SKIP :
{
  " " | "\t" | "\n" | "\r"
}

<MAXLENGTH_EXPECTED> TOKEN :
{
      <MAXLENGTH_NUMBER : (["\u0030"-"\u0039"])+> : DEFAULT
}

/******************************************************************* Triggers */
<DEFAULT> TOKEN :
{
      <TRIGGER:                             "trigger">                                      : TRIGEVENT_EXPECTED
}

/** Trigger Event */
<TRIGEVENT_EXPECTED> SKIP :
{
    " " | "\t" | "\n" | "\r"
}

<TRIGEVENT_EXPECTED> TOKEN :
{
      <TRIGEVENT:           (~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"])+>         : TRIGKIND_EXPECTED
}

/** Trigger Kind */
<TRIGKIND_EXPECTED> SKIP :
{
    " " | "\t" | "\n" | "\r"
}

<TRIGKIND_EXPECTED> TOKEN :
{
      <ACTION:                              "action">                                       : STRING_EXPECTED
    | <CHECK:                               "check">                                        : STRING_EXPECTED
    | <OVERRIDE:                            "override">                                     : STRING_EXPECTED
}

/********************************************************************* Ranges */

<DEFAULT> TOKEN:
{      <RANGE_EQUAL:             "range" ([" ","\t","\n","\r"])+ "=">        : STRING_EXPECTED
    | <RANGE_GREATERTHAN:       "range" ([" ","\t","\n","\r"])+ ">">        : STRING_EXPECTED
    | <RANGE_GREATERTHANEQUAL:  "range" ([" ","\t","\n","\r"])+ ">=">       : STRING_EXPECTED
    | <RANGE_LESSTHAN:          "range" ([" ","\t","\n","\r"])+ "< ">       : STRING_EXPECTED
    | <RANGE_LESSTHANEQUAL:     "range" ([" ","\t","\n","\r"])+ "<=">       : STRING_EXPECTED
    | <RANGE_NOTEQUAL:          "range" ([" ","\t","\n","\r"])+ "!=">       : STRING_EXPECTED
    | <RANGE_MATCH:             "range" ([" ","\t","\n","\r"])+ "match">    : STRING_EXPECTED
    | <RANGE_NOTMATCH:          "range" ([" ","\t","\n","\r"])+ "!match">   : STRING_EXPECTED
    | <RANGE_SMATCH:            "range" ([" ","\t","\n","\r"])+ "smatch">   : STRING_EXPECTED
    | <RANGE_NOTSMATCH:         "range" ([" ","\t","\n","\r"])+ "!smatch">  : STRING_EXPECTED
    | <RANGE_PROGRAM:           "range" ([" ","\t","\n","\r"])+ "program">  : STRING_EXPECTED
    | <RANGE_BETWEEN:           "range" ([" ","\t","\n","\r"])+ "between">  : BETW1_EXPECTED
}

<BETW1_EXPECTED> SKIP :
{
  " " | "\t" | "\n" | "\r"
}
<BETW1_EXPECTED> TOKEN :
{
      <BETW1_STRING: (<BETW1_APOSTROPHE>(<BETW1_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<BETW1_APOSTROPHE>)> : BETW2_EXPECTED
    | <BETW1_SINGLE: (<BETW1_CHAR>)+> : BETW2_EXPECTED
    | <#BETW1_APOSTROPHE: "\"" >
    | <#BETW1_CHAR: ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

<BETW2_EXPECTED> SKIP :
{
  " " | "\t" | "\n" | "\r"
}
<BETW2_EXPECTED> TOKEN :
{
      <BETW2_INCLUSIVE: "inclusive"> : BETW3_EXPECTED
    | <BETW2_EXCLUSIVE: "exclusive"> : BETW3_EXPECTED
}

<BETW3_EXPECTED> SKIP :
{
  " " | "\t" | "\n" | "\r"
}
<BETW3_EXPECTED> TOKEN :
{
      <BETW3_STRING: (<BETW3_APOSTROPHE>(<BETW3_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<BETW3_APOSTROPHE>)> : BETW4_EXPECTED
    | <BETW3_SINGLE: (<BETW3_CHAR>)+> : BETW4_EXPECTED
    | <#BETW3_APOSTROPHE: "\"" >
    | <#BETW3_CHAR: ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

<BETW4_EXPECTED> SKIP :
{
  " " | "\t" | "\n" | "\r"
}
<BETW4_EXPECTED> TOKEN :
{
      <BETW4_INCLUSIVE: "inclusive"> : DEFAULT
    | <BETW4_EXCLUSIVE: "exclusive"> : DEFAULT
}

/**************************************** Two Strings for Property Definition */

<DEFAULT> TOKEN :
{      <PROPERTY:                "property">                                 : STRING_EXPECTED
    | <PROPERTYTO:              "to">                                       : ADMINREF_EXPECTED
    | <PROPERTYVAL:             "value">                                    : STRING_EXPECTED
}

<ADMINREF_EXPECTED> SKIP :
{
  " " | "\t" | "\n" | "\r"
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING : (<ADMINTYPE_APOSTROPHE>(<ADMINTYPE_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<ADMINTYPE_APOSTROPHE>)> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE : (<ADMINTYPE_CHAR>)+> : STRING_EXPECTED
    | <#ADMINTYPE_APOSTROPHE : "\"" >
    | <#ADMINTYPE_CHAR : ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}

/**
 * Parses one complete attribute definition.
 *
 * @param _attribute    target attribute to update with parsed values
 */
void parse(final AbstractAttribute_mxJPO<?> _attr)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    Token tmp;
    Trigger trigger;
    Range range;
    AdminProperty property;
} {
    (   (<DESCRIPTION>              ( tmp = <STRING>                        {this.setValue(_attr, "description", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_attr, "description", this.getSingle(tmp.image));} ) )
      | (<DEFAULTVALUE>             ( tmp = <STRING>                        {this.setValue(_attr, "defaultValue", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_attr, "defaultValue", this.getSingle(tmp.image));} ) )

      | (<HIDDEN_TRUE>                                                      {this.setValue(_attr, "hidden", true);} )
      | (<HIDDEN_FALSE>                                                     {this.setValue(_attr, "hidden", false);} )

      | (<MULTIVALUE_TRUE>                                                  {this.setValue(_attr, "multiValue", true);} )
      | (<MULTIVALUE_FALSE>                                                 {this.setValue(_attr, "multiValue", false);} )

      | (<RESETONCLONE_TRUE>                                                {this.setValue(_attr, "resetOnClone", true);} )
      | (<RESETONCLONE_FALSE>                                               {this.setValue(_attr, "resetOnClone", false);} )
      | (<RESETONREVISION_TRUE>                                             {this.setValue(_attr, "resetOnRevision", true);} )
      | (<RESETONREVISION_FALSE>                                            {this.setValue(_attr, "resetOnRevision", false);} )
      | (<RANGEVALUE_TRUE>                                                  {this.setValue(_attr, "rangeValue", true);} )
      | (<RANGEVALUE_FALSE>                                                 {this.setValue(_attr, "rangeValue", false);} )
      | (<MULTILINE_TRUE>                                                   {this.setValue(_attr, "multiline", true);} )
      | (<MULTILINE_FALSE>                                                  {this.setValue(_attr, "multiline", false);} )
      | (<MAXLENGTH>                ( tmp = <MAXLENGTH_NUMBER>              {this.setValue(_attr, "maxLength", this.getSingle(tmp.image));} ) )
      | (<RULE>                     ( tmp = <STRING>                        {this.setValue(_attr, "rules", Arrays.asList(new String[]{this.getString(tmp.image)}));}
                                    | tmp = <SINGLE>                        {this.setValue(_attr, "rules", Arrays.asList(new String[]{this.getSingle(tmp.image)}));} ) )
      | (<DIMENSION>                ( tmp = <STRING>                        {this.setValue(_attr, "dimension", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_attr, "dimension", this.getSingle(tmp.image));} ) )

      | ( <TRIGGER>                                                         {trigger = new Trigger();this.appendValue(_attr, "triggers", "triggersStack", trigger);}
            tmp = <TRIGEVENT>                                               {this.setValue(trigger, "eventType",                            this.getSingle(tmp.image));}
                    ( <ACTION>                                              {this.setValue(trigger, "kind",                                 "action");}
                    | <CHECK>                                               {this.setValue(trigger, "kind",                                 "check");}
                    | <OVERRIDE>                                            {this.setValue(trigger, "kind",                                 "override");} )
                            ( tmp = <STRING>                                {this.setValue(trigger, "program",                              this.getString(tmp.image));}
                            | tmp = <SINGLE>                                {this.setValue(trigger, "program",                              this.getSingle(tmp.image));} )
                                    ( <INPUT>
                                            ( tmp = <STRING>                {this.setValue(trigger, "arguments",                            this.getString(tmp.image));}
                                            | tmp = <SINGLE>                {this.setValue(trigger, "arguments",                            this.getSingle(tmp.image));} ) )?  )

      | (<RANGE_EQUAL>              ( tmp = <STRING>                        {range = new Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(_attr, "rangesStack", range);}
                                    | tmp = <SINGLE>                        {range = new Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(_attr, "rangesStack", range);} ) )
      | (<RANGE_GREATERTHAN>        ( tmp = <STRING>                        {range = new Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(_attr, "rangesStack", range);}
                                    | tmp = <SINGLE>                        {range = new Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(_attr, "rangesStack", range);} ) )
      | (<RANGE_GREATERTHANEQUAL>   ( tmp = <STRING>                        {range = new Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(_attr, "rangesStack", range);}
                                    | tmp = <SINGLE>                        {range = new Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(_attr, "rangesStack", range);} ) )
      | (<RANGE_LESSTHAN>           ( tmp = <STRING>                        {range = new Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(_attr, "rangesStack", range);}
                                    | tmp = <SINGLE>                        {range = new Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(_attr, "rangesStack", range);} ) )
      | (<RANGE_LESSTHANEQUAL>      ( tmp = <STRING>                        {range = new Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(_attr, "rangesStack", range);}
                                    | tmp = <SINGLE>                        {range = new Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(_attr, "rangesStack", range);} ) )
      | (<RANGE_NOTEQUAL>           ( tmp = <STRING>                        {range = new Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(_attr, "rangesStack", range);}
                                    | tmp = <SINGLE>                        {range = new Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(_attr, "rangesStack", range);} ) )
      | (<RANGE_MATCH>              ( tmp = <STRING>                        {range = new Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(_attr, "rangesStack", range);}
                                    | tmp = <SINGLE>                        {range = new Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(_attr, "rangesStack", range);} ) )
      | (<RANGE_NOTMATCH>           ( tmp = <STRING>                        {range = new Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(_attr, "rangesStack", range);}
                                    | tmp = <SINGLE>                        {range = new Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(_attr, "rangesStack", range);} ) )
      | (<RANGE_SMATCH>             ( tmp = <STRING>                        {range = new Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(_attr, "rangesStack", range);}
                                    | tmp = <SINGLE>                        {range = new Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(_attr, "rangesStack", range);} ) )
      | (<RANGE_NOTSMATCH>          ( tmp = <STRING>                        {range = new Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(_attr, "rangesStack", range);}
                                    | tmp = <SINGLE>                        {range = new Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(_attr, "rangesStack", range);} ) )
      | (<RANGE_PROGRAM>            ( tmp = <STRING>                        {range = new Range();this.setValue(range, "type", "program");this.setValue(range, "value1", this.getString(tmp.image));this.appendValue(_attr, "rangesStack", range);}
                                    | tmp = <SINGLE>                        {range = new Range();this.setValue(range, "type", "program");this.setValue(range, "value1", this.getSingle(tmp.image));this.appendValue(_attr, "rangesStack", range);} )
                  ( <INPUT>         ( tmp = <STRING>                        {this.setValue(range, "value2", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(range, "value2", this.getSingle(tmp.image));} ) )? )
      | (<RANGE_BETWEEN>                                                    {range = new Range();this.setValue(range, "type", "between");this.appendValue(_attr, "rangesStack", range);}
                                    ( tmp = <BETW1_STRING>                  {this.setValue(range, "value1", this.getString(tmp.image));}
                                    | tmp = <BETW1_SINGLE>                  {this.setValue(range, "value1", this.getSingle(tmp.image));} )
                                    ( <BETW2_INCLUSIVE>                     {this.setValue(range, "include1", true);}
                                    | <BETW2_EXCLUSIVE>                     {this.setValue(range, "include1", false);})
                                    ( tmp = <BETW3_STRING>                  {this.setValue(range, "value2", this.getString(tmp.image));}
                                    | tmp = <BETW3_SINGLE>                  {this.setValue(range, "value2", this.getSingle(tmp.image));} )
                                    ( <BETW4_INCLUSIVE>                     {this.setValue(range, "include2", true);}
                                    | <BETW4_EXCLUSIVE>                     {this.setValue(range, "include2", false);} ) )

      | (<PROPERTY>                                                         {property = new AdminProperty();this.appendValue(this.getValue(_attr, "properties"), "propertiesStack", property);}
                                    ( tmp = <STRING>                        {this.setValue(property, "name", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "name", this.getSingle(tmp.image));} )
              (   ( <PROPERTYVAL>   ( tmp = <STRING>                        {this.setValue(property, "value", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "value", this.getSingle(tmp.image));} ) )
                | ( <PROPERTYTO>    ( tmp = <ADMINTYPE_STRING>              {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                                    | tmp = <ADMINTYPE_SINGLE>              {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                    ( tmp = <STRING>                        {this.setValue(property, "refAdminName", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "refAdminName", this.getSingle(tmp.image));} ) ) )* )
    )*
}
