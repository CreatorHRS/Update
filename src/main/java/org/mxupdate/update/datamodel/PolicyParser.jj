/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.6";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(PolicyParser)

package org.mxupdate.update.datamodel;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.datamodel.Policy_mxJPO.Signature;
import org.mxupdate.update.datamodel.Policy_mxJPO.State;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO.Access;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Policy_mxJPO}.
 */
@SuppressWarnings("unused")
class PolicyParser
    extends AbstractParser_mxJPO<Policy_mxJPO>
{
}
PARSER_END(PolicyParser)

<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

<DEFAULT> TOKEN :
{
      <SYMBOLICNAME:                        "symbolicname">                                 : STRING_EXPECTED

    | <DESCRIPTION:                         "description">                                  : MULTILINESTRING_EXPECTED

    | <TYPE_ALL:                            "type" ([" ","\t","\n"])+ "all">                : DEFAULT
    | <TYPE_LIST:                           "type" ([" ","\t","\n"])+ "{">                  : LIST_EXPECTED
    | <TYPE:                                "type">                                         : STRING_EXPECTED

    | <FORMAT_ALL:                          "format" ([" ","\t","\n"])+ "all">              : DEFAULT
    | <FORMAT_LIST:                         "format" ([" ","\t","\n"])+ "{">                : LIST_EXPECTED
    | <FORMAT:                              "format">                                       : STRING_EXPECTED

    | <STORE:                               "store">                                        : STRING_EXPECTED
    | <DEFAULTFORMAT:                       "defaultformat">                                : STRING_EXPECTED
    | <ENFORCE_TRUE:                        "enforce">
    | <ENFORCE_TRUE_VIA_VALUE:              "enforce" ([" ","\t","\n","\r"])+ ["t","T"] ["r","R"] ["u","U"] ["e","E"]>
    | <ENFORCE_TRUE_VIA_VALUE_APOSTROPHE:   "enforce" ([" ","\t","\n","\r"])+ "\"" ["t","T"] ["r","R"] ["u","U"] ["e","E"] "\"">
    | <ENFORCE_FALSE:                       "!enforce">
    | <ENFORCE_FALSE_VIA_VALUE:             "enforce" ([" ","\t","\n","\r"])+ ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"]>
    | <ENFORCE_FALSE_VIA_VALUE_APOSTROPHE:  "enforce" ([" ","\t","\n","\r"])+ "\"" ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"] "\"">
    | <SEQUENCE:                            "sequence">                                     : STRING_EXPECTED
    | <MINORSEQUENCE:                       "minorsequence">                                : STRING_EXPECTED
    | <MAJORSEQUENCE:                       "majorsequence">                                : STRING_EXPECTED
    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_TRUE_VIA_VALUE:               "hidden" ([" ","\t","\n","\r"])+ ["t","T"] ["r","R"] ["u","U"] ["e","E"]>
    | <HIDDEN_TRUE_VIA_VALUE_APOSTROPHE:    "hidden" ([" ","\t","\n","\r"])+ "\"" ["t","T"] ["r","R"] ["u","U"] ["e","E"] "\"">
    | <HIDDEN_FALSE:                        "!hidden">
    | <HIDDEN_FALSE_VIA_VALUE:              "hidden" ([" ","\t","\n","\r"])+ ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"]>
    | <HIDDEN_FALSE_VIA_VALUE_APOSTROPHE:   "hidden" ([" ","\t","\n","\r"])+ "\"" ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"] "\"">
    | <ALLSTATE:                            "allstate">
}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u0009","\u000b"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/***************************************************** Common List of Strings */
<LIST_EXPECTED> TOKEN :
{
      <LISTSTRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : LIST_EXPECTED
    | <LISTSINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : LIST_EXPECTED
    | <LISTCLOSE : "}">   : DEFAULT
}

/********************************************************************** State */
<DEFAULT> TOKEN : /** State and depending signature and trigger Tokens */
{
      <STATE:                                           "state">                                                : STRING_EXPECTED
    | <REGISTEREDNAME:                                  "registeredName">                                       : STRING_EXPECTED

    | <REVISION_TRUE:                                   "revision">
    | <REVISION_TRUE_VIA_VALUE:                         "revision" ([" ","\t","\n","\r"])+ (["t","T"] ["r","R"] ["u","U"] ["e","E"])>
    | <REVISION_TRUE_VIA_VALUE_APOSTROPHE:              "revision" ([" ","\t","\n","\r"])+ ("\"" ["t","T"] ["r","R"] ["u","U"] ["e","E"] "\"")>
    | <REVISION_FALSE:                                  "!revision">
    | <REVISION_FALSE_VIA_VALUE:                        "revision" ([" ","\t","\n","\r"])+ (["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"])>
    | <REVISION_FALSE_VIA_VALUE_APOSTROPHE:             "revision" ([" ","\t","\n","\r"])+ ("\"" ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"] "\"")>

    | <MINORREVISION_TRUE:                              "minorrevision">
    | <MINORREVISION_TRUE_VIA_VALUE:                    "minorrevision" ([" ","\t","\n","\r"])+ (["t","T"] ["r","R"] ["u","U"] ["e","E"])>
    | <MINORREVISION_TRUE_VIA_VALUE_APOSTROPHE:         "minorrevision" ([" ","\t","\n","\r"])+ ("\"" ["t","T"] ["r","R"] ["u","U"] ["e","E"] "\"")>
    | <MINORREVISION_FALSE:                             "!minorrevision">
    | <MINORREVISION_FALSE_VIA_VALUE:                   "minorrevision" ([" ","\t","\n","\r"])+ (["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"])>
    | <MINORREVISION_FALSE_VIA_VALUE_APOSTROPHE:        "minorrevision" ([" ","\t","\n","\r"])+ ("\"" ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"] "\"")>

    | <MAJORREVISION_TRUE:                              "majorrevision">
    | <MAJORREVISION_TRUE_VIA_VALUE:                    "majorrevision" ([" ","\t","\n","\r"])+ (["t","T"] ["r","R"] ["u","U"] ["e","E"])>
    | <MAJORREVISION_TRUE_VIA_VALUE_APOSTROPHE:         "majorrevision" ([" ","\t","\n","\r"])+ ("\"" ["t","T"] ["r","R"] ["u","U"] ["e","E"] "\"")>
    | <MAJORREVISION_FALSE:                             "!majorrevision">
    | <MAJORREVISION_FALSE_VIA_VALUE:                   "majorrevision" ([" ","\t","\n","\r"])+ (["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"])>
    | <MAJORREVISION_FALSE_VIA_VALUE_APOSTROPHE:        "majorrevision" ([" ","\t","\n","\r"])+ ("\"" ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"] "\"")>

    | <VERSION_TRUE:                                    "version">
    | <VERSION_TRUE_VIA_VALUE:                          "version" ([" ","\t","\n","\r"])+ (["t","T"] ["r","R"] ["u","U"] ["e","E"])>
    | <VERSION_TRUE_VIA_VALUE_APOSTROPHE:               "version" ([" ","\t","\n","\r"])+ ("\"" ["t","T"] ["r","R"] ["u","U"] ["e","E"] "\"")>
    | <VERSION_FALSE:                                   "!version">
    | <VERSION_FALSE_VIA_VALUE:                         "version" ([" ","\t","\n","\r"])+ (["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"])>
    | <VERSION_FALSE_VIA_VALUE_APOSTROPHE:              "version" ([" ","\t","\n","\r"])+ ("\"" ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"] "\"")>

    | <PROMOTE_TRUE:                                    "promote">
    | <PROMOTE_TRUE_VIA_VALUE:                          "promote" ([" ","\t","\n","\r"])+ (["t","T"] ["r","R"] ["u","U"] ["e","E"])>
    | <PROMOTE_TRUE_VIA_VALUE_APOSTROPHE:               "promote" ([" ","\t","\n","\r"])+ ("\"" ["t","T"] ["r","R"] ["u","U"] ["e","E"] "\"")>
    | <PROMOTE_FALSE:                                   "!promote">
    | <PROMOTE_FALSE_VIA_VALUE:                         "promote" ([" ","\t","\n","\r"])+ (["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"])>
    | <PROMOTE_FALSE_VIA_VALUE_APOSTROPHE:              "promote" ([" ","\t","\n","\r"])+ ("\"" ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"] "\"")>

    | <CHECKOUTHISTORY_TRUE:                            "checkouthistory">
    | <CHECKOUTHISTORY_TRUE_VIA_VALUE:                  "checkouthistory" ([" ","\t","\n","\r"])+ (["t","T"] ["r","R"] ["u","U"] ["e","E"])>
    | <CHECKOUTHISTORY_TRUE_VIA_VALUE_APOSTROPHE:       "checkouthistory" ([" ","\t","\n","\r"])+ ("\"" ["t","T"] ["r","R"] ["u","U"] ["e","E"] "\"")>
    | <CHECKOUTHISTORY_FALSE:                           "!checkouthistory">
    | <CHECKOUTHISTORY_FALSE_VIA_VALUE:                 "checkouthistory" ([" ","\t","\n","\r"])+ (["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"])>
    | <CHECKOUTHISTORY_FALSE_VIA_VALUE_APOSTROPHE:      "checkouthistory" ([" ","\t","\n","\r"])+ ("\"" ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"] "\"")>

    | <ENFORCERESERVEACCESS_TRUE:                       "enforcereserveaccess">
    | <ENFORCERESERVEACCESS_TRUE_VIA_VALUE:             "enforcereserveaccess" ([" ","\t","\n","\r"])+ (["t","T"] ["r","R"] ["u","U"] ["e","E"])>
    | <ENFORCERESERVEACCESS_TRUE_VIA_VALUE_APOSTROPHE:  "enforcereserveaccess" ([" ","\t","\n","\r"])+ ("\"" ["t","T"] ["r","R"] ["u","U"] ["e","E"] "\"")>
    | <ENFORCERESERVEACCESS_FALSE:                      "!enforcereserveaccess">
    | <ENFORCERESERVEACCESS_FALSE_VIA_NOT:              "notenforcereserveaccess">
    | <ENFORCERESERVEACCESS_FALSE_VIA_VALUE:            "enforcereserveaccess" ([" ","\t","\n","\r"])+ (["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"])>
    | <ENFORCERESERVEACCESS_FALSE_VIA_VALUE_APOSTROPHE: "enforcereserveaccess" ([" ","\t","\n","\r"])+ ("\"" ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"] "\"")>

    | <PUBLISHED_TRUE:                                  "published">
    | <PUBLISHED_TRUE_VIA_VALUE:                        "published" ([" ","\t","\n","\r"])+ (["t","T"] ["r","R"] ["u","U"] ["e","E"])>
    | <PUBLISHED_TRUE_VIA_VALUE_APOSTROPHE:             "published" ([" ","\t","\n","\r"])+ ("\"" ["t","T"] ["r","R"] ["u","U"] ["e","E"] "\"")>
    | <PUBLISHED_FALSE:                                 "!published">
    | <PUBLISHED_FALSE_VIA_VALUE:                       "published" ([" ","\t","\n","\r"])+ (["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"])>
    | <PUBLISHED_FALSE_VIA_VALUE_APOSTROPHE:            "published" ([" ","\t","\n","\r"])+ ("\"" ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"] "\"")>

    | <REVOKE:                                          "revoke">
    | <LOGIN:                                           "login">
    | <OWNER:                                           "owner">                                                : STATEACCESS_EXPECTED
    | <PUBLIC:                                          "public">                                               : STATEACCESS_EXPECTED
    | <USER:                                            "user">                                                 : STATEACCESS_STRING_EXPECTED
    | <INPUT:                                           "input">                                                : STRING_EXPECTED
    | <APPROVE_LIST:                                    "approve" ([" ","\t","\n"])+ "{">                       : LIST_EXPECTED
    | <IGNORE_LIST:                                     "ignore" ([" ","\t","\n"])+ "{">                        : LIST_EXPECTED
    | <REJECT_LIST:                                     "reject" ([" ","\t","\n"])+ "{">                        : LIST_EXPECTED
    | <BRANCH:                                          "branch">                                               : STRING_EXPECTED
    | <SIGNATURE:                                       "signature">                                            : STRING_EXPECTED
}

/************************************************************ Legacy Triggers */
<DEFAULT> TOKEN :
{      <LEGACYACTION:                        "action">                                       : STRING_EXPECTED
    | <LEGACYCHECK:                         "check">                                        : STRING_EXPECTED
}

/******************************************************************* Triggers */
<DEFAULT> TOKEN :
{
      <TRIGGER:                             "trigger">                                      : TRIGEVENT_EXPECTED
}

/** Trigger Event */
<TRIGEVENT_EXPECTED> TOKEN :
{
      <TRIGEVENT:           (~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"])+>         : TRIGKIND_EXPECTED
}

/** Trigger Kind */
<TRIGKIND_EXPECTED> TOKEN :
{
      <ACTION:                              "action">                                       : STRING_EXPECTED
    | <CHECK:                               "check">                                        : STRING_EXPECTED
    | <OVERRIDE:                            "override">                                     : STRING_EXPECTED
}

/********************************************************************* Access */
<STATEACCESS_EXPECTED> TOKEN:
{
      <KEY:                                 "key" >                                                 : STATEACCESS_STRING_EXPECTED
    | <ACCESS:                              "{" ([" ","\t","\n","\r"])* (["a"-"z"]) (["a"-"z"," ","\t","\n","\r"])* "}">
                                                                                                    : DEFAULT
}
/** String within State Access */
<STATEACCESS_STRING_EXPECTED> TOKEN :
{
      <STATEACCESS_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STATEACCESS_EXPECTED
    | <STATEACCESS_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STATEACCESS_EXPECTED
}

/** After access definition back to default */
<DEFAULT> TOKEN:
{      <FILTER:                              "filter">                                               : STRING_EXPECTED
    | <LOCALFILTER:                         "localfilter">                                          : STRING_EXPECTED
    | <ORGANIZATION_ANY:                    "any"         ([" ","\t","\n","\r"])+ "organization">   : DEFAULT
    | <ORGANIZATION_SINGLE:                 "single"      ([" ","\t","\n","\r"])+ "organization">   : DEFAULT
    | <ORGANIZATION_ANCESTOR:               "ancestor"    ([" ","\t","\n","\r"])+ "organization">   : DEFAULT
    | <ORGANIZATION_DESCENDANT:             "descendant"  ([" ","\t","\n","\r"])+ "organization">   : DEFAULT
    | <ORGANIZATION_RELATED:                "related"     ([" ","\t","\n","\r"])+ "organization">   : DEFAULT
    | <PROJECT_ANY:                         "any"         ([" ","\t","\n","\r"])+ "project">        : DEFAULT
    | <PROJECT_SINGLE:                      "single"      ([" ","\t","\n","\r"])+ "project">        : DEFAULT
    | <PROJECT_ANCESTOR:                    "ancestor"    ([" ","\t","\n","\r"])+ "project">        : DEFAULT
    | <PROJECT_DESCENDANT:                  "descendant"  ([" ","\t","\n","\r"])+ "project">        : DEFAULT
    | <PROJECT_RELATED:                     "related"     ([" ","\t","\n","\r"])+ "project">        : DEFAULT
    | <OWNER_ANY:                           "any"         ([" ","\t","\n","\r"])+ "owner">          : DEFAULT
    | <OWNER_CONTEXT:                       "context"     ([" ","\t","\n","\r"])+ "owner">          : DEFAULT
    | <RESERVE_ANY:                         "any"         ([" ","\t","\n","\r"])+ "reserve">        : DEFAULT
    | <RESERVE_CONTEXT:                     "context"     ([" ","\t","\n","\r"])+ "reserve">        : DEFAULT
    | <RESERVE_NO:                          "no"          ([" ","\t","\n","\r"])+ "reserve">        : DEFAULT
    | <RESERVE_INCLUSIVE:                   "inclusive"   ([" ","\t","\n","\r"])+ "reserve">        : DEFAULT
    | <MATURITY_ANY:                        "any"         ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <MATURITY_NO:                         "no"          ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <MATURITY_PUBLIC:                     "public"      ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <MATURITY_PROTECTED:                  "protected"   ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <MATURITY_PRIVATE:                    "private"     ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <MATURITY_NOTPRIVATE:                 "notprivate"  ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <MATURITY_PPP:                        "ppp"         ([" ","\t","\n","\r"])+ "maturity">       : DEFAULT
    | <CATEGORY_ANY:                        "any"         ([" ","\t","\n","\r"])+ "category">       : DEFAULT
    | <CATEGORY_OEM:                        "oem"         ([" ","\t","\n","\r"])+ "category">       : DEFAULT
    | <CATEGORY_GOLDPARTNER:                "goldpartner" ([" ","\t","\n","\r"])+ "category">       : DEFAULT
    | <CATEGORY_PARTNER:                    "partner"     ([" ","\t","\n","\r"])+ "category">       : DEFAULT
    | <CATEGORY_SUPPLIER:                   "supplier"    ([" ","\t","\n","\r"])+ "category">       : DEFAULT
    | <CATEGORY_CUSTOMER:                   "customer"    ([" ","\t","\n","\r"])+ "category">       : DEFAULT
    | <CATEGORY_CONTRACTOR:                 "contractor"  ([" ","\t","\n","\r"])+ "category">       : DEFAULT
}

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : ADMINREF_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

<ADMINREF_EXPECTED> TOKEN :
{
      <ADMINTYPE_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <ADMINTYPE_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED
}

/******************************************************** Delimiter Character */
<DEFAULT> TOKEN:
{      <DELIMITER:                           "delimiter">                                    : DELIMITER_EXPECTED
}

<DELIMITER_EXPECTED> TOKEN :
{
      <DELIMITERSTRING : ( "\"" <DELIMITER_CHARSTR> "\"" )>  : DEFAULT
    | <DELIMITERSINGLE : ( <DELIMITER_CHARSTR> )>  : DEFAULT
    | <#DELIMITER_CHARSTR : ~["\u0000"-"\u0020","0"-"9","a"-"z","A"-"Z","?","*","'","\"","[","]","(",")"]>
}

/********************************************************************** Route */
<DEFAULT> TOKEN :
{      <ROUTE:                               "route" ([" ","\t","\n"])+ "{">                 : ROUTEUSER_EXPECTED
}

<ROUTEUSER_EXPECTED> TOKEN :
{
      <ROUTEUSERSTRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : ROUTEUSER_EXPECTED
    | <ROUTEUSERSINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : ROUTEUSER_EXPECTED
    | <ROUTEUSERCLOSE : "}">   : STRING_EXPECTED
}

/**************************************************************************** */

/**
 * Parses one complete policy definition.
 *
 * @param _policy   target policy to update with parsed values
 */
void parse(final Policy_mxJPO _policy)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    Token tmp;
    AdminProperty property;
    Access access = new Access();
} {
    (   ( <SYMBOLICNAME>            ( tmp = <STRING>                        {this.appendValue(_policy, "symbolicNames",                     this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_policy, "symbolicNames",                     this.getSingle(tmp.image));} ) )

      | ( <DESCRIPTION>             ( tmp = <MULTILINESTRING>               {this.setValue(_policy, "description",                          this.getString(tmp.image));}
                                    | tmp = <MULTILINESINGLE>               {this.setValue(_policy, "description",                          this.getSingle(tmp.image));} ) )

      | ( <FORMAT_ALL>                                                      {this.setValue(_policy, "allFormats",                           true);} )
      | ( <FORMAT_LIST>             ( tmp = <LISTSTRING>                    {this.appendValue(_policy, "formats",                           this.getString(tmp.image));}
                                    | tmp = <LISTSINGLE>                    {this.appendValue(_policy, "formats",                           this.getSingle(tmp.image));} )* <LISTCLOSE>)
      | ( <FORMAT>                  ( tmp = <STRING>                        {this.appendValue(_policy, "formats",                           this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_policy, "formats",                           this.getSingle(tmp.image));} ) )


      | ( <TYPE_ALL>                                                        {this.setValue(_policy, "allTypes",                             true);} )
      | ( <TYPE_LIST>               ( tmp = <LISTSTRING>                    {this.appendValue(_policy, "types",                             this.getString(tmp.image));}
                                    | tmp = <LISTSINGLE>                    {this.appendValue(_policy, "types",                             this.getSingle(tmp.image));} )* <LISTCLOSE>)
      | ( <TYPE>                    ( tmp = <STRING>                        {this.appendValue(_policy, "types",                             this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(_policy, "types",                             this.getSingle(tmp.image));} ) )

      | ( <DEFAULTFORMAT>           ( tmp = <STRING>                        {this.setValue(_policy, "defaultFormat",                        this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_policy, "defaultFormat",                        this.getSingle(tmp.image));} ) )

      | ( (   <ENFORCE_TRUE>
            | <ENFORCE_TRUE_VIA_VALUE>
            | <ENFORCE_TRUE_VIA_VALUE_APOSTROPHE> )                         {this.setValue(_policy, "enforce",                              true);} )
      | ( (   <ENFORCE_FALSE>
            | <ENFORCE_FALSE_VIA_VALUE>
            | <ENFORCE_FALSE_VIA_VALUE_APOSTROPHE> )                        {this.setValue(_policy, "enforce",                              false);} )

      | ( <DELIMITER>               ( tmp = <DELIMITERSTRING>               {this.setValue(_policy, "delimiter",                            this.getString(tmp.image));}
                                    | tmp = <DELIMITERSINGLE>               {this.setValue(_policy, "delimiter",                            this.getSingle(tmp.image));} ) )

      | ( ( <SEQUENCE> | <MINORSEQUENCE> )
                                    ( tmp = <STRING>                        {this.setValue(_policy, "minorsequence",                        this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_policy, "minorsequence",                        this.getSingle(tmp.image));} ) )
      | ( <MAJORSEQUENCE>           ( tmp = <STRING>                        {this.setValue(_policy, "majorsequence",                        this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_policy, "majorsequence",                        this.getSingle(tmp.image));} ) )

      | ( <STORE>                   ( tmp = <STRING>                        {this.setValue(_policy, "store",                                this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_policy, "store",                                this.getSingle(tmp.image));} ) )

      | ( (   <HIDDEN_TRUE>
            | <HIDDEN_TRUE_VIA_VALUE>
            | <HIDDEN_TRUE_VIA_VALUE_APOSTROPHE> )                          {this.setValue(_policy, "hidden",                               true);} )
      | ( (   <HIDDEN_FALSE>
            | <HIDDEN_FALSE_VIA_VALUE>
            | <HIDDEN_FALSE_VIA_VALUE_APOSTROPHE> )                         {this.setValue(_policy, "hidden",                               false);} )

      | ( <ALLSTATE> "{"                                                    {this.setValue(_policy, "allState",                             true);}
               ( ( <REVOKE>                                                 {this.setValue(access, "revoke",                                true);} ) ?
                 ( <LOGIN>                                                  {this.setValue(access, "login",                                 true);} ) ?
                        ( <OWNER>                                           {this.setValue(access, "kind",                                  "owner");}
                        | <PUBLIC>                                          {this.setValue(access, "kind",                                  "public");}
                        | <USER>    ( tmp = <STATEACCESS_STRING>            {this.setValue(access, "kind", "user");this.setValue(access, "userRef", this.getString(tmp.image));}
                                    | tmp = <STATEACCESS_SINGLE>            {this.setValue(access, "kind", "user");this.setValue(access, "userRef", this.getSingle(tmp.image));} ) )
                                                stateAccessDef(access)      {this.appendValue(_policy, "allStateAccess", "accessList", access);/*reset*/access = new Access();} )*
                                                        "}" )

      | ( state(_policy) )

      | ( <PROPERTY>                                                        {property = new AdminProperty();this.appendValue(_policy, "properties", "propertiesStack", property);}
                                    ( tmp = <STRING>                        {this.setValue(property, "name", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "name", this.getSingle(tmp.image));} )
              (   ( <PROPERTYVAL>   ( tmp = <STRING>                        {this.setValue(property, "value", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "value", this.getSingle(tmp.image));} ) )
                | ( <PROPERTYTO>    ( tmp = <ADMINTYPE_STRING>              {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                                    | tmp = <ADMINTYPE_SINGLE>              {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                    ( tmp = <STRING>                        {this.setValue(property, "refAdminName", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "refAdminName", this.getSingle(tmp.image));} ) ) )* )
    )*
}

/**
 * Parses one state definition.
 *
 * @param _policy   policy for which the all state definition is parsed
 */
void state(final Policy_mxJPO _policy) : {
    final State state = new State();
    Set<String> tmpSet;
    Token tmp;
    Trigger trigger;
    Signature signature;
    AdminProperty property;
    Access access = new Access();
} {
    ( <STATE>                       ( tmp = <STRING>                        {this.setValue(state, "name", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(state, "name", this.getSingle(tmp.image));} ) )
    "{"
      ( ( <REGISTEREDNAME>          ( tmp = <STRING>                        {this.appendValue(state, "symbolicNames", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.appendValue(state, "symbolicNames", this.getSingle(tmp.image));} ) )

      | ( ( <MINORREVISION_TRUE>
          | <MINORREVISION_TRUE_VIA_VALUE>
          | <MINORREVISION_TRUE_VIA_VALUE_APOSTROPHE>
          | <REVISION_TRUE>
          | <REVISION_TRUE_VIA_VALUE>
          | <REVISION_TRUE_VIA_VALUE_APOSTROPHE>)                           {this.setValue(state, "minorrevisionable", true);} )
      | ( ( <MINORREVISION_FALSE>
          | <MINORREVISION_FALSE_VIA_VALUE>
          | <MINORREVISION_FALSE_VIA_VALUE_APOSTROPHE>
          | <REVISION_FALSE>
          | <REVISION_FALSE_VIA_VALUE>
          | <REVISION_FALSE_VIA_VALUE_APOSTROPHE>)                          {this.setValue(state, "minorrevisionable", false);} )

      | ( ( <MAJORREVISION_TRUE>
          | <MAJORREVISION_TRUE_VIA_VALUE>
          | <MAJORREVISION_TRUE_VIA_VALUE_APOSTROPHE>)                      {this.setValue(state, "majorrevisionable", true);} )
      | ( ( <MAJORREVISION_FALSE>
          | <MAJORREVISION_FALSE_VIA_VALUE>
          | <MAJORREVISION_FALSE_VIA_VALUE_APOSTROPHE>)                     {this.setValue(state, "majorrevisionable", false);} )

      | ( ( <VERSION_TRUE>
          | <VERSION_TRUE_VIA_VALUE>
          | <VERSION_TRUE_VIA_VALUE_APOSTROPHE>)                            {this.setValue(state, "versionable", true);} )
      | ( ( <VERSION_FALSE>
          | <VERSION_FALSE_VIA_VALUE>
          | <VERSION_FALSE_VIA_VALUE_APOSTROPHE>)                           {this.setValue(state, "versionable", false);} )

      | ( ( <PROMOTE_TRUE>
          | <PROMOTE_TRUE_VIA_VALUE>
          | <PROMOTE_TRUE_VIA_VALUE_APOSTROPHE>)                            {this.setValue(state, "autoPromotion", true);} )
      | ( ( <PROMOTE_FALSE>
          | <PROMOTE_FALSE_VIA_VALUE>
          | <PROMOTE_FALSE_VIA_VALUE_APOSTROPHE>)                           {this.setValue(state, "autoPromotion", false);} )

      | ( ( <CHECKOUTHISTORY_TRUE>
          | <CHECKOUTHISTORY_TRUE_VIA_VALUE>
          | <CHECKOUTHISTORY_TRUE_VIA_VALUE_APOSTROPHE>)                    {this.setValue(state, "checkoutHistory", true);} )
      | ( ( <CHECKOUTHISTORY_FALSE>
          | <CHECKOUTHISTORY_FALSE_VIA_VALUE>
          | <CHECKOUTHISTORY_FALSE_VIA_VALUE_APOSTROPHE>)                   {this.setValue(state, "checkoutHistory", false);} )

      | ( ( <ENFORCERESERVEACCESS_TRUE>
          | <ENFORCERESERVEACCESS_TRUE_VIA_VALUE>
          | <ENFORCERESERVEACCESS_TRUE_VIA_VALUE_APOSTROPHE>)               {this.setValue(state, "enforcereserveaccess", true);} )
      | ( ( <ENFORCERESERVEACCESS_FALSE>
          | <ENFORCERESERVEACCESS_FALSE_VIA_NOT>
          | <ENFORCERESERVEACCESS_FALSE_VIA_VALUE>
          | <ENFORCERESERVEACCESS_FALSE_VIA_VALUE_APOSTROPHE>)              {this.setValue(state, "enforcereserveaccess", false);} )

      | ( ( <PUBLISHED_TRUE>
          | <PUBLISHED_TRUE_VIA_VALUE>
          | <PUBLISHED_TRUE_VIA_VALUE_APOSTROPHE>)                          {this.setValue(state, "published", true);} )
      | ( ( <PUBLISHED_FALSE>
          | <PUBLISHED_FALSE_VIA_VALUE>
          | <PUBLISHED_FALSE_VIA_VALUE_APOSTROPHE>)                         {this.setValue(state, "published", false);} )

      | ( ( <REVOKE>                                                        {this.setValue(access, "revoke", true);} ) ?
          ( <LOGIN>                                                         {this.setValue(access, "login", true);} ) ?
                    ( <OWNER>                                               {this.setValue(access, "kind", "owner");}
                    | <PUBLIC>                                              {this.setValue(access, "kind", "public");}
                    | <USER>    ( tmp = <STATEACCESS_STRING>                {this.setValue(access, "kind", "user");this.setValue(access, "userRef", this.getString(tmp.image));}
                                | tmp = <STATEACCESS_SINGLE>                {this.setValue(access, "kind", "user");this.setValue(access, "userRef", this.getSingle(tmp.image));} ) )
                                            stateAccessDef(access)          {this.appendValue(state, "access", "accessList", access);/*reset*/access = new Access();} )

      | ( <LEGACYACTION>      ( tmp = <STRING>                              {this.setValue(state, "actionProgram",                          this.getString(tmp.image));}
                              | tmp = <SINGLE>                              {this.setValue(state, "actionProgram",                          this.getSingle(tmp.image));} )
                     <INPUT>  ( tmp = <STRING>                              {this.setValue(state, "actionInput",                            this.getString(tmp.image));}
                              | tmp = <SINGLE>                              {this.setValue(state, "actionInput",                            this.getSingle(tmp.image));} ) )
      | ( <LEGACYCHECK>       ( tmp = <STRING>                              {this.setValue(state, "checkProgram",                           this.getString(tmp.image));}
                              | tmp = <SINGLE>                              {this.setValue(state, "checkProgram",                           this.getSingle(tmp.image));} )
                     <INPUT>  ( tmp = <STRING>                              {this.setValue(state, "checkInput",                             this.getString(tmp.image));}
                              | tmp = <SINGLE>                              {this.setValue(state, "checkInput",                             this.getSingle(tmp.image));} ) )

      | ( <ROUTE>      ( tmp = <ROUTEUSERSTRING>                            {this.appendValue(state, "routeUsers",                          this.getString(tmp.image));}
                       | tmp = <ROUTEUSERSINGLE>                            {this.appendValue(state, "routeUsers",                          this.getSingle(tmp.image));} )* <ROUTEUSERCLOSE>
                                    ( tmp = <STRING>                        {this.setValue(state, "routeMessage",                           this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(state, "routeMessage",                           this.getSingle(tmp.image));} ) )

      | ( <TRIGGER>                                                         {trigger = new Trigger();this.appendValue(state, "triggers", "triggersStack", trigger);}
            tmp = <TRIGEVENT>                                               {this.setValue(trigger, "eventType",                            this.getSingle(tmp.image));}
                    ( <ACTION>                                              {this.setValue(trigger, "kind",                                 "action");}
                    | <CHECK>                                               {this.setValue(trigger, "kind",                                 "check");}
                    | <OVERRIDE>                                            {this.setValue(trigger, "kind",                                 "override");} )
                            ( tmp = <STRING>                                {this.setValue(trigger, "program",                              this.getString(tmp.image));}
                            | tmp = <SINGLE>                                {this.setValue(trigger, "program",                              this.getSingle(tmp.image));} )
                                    ( <INPUT>
                                            ( tmp = <STRING>                {this.setValue(trigger, "arguments",                            this.getString(tmp.image));}
                                            | tmp = <SINGLE>                {this.setValue(trigger, "arguments",                            this.getSingle(tmp.image));} ) )?  )

      | ( <SIGNATURE>                                                       {signature = new Signature();this.appendValue(state, "signatures", signature);}
                ( tmp = <STRING>                                            {this.setValue(signature, "name",                               this.getString(tmp.image));}
                | tmp = <SINGLE>                                            {this.setValue(signature, "name",                               this.getSingle(tmp.image));} )
                    "{" ( (<BRANCH>         ( tmp = <STRING>                {this.setValue(signature, "branch",                             this.getString(tmp.image));}
                                            | tmp = <SINGLE>                {this.setValue(signature, "branch",                             this.getSingle(tmp.image));} ) )
                        | (<APPROVE_LIST>   ( tmp = <LISTSTRING>            {this.appendValue(signature, "approverUsers",                   this.getString(tmp.image));}
                                            | tmp = <LISTSINGLE>            {this.appendValue(signature, "approverUsers",                   this.getSingle(tmp.image));} )* <LISTCLOSE>)
                        | (<IGNORE_LIST>    ( tmp = <LISTSTRING>            {this.appendValue(signature, "ignoreUsers",                     this.getString(tmp.image));}
                                            | tmp = <LISTSINGLE>            {this.appendValue(signature, "ignoreUsers",                     this.getSingle(tmp.image));} )* <LISTCLOSE>)
                        | (<REJECT_LIST>    ( tmp = <LISTSTRING>            {this.appendValue(signature, "rejectUsers",                     this.getString(tmp.image));}
                                            | tmp = <LISTSINGLE>            {this.appendValue(signature, "rejectUsers",                     this.getSingle(tmp.image));} )* <LISTCLOSE>)
                        | (<FILTER>         ( tmp = <STRING>                {this.setValue(signature, "filter",                             this.getString(tmp.image));}
                                            | tmp = <SINGLE>                {this.setValue(signature, "filter",                             this.getSingle(tmp.image));} ) ) )* "}" )

      | ( <PROPERTY>                                                        {property = new AdminProperty();this.appendValue(state, "properties", "propertiesStack", property);}
                                    ( tmp = <STRING>                        {this.setValue(property, "name", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "name", this.getSingle(tmp.image));} )
              (   ( <PROPERTYVAL>   ( tmp = <STRING>                        {this.setValue(property, "value", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "value", this.getSingle(tmp.image));} ) )
                | ( <PROPERTYTO>    ( tmp = <ADMINTYPE_STRING>              {this.setValue(property, "refAdminType", this.getString(tmp.image));}
                                    | tmp = <ADMINTYPE_SINGLE>              {this.setValue(property, "refAdminType", this.getSingle(tmp.image));} )
                                    ( tmp = <STRING>                        {this.setValue(property, "refAdminName", this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(property, "refAdminName", this.getSingle(tmp.image));} ) ) )* )
    )* "}"
    {
        this.appendValue(_policy, "states", state);
    }
}

void stateAccessDef(final Access _access) : {
    Token tmp;
    Token access = null;
} {
    (
          ( <KEY>                   ( tmp = <STATEACCESS_STRING>            {this.setValue(_access, "key",                                  this.getString(tmp.image));}
                                    | tmp = <STATEACCESS_SINGLE>            {this.setValue(_access, "key",                                  this.getSingle(tmp.image));} ) )

        | ( <FILTER>                ( tmp = <STRING>                        {this.setValue(_access, "filter",                               this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_access, "filter",                               this.getSingle(tmp.image));} ) )

        | ( <LOCALFILTER>           ( tmp = <STRING>                        {this.setValue(_access, "localfilter",                          this.getString(tmp.image));}
                                    | tmp = <SINGLE>                        {this.setValue(_access, "localfilter",                          this.getSingle(tmp.image));} ) )

        | ( access = <ACCESS> )

        | ( <ORGANIZATION_ANY>                                              {this.setValue(_access, "organization",                         "any");} )
        | ( <ORGANIZATION_SINGLE>                                           {this.setValue(_access, "organization",                         "single");} )
        | ( <ORGANIZATION_ANCESTOR>                                         {this.setValue(_access, "organization",                         "ancestor");} )
        | ( <ORGANIZATION_DESCENDANT>                                       {this.setValue(_access, "organization",                         "descendant");} )
        | ( <ORGANIZATION_RELATED>                                          {this.setValue(_access, "organization",                         "related");} )

        | ( <PROJECT_ANY>                                                   {this.setValue(_access, "project",                              "any");} )
        | ( <PROJECT_SINGLE>                                                {this.setValue(_access, "project",                              "single");} )
        | ( <PROJECT_ANCESTOR>                                              {this.setValue(_access, "project",                              "ancestor");} )
        | ( <PROJECT_DESCENDANT>                                            {this.setValue(_access, "project",                              "descendant");} )
        | ( <PROJECT_RELATED>                                               {this.setValue(_access, "project",                              "related");} )

        | ( <OWNER_ANY>                                                     {this.setValue(_access, "owner",                                "any");} )
        | ( <OWNER_CONTEXT>                                                 {this.setValue(_access, "owner",                                "context");} )

        | ( <RESERVE_ANY>                                                   {this.setValue(_access, "reserve",                              "any");} )
        | ( <RESERVE_CONTEXT>                                               {this.setValue(_access, "reserve",                              "context");} )
        | ( <RESERVE_NO>                                                    {this.setValue(_access, "reserve",                              "no");} )
        | ( <RESERVE_INCLUSIVE>                                             {this.setValue(_access, "reserve",                              "inclusive");} )

        | ( <MATURITY_ANY>                                                  {this.setValue(_access, "maturity",                             "any");} )
        | ( <MATURITY_NO>                                                   {this.setValue(_access, "maturity",                             "no");} )
        | ( <MATURITY_PUBLIC>                                               {this.setValue(_access, "maturity",                             "public");} )
        | ( <MATURITY_PROTECTED>                                            {this.setValue(_access, "maturity",                             "protected");} )
        | ( <MATURITY_PRIVATE>                                              {this.setValue(_access, "maturity",                             "private");} )
        | ( <MATURITY_NOTPRIVATE>                                           {this.setValue(_access, "maturity",                             "notprivate");} )
        | ( <MATURITY_PPP>                                                  {this.setValue(_access, "maturity",                             "ppp");} )

        | ( <CATEGORY_ANY>                                                  {this.setValue(_access, "category",                             "any");} )
        | ( <CATEGORY_OEM>                                                  {this.setValue(_access, "category",                             "oem");} )
        | ( <CATEGORY_GOLDPARTNER>                                          {this.setValue(_access, "category",                             "goldpartner");} )
        | ( <CATEGORY_PARTNER>                                              {this.setValue(_access, "category",                             "partner");} )
        | ( <CATEGORY_SUPPLIER>                                             {this.setValue(_access, "category",                             "supplier");} )
        | ( <CATEGORY_CUSTOMER>                                             {this.setValue(_access, "category",                             "customer");} )
        | ( <CATEGORY_CONTRACTOR>                                           {this.setValue(_access, "category",                             "contractor");} )
    )*
    {
        if (access != null)  {
            final String tmpStr = access.image
                    .replaceFirst("^\\{", "").replaceFirst("\\}$", "")  // remove {}
                    .replaceAll("(\t)|(\n)", " ")                       // replace tabs, new lines
                    .replaceAll("( )+", " ")                            // multiple spaces => one space
                    .trim();                                            // remove trailing spaces
            this.appendValues(_access, "access", Arrays.asList(tmpStr.split(" ")));
        }
    }
}
