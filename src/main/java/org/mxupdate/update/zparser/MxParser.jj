/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.7";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(MxParser)
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.zparser;

import java.lang.reflect.InvocationTargetException;
import java.util.Set;

import org.mxupdate.update.datamodel.AttributeCI_mxJPO;
import org.mxupdate.update.datamodel.Dimension_mxJPO;
import org.mxupdate.update.datamodel.Expression_mxJPO;
import org.mxupdate.update.datamodel.Format_mxJPO;
import org.mxupdate.update.datamodel.Interface_mxJPO;
import org.mxupdate.update.datamodel.PathType_mxJPO;
import org.mxupdate.update.datamodel.helper.LocalAttributeList_mxJPO.LocalAttribute;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.program.Page_mxJPO;
import org.mxupdate.update.program.ProgramCI_mxJPO;
import org.mxupdate.update.system.IndexCI_mxJPO;
import org.mxupdate.update.system.PackageCI_mxJPO;
import org.mxupdate.update.system.UniqueKeyCI_mxJPO;
import org.mxupdate.update.user.Association_mxJPO;
import org.mxupdate.update.user.Group_mxJPO;
import org.mxupdate.update.user.PersonCI_mxJPO;
import org.mxupdate.update.user.PersonCI_mxJPO.TypeItem;
import org.mxupdate.update.user.Role_mxJPO;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.ExpressionType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.SortType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.Setting;
import org.mxupdate.update.userinterface.Channel_mxJPO;
import org.mxupdate.update.userinterface.Command_mxJPO;
import org.mxupdate.update.userinterface.Form_mxJPO;
import org.mxupdate.update.userinterface.Inquiry_mxJPO;
import org.mxupdate.update.userinterface.Menu_mxJPO;
import org.mxupdate.update.userinterface.Portal_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO.Column;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.AbstractRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.ChannelRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.CommandRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.MenuRef;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Channel_mxJPO}.
 */
@SuppressWarnings("unused")
public class MxParser
    extends AbstractParser_mxJPO
{
}

PARSER_END(MxParser)

<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

TOKEN : /** first level */
{
      <ABSTRACT_TRUE:                       "abstract">                 | <ABSTRACT_FALSE:                      "!abstract">
    | <ACTIVE_TRUE:                         "active">                   | <ACTIVE_FALSE:                        "!active">
    | <CUSTOM_TRUE:                         "custom">                   | <CUSTOM_FALSE:                        "!custom">
    | <DOWNLOADABLE_TRUE:                   "downloadable">             | <DOWNLOADABLE_FALSE:                  "!downloadable">
    | <EMAIL_TRUE:                          "email">                    | <EMAIL_FALSE:                         "!email">
    | <ENABLE_TRUE:                         "enable">                   | <ENABLE_FALSE:                        "!enable">
    | <GLOBAL_TRUE:                         "global">                   | <GLOBAL_FALSE:                        "!global">
    | <HIDDEN_TRUE:                         "hidden">                   | <HIDDEN_FALSE:                        "!hidden">
    | <INCONMAIL_TRUE:                      "iconmail">                 | <INCONMAIL_FALSE:                     "!iconmail">
    | <MULTILINE_TRUE:                      "multiline">                | <MULTILINE_FALSE:                     "!multiline">
    | <MULTIVALUE_TRUE:                     "multivalue">               | <MULTIVALUE_FALSE:                    "!multivalue">
    | <NEEDSBUSINESSOBJECT_TRUE:            "needsbusinessobject">      | <NEEDSBUSINESSOBJECT_FALSE:           "!needsbusinessobject">
    | <PIPE_TRUE:                           "pipe">                     | <PIPE_FALSE:                          "!pipe">
    | <POOLED_TRUE:                         "pooled">                   | <POOLED_FALSE:                        "!pooled">
    | <RANGEVALUE_TRUE:                     "rangevalue">               | <RANGEVALUE_FALSE:                    "!rangevalue">
    | <RESETONCLONE_TRUE:                   "resetonclone">             | <RESETONCLONE_FALSE:                  "!resetonclone">
    | <RESETONREVISION_TRUE:                "resetonrevision">          | <RESETONREVISION_FALSE:               "!resetonrevision">
    | <TREEMENU_TRUE:                       "treemenu">                 | <TREEMENU_FALSE:                      "!treemenu">
    | <TRUSTED_TRUE:                        "trusted">                  | <TRUSTED_FALSE:                       "!trusted">
    | <UNIQUE_TRUE:                         "unique">                   | <UNIQUE_FALSE:                        "!unique">

    | <DEFERRED:                            "deferred">                                     : DEFAULT
    | <EXECUTE:                             "execute">                                      : DEFAULT
    | <IMMEDIATE:                           "immediate">                                    : DEFAULT
    | <LOCAL:                               "local">                                        : DEFAULT
    | <NEWROW:                              "newrow">                                       : DEFAULT

    | <HEIGHT:                              "height">                                       : NATURALNUMBER_EXPECTED
    | <MAXLENGTH:                           "maxlength">                                    : NATURALNUMBER_EXPECTED
    | <SIZE:                                "size">                                         : NATURALNUMBER_EXPECTED

    | <SETTING:                             ("add" ([" ","\t","\n","\r"])+ )? "setting">    : STRING_STRING_EXPECTED
    | <ARGUMENT:                            "argument">                                     : STRING_STRING_EXPECTED

    | <ADDRESS:                             "address">                                      : STRING_EXPECTED
    | <ALT:                                 "alt">                                          : STRING_EXPECTED
    | <APPLICATION:                         "application" >                                 : STRING_EXPECTED
    | <ATTRIBUTE:                           "attribute">                                    : STRING_EXPECTED
    | <CHANNEL:                             "channel">                                      : STRING_EXPECTED
    | <COMMAND:                             ("add" ([" ","\t","\n","\r"])+ )? "command">    : STRING_EXPECTED
    | <DEFINITION:                          "definition">                                   : STRING_EXPECTED
    | <DERIVED:                             "derived">                                      : STRING_EXPECTED
    | <DIMENSION:                           "dimension">                                    : STRING_EXPECTED
    | <EDIT:                                "edit">                                         : STRING_EXPECTED
    | <EMAILADDRESS:                        "emailaddress">                                 : STRING_EXPECTED
    | <FAX:                                 "fax">                                          : STRING_EXPECTED
    | <FILE:                                "file">                                         : STRING_EXPECTED
    | <FORMAT:                              "format">                                       : STRING_EXPECTED
    | <FULLNAME:                            "fullname">                                     : STRING_EXPECTED
    | <GROUP:                               "group" >                                       : STRING_EXPECTED
    | <HREF:                                "href">                                         : STRING_EXPECTED
    | <INPUT:                               "input">                                        : STRING_EXPECTED
    | <LABEL:                               "label">                                        : STRING_EXPECTED
    | <MENU:                                ("add" ([" ","\t","\n","\r"])+ )? "menu">       : STRING_EXPECTED
    | <MIME:                                "mime">                                         : STRING_EXPECTED
    | <PACKAGE:                             "package">                                      : STRING_EXPECTED
    | <PARENT:                              "parent">                                       : STRING_EXPECTED
    | <PATTERN:                             "pattern">                                      : STRING_EXPECTED
    | <PHONE:                               "phone">                                        : STRING_EXPECTED
    | <PRINT:                               "print">                                        : STRING_EXPECTED
    | <ROLE:                                "role" >                                        : STRING_EXPECTED
    | <RULE:                                "rule">                                         : STRING_EXPECTED
    | <SITE:                                "site">                                         : STRING_EXPECTED
    | <SUFFIX:                              "suffix">                                       : STRING_EXPECTED
    | <SYMBOLICNAME:                        "symbolicname">                                 : STRING_EXPECTED
    | <USER:                                ("add" ([" ","\t","\n","\r"])+ )? "user">       : STRING_EXPECTED
    | <USESPACKAGE:                         "usespackage">                                  : STRING_EXPECTED
    | <UUID:                                "uuid">                                         : STRING_EXPECTED
    | <VAULT:                               "vault" >                                       : STRING_EXPECTED
    | <VERSION:                             "version">                                      : STRING_EXPECTED
    | <VIEW:                                "view">                                         : STRING_EXPECTED

    | <CODE:                                "code">                                         : MULTILINESTRING_EXPECTED
    | <COMMENT:                             "comment">                                      : MULTILINESTRING_EXPECTED
    | <CONTENT:                             "content">                                      : MULTILINESTRING_EXPECTED
    | <DEFAULTVALUE:                        "default">                                      : MULTILINESTRING_EXPECTED
    | <DESCRIPTION:                         "description">                                  : MULTILINESTRING_EXPECTED
}

/******************************************************* Common String String */

<STRING_STRING_EXPECTED> TOKEN :
{
      <STRING_STRING_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <STRING_STRING_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED

}

String stringString() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <STRING_STRING_STRING>  {ret = this.getString(tmp.image);}
    | tmp = <STRING_STRING_SINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}

/************************************************************** Common String */
<STRING_EXPECTED, FIELD_OPEN_EXPECTED, TYPE_OPEN_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

String string() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <STRING>  {ret = this.getString(tmp.image);}
    | tmp = <SINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\n" | "\t" | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" | "\\t" | "\\u" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

String multiLineString() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <MULTILINESTRING>  {ret = this.getString(tmp.image);}
    | tmp = <MULTILINESINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}

/************************************************************* Common Integer */
<NATURALNUMBER_EXPECTED> TOKEN :
{
      <NATURALNUMBER: (("0") | (["1"-"9"](["0"-"9"])*))> : DEFAULT
}

Integer naturalNumber() :
{
    Token tmp;
}
{
    tmp = <NATURALNUMBER>
    {return Integer.valueOf(tmp.image);}
}

/************************************************************ Common Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : STRING_STRING_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

AdminProperty uuidProperty() :
{
    String str;
    AdminProperty property = new AdminProperty();
}
{
    str = string()
    {this.setValue(property, "value", str);}
    {this.setValue(property, "name",  "UUID");}
    {return property;}
}

AdminProperty settingProperty() :
{
    String name, value;
    Token tmp;
    AdminProperty property = new AdminProperty();
}
{
    name = stringString()
    value = string()

    {this.setValue(property, "name", "%" + name);}
    {this.setValue(property, "value", value);}
    {return property;}
}

AdminProperty property() :
{
    String str1,str2;
    Token tmp;
    AdminProperty property = new AdminProperty();
}
{
    str1 = string()                                             {this.setValue(property, "name", str1);}
    ( ( <PROPERTYVAL>  str1 = string()                          {this.setValue(property, "value", str1);} )
    | ( <PROPERTYTO>   str1 = stringString()  str2 = string()   {this.setValue(property, "refAdminType", str1);this.setValue(property, "refAdminName", str2);} ) )*
    {return property;}
}

/**************************************************************** Common Kind */
<DEFAULT> TOKEN :
{
      <KIND:                                "kind">                                         : KIND_EXPECTED
}

<KIND_EXPECTED> TOKEN :
{
    // Data Model -> Attribute
      <KIND_BINARY:                         "binary">                                       : DEFAULT
    | <KIND_BOOLEAN:                        "boolean">                                      : DEFAULT
    | <KIND_DATE:                           "date">                                         : DEFAULT
    | <KIND_INTEGER:                        "integer">                                      : DEFAULT
    | <KIND_REAL:                           "real">                                         : DEFAULT
    | <KIND_STRING:                         "string">                                       : DEFAULT
    // Program -> Program
    | <KIND_EKL:                            "ekl">                                          : DEFAULT
    | <KIND_EXTERNAL:                       "external">                                     : DEFAULT
    | <KIND_JAVA:                           "java">                                         : DEFAULT
    | <KIND_MQL:                            "mql">                                          : DEFAULT
    // User -> Role
    | <KIND_ORGANIZATION:                   "organization">                                 : DEFAULT
    | <KIND_PROJECT:                        "project">                                      : DEFAULT
    | <KIND_ROLE:                           "role">                                         : DEFAULT
}

/************************************************************ Common Triggers */
<DEFAULT> TOKEN :
{
      <TRIGGER:                             "trigger">                                      : TRIGEVENT_EXPECTED
}
/** Trigger Event */
<TRIGEVENT_EXPECTED> TOKEN :
{
      <TRIGEVENT:           (~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"])+>         : TRIGKIND_EXPECTED
}
/** Trigger Kind */
<TRIGKIND_EXPECTED> TOKEN :
{
      <ACTION:                              "action">                                       : STRING_EXPECTED
    | <CHECK:                               "check">                                        : STRING_EXPECTED
    | <OVERRIDE:                            "override">                                     : STRING_EXPECTED
}

Trigger trigger() :
{
    String str;
    Token tmp;
    Trigger trigger = new Trigger();
}
{
    tmp = <TRIGEVENT>           {this.setValue(trigger, "eventType", this.getSingle(tmp.image));}
    ( <ACTION>                  {this.setValue(trigger, "kind", "action");}
    | <CHECK>                   {this.setValue(trigger, "kind", "check");}
    | <OVERRIDE>                {this.setValue(trigger, "kind", "override");} )
    str = string()              {this.setValue(trigger, "program", str);}
    ( <INPUT> str = string()    {this.setValue(trigger, "arguments",            str);} )?

    {return trigger;}
}

/************************************************************ Local Attribute */
/**
 * Parses the local attribute definition.
 */
LocalAttribute localAttribute()
    throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    LocalAttribute localAttr = new LocalAttribute();
}
{
    str = string()                                                              {localAttr.setLocalName(str);}
    "{"
        parseAttribute(localAttr)
    "}"
    {return localAttr;}
}

/**************************************************** Data Model -> Attribute */

/**
 * Parses one complete attribute definition.
 *
 * @param _attribute    target attribute to update with parsed values
 */
void parseAttribute(final AttributeCI_mxJPO _attr)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Integer number;
    Token tmp;
    Trigger trigger;
    AttributeCI_mxJPO.Range range;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_attr, "packageRef",             str);} )
      | ( <KIND>                    ( <KIND_BINARY>                             {this.setValue(_attr, "kind", AttributeCI_mxJPO.Kind.Binary);}
                                    | <KIND_BOOLEAN>                            {this.setValue(_attr, "kind", AttributeCI_mxJPO.Kind.Boolean);}
                                    | <KIND_DATE>                               {this.setValue(_attr, "kind", AttributeCI_mxJPO.Kind.Date);}
                                    | <KIND_INTEGER>                            {this.setValue(_attr, "kind", AttributeCI_mxJPO.Kind.Integer);}
                                    | <KIND_REAL>                               {this.setValue(_attr, "kind", AttributeCI_mxJPO.Kind.Real);}
                                    | <KIND_STRING>                             {this.setValue(_attr, "kind", AttributeCI_mxJPO.Kind.String);} ) )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_attr, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_attr, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_attr, "description", str);} )
      | ( <DEFAULTVALUE>              str = multiLineString()                   {this.setValue(_attr, "defaultValue", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_attr, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_attr, "hidden", false);} )
      | ( <MULTIVALUE_TRUE>                                                     {this.setValue(_attr, "multiValue", true);} )
      | ( <MULTIVALUE_FALSE>                                                    {this.setValue(_attr, "multiValue", false);} )
      | ( <RESETONCLONE_TRUE>                                                   {this.setValue(_attr, "resetOnClone", true);} )
      | ( <RESETONCLONE_FALSE>                                                  {this.setValue(_attr, "resetOnClone", false);} )
      | ( <RESETONREVISION_TRUE>                                                {this.setValue(_attr, "resetOnRevision", true);} )
      | ( <RESETONREVISION_FALSE>                                               {this.setValue(_attr, "resetOnRevision", false);} )
      | ( <RANGEVALUE_TRUE>                                                     {this.setValue(_attr, "rangeValue", true);} )
      | ( <RANGEVALUE_FALSE>                                                    {this.setValue(_attr, "rangeValue", false);} )
      | ( <MULTILINE_TRUE>                                                      {this.setValue(_attr, "multiline", true);} )
      | ( <MULTILINE_FALSE>                                                     {this.setValue(_attr, "multiline", false);} )
      | ( <MAXLENGTH>                 number = naturalNumber()                  {this.setValue(_attr, "maxLength", number);} )
      | ( <RULE>                      str = string()                            {this.appendValue(_attr, "rules", str);} )
      | ( <DIMENSION>                 str = string()                            {this.setValue(_attr, "dimension", str);} )
      | ( <TRIGGER>                   trigger = trigger()                       {this.appendValue(_attr, "triggers", "triggersStack", trigger);} )
      | ( <RANGE_EQUAL>               str = string()                            {range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);} )
      | ( <RANGE_GREATERTHAN>         str = string()                            {range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);} )
      | ( <RANGE_GREATERTHANEQUAL>    str = string()                            {range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);} )
      | ( <RANGE_LESSTHAN>            str = string()                            {range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);} )
      | ( <RANGE_LESSTHANEQUAL>       str = string()                            {range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);} )
      | ( <RANGE_NOTEQUAL>            str = string()                            {range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);} )
      | ( <RANGE_MATCH>               str = string()                            {range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);} )
      | ( <RANGE_NOTMATCH>            str = string()                            {range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);} )
      | ( <RANGE_SMATCH>              str = string()                            {range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);} )
      | ( <RANGE_NOTSMATCH>           str = string()                            {range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);} )
      | ( <RANGE_PROGRAM>             str = string()                            {range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "program");this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);}
                  ( <INPUT>           str = string()                            {this.setValue(range, "value2", str);} )? )
      | ( <RANGE_BETWEEN>                                                       {range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "between");this.appendValue(_attr, "rangesStack", range);}
                                    ( tmp = <BETW1_STRING>                      {this.setValue(range, "value1", this.getString(tmp.image));}
                                    | tmp = <BETW1_SINGLE>                      {this.setValue(range, "value1", this.getSingle(tmp.image));} )
                                    ( <BETW2_INCLUSIVE>                         {this.setValue(range, "include1", true);}
                                    | <BETW2_EXCLUSIVE>                         {this.setValue(range, "include1", false);})
                                    ( tmp = <BETW3_STRING>                      {this.setValue(range, "value2", this.getString(tmp.image));}
                                    | tmp = <BETW3_SINGLE>                      {this.setValue(range, "value2", this.getSingle(tmp.image));} )
                                    ( <BETW4_INCLUSIVE>                         {this.setValue(range, "include2", true);}
                                    | <BETW4_EXCLUSIVE>                         {this.setValue(range, "include2", false);} ) )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_attr, "properties", "propertiesStack", property);} )
    )*
}

/** Data Model -> Attribute: Ranges */
<DEFAULT> TOKEN:
{
      <RANGE_EQUAL:                         "range" ([" ","\t","\n","\r"])+ "=">            : STRING_EXPECTED
    | <RANGE_GREATERTHAN:                   "range" ([" ","\t","\n","\r"])+ ">">            : STRING_EXPECTED
    | <RANGE_GREATERTHANEQUAL:              "range" ([" ","\t","\n","\r"])+ ">=">           : STRING_EXPECTED
    | <RANGE_LESSTHAN:                      "range" ([" ","\t","\n","\r"])+ "< ">           : STRING_EXPECTED
    | <RANGE_LESSTHANEQUAL:                 "range" ([" ","\t","\n","\r"])+ "<=">           : STRING_EXPECTED
    | <RANGE_NOTEQUAL:                      "range" ([" ","\t","\n","\r"])+ "!=">           : STRING_EXPECTED
    | <RANGE_MATCH:                         "range" ([" ","\t","\n","\r"])+ "match">        : STRING_EXPECTED
    | <RANGE_NOTMATCH:                      "range" ([" ","\t","\n","\r"])+ "!match">       : STRING_EXPECTED
    | <RANGE_SMATCH:                        "range" ([" ","\t","\n","\r"])+ "smatch">       : STRING_EXPECTED
    | <RANGE_NOTSMATCH:                     "range" ([" ","\t","\n","\r"])+ "!smatch">      : STRING_EXPECTED
    | <RANGE_PROGRAM:                       "range" ([" ","\t","\n","\r"])+ "program">      : STRING_EXPECTED
    | <RANGE_BETWEEN:                       "range" ([" ","\t","\n","\r"])+ "between">      : BETW1_EXPECTED
}
<BETW1_EXPECTED> TOKEN :
{
      <BETW1_STRING: (<BETW1_APOSTROPHE>(<BETW1_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<BETW1_APOSTROPHE>)> : BETW2_EXPECTED
    | <BETW1_SINGLE: (<BETW1_CHAR>)+> : BETW2_EXPECTED
    | <#BETW1_APOSTROPHE: "\"" >
    | <#BETW1_CHAR: ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}
<BETW2_EXPECTED> TOKEN :
{
      <BETW2_INCLUSIVE: "inclusive"> : BETW3_EXPECTED
    | <BETW2_EXCLUSIVE: "exclusive"> : BETW3_EXPECTED
}
<BETW3_EXPECTED> TOKEN :
{
      <BETW3_STRING: (<BETW3_APOSTROPHE>(<BETW3_CHAR> | "\\\"" | "\\{" | "\\}" | " ")*<BETW3_APOSTROPHE>)> : BETW4_EXPECTED
    | <BETW3_SINGLE: (<BETW3_CHAR>)+> : BETW4_EXPECTED
    | <#BETW3_APOSTROPHE: "\"" >
    | <#BETW3_CHAR: ~["\u0000"-"\u0020","\"","{","}","\u0100"-"\uffff"]>
}
<BETW4_EXPECTED> TOKEN :
{
      <BETW4_INCLUSIVE: "inclusive"> : DEFAULT
    | <BETW4_EXCLUSIVE: "exclusive"> : DEFAULT
}

/**************************************************** Data Model -> Dimension */

/**
 * Parses one complete dimension definition.
 *
 * @param _dimension    target dimension to update with parsed values
 */
void parseDimension(final Dimension_mxJPO _dimension)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Token tmp;
    Set<String> set;
    AdminProperty property;
    Dimension_mxJPO.Unit unit;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_dimension, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_dimension, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_dimension, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_dimension, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_dimension, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_dimension, "hidden", false);} )
      | ( <UNIT>                                                                {unit = new Dimension_mxJPO.Unit();}
            ( tmp = <UNITNAME_STRING>                                           {this.setValue(unit, "name", this.getString(tmp.image));}
            | tmp = <UNITNAME_SINGLE>                                           {this.setValue(unit, "name", this.getSingle(tmp.image));} )
                <UNITDEF_START>
                    ( ( <UNITDEF_UUID>          str = unitDefString()           {property = new AdminProperty();this.appendValue(this.getValue(unit, "properties"), "propertiesStack", property);this.setValue(property, "name",  "UUID");this.setValue(property, "value", str);} )
                    | ( <UNITDEF_DEFAULT_TRUE>                                  {this.setValue(unit, "defaultUnit", true);} )
                    | ( <UNITDEF_DEFAULT_FALSE>                                 {this.setValue(unit, "defaultUnit", false);} )
                    | ( <UNITDEF_DESCRIPTION>   str = unitDefString()           {this.setValue(unit, "description", str);} )
                    | ( <UNITDEF_LABEL>         str = unitDefString()           {this.setValue(unit, "label", str);} )
                    | ( <UNITDEF_MULTIPLIER>    tmp = <UNITDEF_DOUBLE_DOUBLE>   {this.setValue(unit, "multiplier", Double.parseDouble(tmp.image));} )
                    | ( <UNITDEF_OFFSET>        tmp = <UNITDEF_DOUBLE_DOUBLE>   {this.setValue(unit, "offset", Double.parseDouble(tmp.image));} )
                    | ( <UNITDEF_SETTING>       property = unitDefSetting()     {this.appendValue(unit, "properties", "propertiesStack", property);} )
                    | ( <UNITDEF_PROPERTY>      property = unitDefProperty()    {this.appendValue(unit, "properties", "propertiesStack", property);} )
                    | ( <UNITDEF_SYSTEM>        property = unitDefSystem()      {this.appendValue(unit, "properties", "propertiesStack", property);} ) )*
                <UNITDEF_END>                                                   {this.appendValue(_dimension, "units", unit);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_dimension, "properties", "propertiesStack", property);} )
    )*
}

/**
 * Evaluates a simple string.
 *
 * @return evaluated simple string
 */
String unitDefString() :
{
    Token tmp;
}
{
    tmp = <UNITDEF_STRING> {return this.getString(tmp.image);} | tmp = <UNITDEF_SINGLE> {return this.getSingle(tmp.image);}
}

/**
 * Parses one setting for a unit definition. The setting is returned as
 * property where the name of the property is the key of the setting with '%'
 * as prefix.
 *
 * @return parsed property setting
 */
AdminProperty unitDefSetting() :
{
    Token tmp;
    final String key, value;
}
{
    ( tmp = <UNITDEF_STRINGSTRING_STRING> {key = this.getString(tmp.image);} | tmp = <UNITDEF_STRINGSTRING_SINGLE> {key = this.getSingle(tmp.image);} )
    value = unitDefString()
    {
        final AdminProperty ret = new AdminProperty();
        this.setValue(ret, "name", "%" + key);
        this.setValue(ret, "value", value);
        return ret;
    }
}

/**
 * Parses the system information for a unit definition. The system is returned
 * as property where the referenced admin type is set to unit and the referenced
 * admin name is the system unit.
 *
 * @return parsed property system
 */
AdminProperty unitDefSystem() :
{
    Token tmp;
    String name;
    String unit;
}
{
    ( tmp = <UNITDEF_SYSTEMNAME_STRING> {name = this.getString(tmp.image);} | tmp = <UNITDEF_SYSTEMNAME_SINGLE> {name = this.getSingle(tmp.image);} )
    <UNITDEF_SYSTEMDEF_TO>
    <UNITDEF_SYSTEMDEF_UNIT>
    ( tmp = <UNITDEF_SYSTEMUNIT_STRING> {unit = this.getString(tmp.image);} | tmp = <UNITDEF_SYSTEMUNIT_SINGLE> {unit = this.getSingle(tmp.image);} )
    {
        final AdminProperty ret = new AdminProperty();
        this.setValue(ret, "name", name);
        this.setValue(ret, "refAdminType", "unit");
        this.setValue(ret, "refAdminName", unit);
        return ret;
    }
}

/**
 * Parses one property for a unit definition.
 *
 * @return parsed property
 */
AdminProperty unitDefProperty() :
{
    Token tmp;
    String name = null;
    String value = null;
    String toType = null;
    String toName = null;
}  {
    name = unitDefString()
    (
          ( <UNITDEF_PROPERTYVAL> value = unitDefString() )
        | ( <UNITDEF_PROPERTYTO> ( tmp = <UNITDEF_STRINGSTRING_STRING> {toType = this.getString(tmp.image);} | tmp = <UNITDEF_STRINGSTRING_SINGLE> {toType = this.getSingle(tmp.image);} ) toName = unitDefString() )
    )*
    {
        final AdminProperty ret = new AdminProperty();
        this.setValue(ret, "name", name);
        this.setValue(ret, "value", value);
        this.setValue(ret, "refAdminType", toType);
        this.setValue(ret, "refAdminName", toName);
        return ret;
    }
}

/** String for Unit Name */
<DEFAULT> TOKEN :
{
      <UNIT:                                "unit">                                         : UNITNAME_EXPECTED
}
<UNITNAME_EXPECTED> TOKEN :
{
      <UNITNAME_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : UNITDEF_EXPECTED
    | <UNITNAME_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}
/** Unit Value String */
<UNITDEF_EXPECTED> TOKEN :
{
      <UNITDEF_START :                              "{">                                                                                            : UNITDEF_EXPECTED
    | <UNITDEF_END :                                "}">                                                                                            : DEFAULT
    | <UNITDEF_UUID:                                "uuid">                                                                                         : UNITDEF_STRING_EXPECTED
    | <UNITDEF_DEFAULT_TRUE:                        "default">                                                                                      : UNITDEF_EXPECTED
    | <UNITDEF_DEFAULT_FALSE:                       "!default">                                                                                     : UNITDEF_EXPECTED
    | <UNITDEF_DESCRIPTION:                         "description">                                                                                  : UNITDEF_STRING_EXPECTED
    | <UNITDEF_LABEL:                               "label">                                                                                        : UNITDEF_STRING_EXPECTED
    | <UNITDEF_MULTIPLIER:                          "multiplier">                                                                                   : UNITDEF_DOUBLE_EXPECTED
    | <UNITDEF_OFFSET:                              "offset">                                                                                       : UNITDEF_DOUBLE_EXPECTED
    | <UNITDEF_SETTING:                             "setting">                                                                                      : UNITDEF_STRINGSTRING_EXPECTED
    | <UNITDEF_PROPERTY:                            "property">                                                                                     : UNITDEF_STRING_EXPECTED
    | <UNITDEF_PROPERTYVAL:                         "value">                                                                                        : UNITDEF_STRING_EXPECTED
    | <UNITDEF_PROPERTYTO:                          "to">                                                                                           : UNITDEF_STRINGSTRING_EXPECTED
    | <UNITDEF_SYSTEM:                              "system">                                                                                       : UNITDEF_SYSTEMNAME_EXPECTED
}
/** String for Unit Definition */
<UNITDEF_STRING_EXPECTED> TOKEN :
{
      <UNITDEF_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : UNITDEF_EXPECTED
    | <UNITDEF_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : UNITDEF_EXPECTED
}
/** Two Strings for Unit Definition */
<UNITDEF_STRINGSTRING_EXPECTED> TOKEN :
{
      <UNITDEF_STRINGSTRING_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : UNITDEF_STRING_EXPECTED
    | <UNITDEF_STRINGSTRING_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : UNITDEF_STRING_EXPECTED
}
/** Double for Unit Definition */
<UNITDEF_DOUBLE_EXPECTED> TOKEN :
{
      <UNITDEF_DOUBLE_DOUBLE : (("-")? (["0"-"9"])* ("." (["0"-"9"])*)? ("E" ("-")? (["0"-"9"])*)?)> : UNITDEF_EXPECTED
}
/** System Name for Unit Definition */
<UNITDEF_SYSTEMNAME_EXPECTED> TOKEN :
{
      <UNITDEF_SYSTEMNAME_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : UNITDEF_SYSTEMDEF_EXPECTED
    | <UNITDEF_SYSTEMNAME_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : UNITDEF_SYSTEMDEF_EXPECTED
}
/** System Defintion for Unit Definition */
<UNITDEF_SYSTEMDEF_EXPECTED> TOKEN :
{
      <UNITDEF_SYSTEMDEF_TO : "to"> : UNITDEF_SYSTEMDEF_EXPECTED
    | <UNITDEF_SYSTEMDEF_UNIT : "unit"> : UNITDEF_SYSTEMUNIT_EXPECTED
}
/** System Unit for Unit Definition */
<UNITDEF_SYSTEMUNIT_EXPECTED> TOKEN :
{
      <UNITDEF_SYSTEMUNIT_STRING : ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : UNITDEF_EXPECTED
    | <UNITDEF_SYSTEMUNIT_SINGLE : ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : UNITDEF_EXPECTED
}

/*************************************************** Data Model -> Expression */

/**
 * Parses one complete expression definition.
 *
 * @param _expression   target expression to update with parsed values
 */
void parseExpression(final Expression_mxJPO _expression)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Token tmp;
    AdminProperty property = null;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_expression, "packageRef", str);property = null;} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_expression, "properties", "propertiesStack", property);property = null;} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_expression, "symbolicNames", str);property = null;} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_expression, "description", str);property = null;} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_expression, "hidden", true);property = null;} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_expression, "hidden", false);property = null;} )
      | ( <PROPERTYVAL>                                                         {   // work-around:
                                                                                    // normally only single-line-string is allowed
                                                                                    // but for expression value, multi-line-string is allowed (property == null)
                                                                                    if (property == null)  {
                                                                                        token_source.SwitchTo(MULTILINESTRING_EXPECTED);
                                                                                    }
                                                                                }
                          ( str = string()  | str = multiLineString() )         {   // hint: token value is used twice
                                                                                    // (for property and as expression value)
                                                                                    // => staffed via property variable
                                                                                    if (property == null)  {
                                                                                        this.setValue(_expression, "value", str);
                                                                                    } else  {
                                                                                        this.setValue(property, "value", str);
                                                                                        property = null;
                                                                                    }
                                                                                } )
      | ( <PROPERTY>                                                            {property = new AdminProperty();this.appendValue(_expression, "properties", "propertiesStack", property);}
                                      str = string()                            {this.setValue(property, "name", str);}
                     ( <PROPERTYTO>   str = stringString()                      {this.setValue(property, "refAdminType", str);}
                                      str = string()                            {this.setValue(property, "refAdminName", str);} )? )
    )*
}

/******************************************************* Data Model -> Format */

/**
 * Parses one complete format definition.
 *
 * @param _format   target format to update with parsed values
 */
void parseFormat(final Format_mxJPO _format)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_format, "packageRef",   str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_format, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_format, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_format, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_format, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_format, "hidden", false);} )
      | ( <MIME>                      str = string()                            {this.setValue(_format, "mimeType", str);} )
      | ( <SUFFIX>                    str = string()                            {this.setValue(_format, "fileSuffix", str);} )
      | ( <TYPE>                      str = string()                            {this.setValue(_format, "type", str);} )
      | ( <VERSION>                   str = string()                            {this.setValue(_format, "version", str);} )
      | ( <VIEW>                      str = string()                            {this.setValue(_format, "commandView",  str);} )
      | ( <EDIT>                      str = string()                            {this.setValue(_format, "commandEdit",  str);} )
      | ( <PRINT>                     str = string()                            {this.setValue(_format, "commandPrint", str);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_format, "properties", "propertiesStack", property);} )
    )*
}

/**************************************************** Data Model -> Interface */

/**
 * Parses one complete interface definition.
 *
 * @param _interface    target interface to update with parsed values
 */
void parseInterface(final Interface_mxJPO _interface)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
    LocalAttribute localAttr;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_interface, "packageRef",   str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_interface, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_interface, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_interface, "description", str);} )
      | ( <ABSTRACT_TRUE>                                                       {this.setValue(_interface, "abstractFlag", true);} )
      | ( <ABSTRACT_FALSE>                                                      {this.setValue(_interface, "abstractFlag", false);} )
      | ( <DERIVED>                   str = string()                            {this.appendValue(_interface, "derived", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_interface, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_interface, "hidden", false);} )
      | ( <ATTRIBUTE>                 str = string()                            {this.appendValue(_interface, "globalAttributes",            str);} )
      | ( <FOR>
            ( <FOR_PATHTYPE_ALL>                                                {this.setValue(_interface, "pathTypeAll", true);}
            | <FOR_PATHTYPE>          str = string()                            {this.appendValue(_interface, "pathTypes", str);}
            | <FOR_RELATIONSHIP_ALL>                                            {this.setValue(_interface, "relationAll", true);}
            | <FOR_RELATIONSHIP>      str = string()                            {this.appendValue(_interface, "relations", str);}
            | <FOR_TYPE_ALL>                                                    {this.setValue(_interface, "typeAll", true);}
            | <FOR_TYPE>              str = string()                            {this.appendValue(_interface, "types", str);} ) )
      | ( <LOCAL> <ATTRIBUTE>         localAttr = localAttribute()              {this.appendValue(_interface, "localAttributes", localAttr);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_interface, "properties", "propertiesStack", property);} )
    )*
}

/** For Relationship / Type */
<DEFAULT> TOKEN :
{
      <FOR:                                 "for">                                          : FOR_EXPECTED
}
<FOR_EXPECTED> TOKEN :
{
      <FOR_PATHTYPE_ALL:                    "pathtype" ([" ","\t","\n","\r"])+ "all">       : DEFAULT
    | <FOR_PATHTYPE:                        "pathtype">                                     : STRING_EXPECTED
    | <FOR_RELATIONSHIP_ALL:                "relationship" ([" ","\t","\n","\r"])+ "all">   : DEFAULT
    | <FOR_RELATIONSHIP:                    "relationship">                                 : STRING_EXPECTED
    | <FOR_TYPE_ALL:                        "type" ([" ","\t","\n","\r"])+ "all">           : DEFAULT
    | <FOR_TYPE:                            "type">                                         : STRING_EXPECTED
}

/**************************************************** Data Model -> Path Type */

/**
 * Parses one complete path type definition.
 *
 * @param _pathType     target path type to update with parsed values
 */
void parsePathType(final PathType_mxJPO _pathType)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
    LocalAttribute localAttr;
    Trigger trigger;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_pathType, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_pathType, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_pathType, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_pathType, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_pathType, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_pathType, "hidden", false);} )
      | ( <FROM>
                       (   ( <CARDINALITY_ONE>                                  {this.setValue(_pathType, "fromCardinality", PathType_mxJPO.Cardinality.One);} )
                         | ( <CARDINALITY_MANY>                                 {this.setValue(_pathType, "fromCardinality", PathType_mxJPO.Cardinality.Many);} )
                         | ( <TYPE>             str = string()                  {this.appendValue(_pathType, "fromTypes", str);} )
                         | ( <TYPE_ALL>                                         {this.setValue(_pathType, "fromTypeAll", true);} )
                         | ( <RELATIONSHIP>     str = string()                  {this.appendValue(_pathType, "fromRelations", str);} )
                         | ( <RELATIONSHIP_ALL>                                 {this.setValue(_pathType, "fromRelationAll", true);} ) )*
                  "}" )
      | ( <TO>
                       (   ( <TYPE>             str = string()                  {this.appendValue(_pathType, "toTypes", str);} )
                         | ( <TYPE_ALL>                                         {this.setValue(_pathType, "toTypeAll", true);} )
                         | ( <RELATIONSHIP>     str = string()                  {this.appendValue(_pathType, "toRelations", str);} )
                         | ( <RELATIONSHIP_ALL>                                 {this.setValue(_pathType, "toRelationAll", true);} ) )*
                  "}" )
      | ( <ATTRIBUTE>                 str = string()                            {this.appendValue(_pathType, "globalAttributes", str);} )
      | ( <LOCAL> <ATTRIBUTE>         localAttr = localAttribute()              {this.appendValue(_pathType, "localAttributes", localAttr);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_pathType, "properties", "propertiesStack", property);} )
    )*
}

/** From / To Information */
<DEFAULT> TOKEN :
{
      <FROM:                                "from" ([" ","\t","\n"])+ "{">                  : DEFAULT
    | <TO:                                  "to"   ([" ","\t","\n"])+ "{">                  : DEFAULT
    | <CARDINALITY_ONE:                     "cardinality" ([" ","\t","\n"])+ "one">         : DEFAULT
    | <CARDINALITY_MANY:                    "cardinality" ([" ","\t","\n"])+ "many">        : DEFAULT
    | <TYPE_ALL:                            "type" ([" ","\t","\n"])+ "all">                : DEFAULT
    | <RELATIONSHIP_ALL:                    "relationship" ([" ","\t","\n"])+ "all">        : DEFAULT
    | <RELATIONSHIP:                        "relationship">                                 : STRING_EXPECTED
}

/************************************************************ Program -> Page */

/**
 * Parses one complete page definition.
 *
 * @param _file     parsed file
 * @param _page     target page to update with parsed values
 */
void parsePage(final Page_mxJPO _page)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Token tmp;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_page, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_page, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_page, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_page, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_page, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_page, "hidden", false);} )
      | ( <MIME>                      str = string()                            {this.setValue(_page, "mimeType", str);} )
      | ( <CONTENT>                   str = multiLineString()                   {this.setValue(_page, "code", str);} )
      | ( <FILE>                      str = string()                            {this.setValue(_page, "file", str);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_page, "properties", "propertiesStack", property);} )
    )*
}

/********************************************************* Program -> Program */

/**
 * Parses one complete program definition.
 *
 * @param _page     target program to update with parsed values
 */
void parseProgram(final ProgramCI_mxJPO _prog)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Token tmp;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_prog, "packageRef", str);} )
      | ( <KIND>                    ( <KIND_EKL>                                {this.setValue(_prog, "kind", ProgramCI_mxJPO.Kind.EKL);}
                                    | <KIND_EXTERNAL>                           {this.setValue(_prog, "kind", ProgramCI_mxJPO.Kind.EXTERNAL);}
                                    | <KIND_MQL>                                {this.setValue(_prog, "kind", ProgramCI_mxJPO.Kind.MQL);}
                                    | <KIND_JAVA>                               {this.setValue(_prog, "kind", ProgramCI_mxJPO.Kind.JAVA);} ) )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_prog, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_prog, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_prog, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_prog, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_prog, "hidden", false);} )
      | ( <NEEDSBUSINESSOBJECT_TRUE>                                            {this.setValue(_prog, "needsBusinessObjectContext", true);} )
      | ( <NEEDSBUSINESSOBJECT_FALSE>                                           {this.setValue(_prog, "needsBusinessObjectContext", false);} )
      | ( <DOWNLOADABLE_TRUE>                                                   {this.setValue(_prog, "downloadable", true);} )
      | ( <DOWNLOADABLE_FALSE>                                                  {this.setValue(_prog, "downloadable", false);} )
      | ( <PIPE_TRUE>                                                           {this.setValue(_prog, "pipe", true);} )
      | ( <PIPE_FALSE>                                                          {this.setValue(_prog, "pipe", false);} )
      | ( <POOLED_TRUE>                                                         {this.setValue(_prog, "pooled", true);} )
      | ( <POOLED_FALSE>                                                        {this.setValue(_prog, "pooled", false);} )
      | ( <RULE>                      str = string()                            {this.setValue(_prog, "rule", str);} )
      | ( <EXECUTE>     ( <IMMEDIATE>                                           {this.setValue(_prog, "execute", ProgramCI_mxJPO.Execute.IMMEDIATE);}
                        | <DEFERRED>                                            {this.setValue(_prog, "execute", ProgramCI_mxJPO.Execute.DEFERRED);}
                        | <USER>            str = string()                      {this.setValue(_prog, "user", str);} )* )
      | ( <CODE>                      str = multiLineString()                   {this.setValue(_prog, "code", str);} )
      | ( <FILE>                      str = string()                            {this.setValue(_prog, "file", str);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_prog, "properties", "propertiesStack", property);} )
    )*
}

/************************************************************ System -> Index */

/**
 * Parses one complete package definition.
 *
 * @param _uniqueKey      target package to update with parsed values
 */
void parseIndex(final IndexCI_mxJPO _index)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Integer number;
    IndexCI_mxJPO.Field field;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_index, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_index, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_index, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_index, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_index, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_index, "hidden", false);} )
      | ( <ENABLE_TRUE>                                                         {this.setValue(_index, "enable", true);} )
      | ( <ENABLE_FALSE>                                                        {this.setValue(_index, "enable", false);} )
      | ( <UNIQUE_TRUE>                                                         {this.setValue(_index, "unique", true);} )
      | ( <UNIQUE_FALSE>                                                        {this.setValue(_index, "unique", false);} )
      | ( <FIELD>                     str = string()                            {field = new IndexCI_mxJPO.Field();this.appendValue(_index, "fields", field);this.setValue(field, "expression", str);}
                    ( <SIZE>          number = naturalNumber()                  {this.setValue(field, "size", number);} )? )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_index, "properties", "propertiesStack", property);} )
    )*
}

/********************************************************** System -> Package */

/**
 * Parses one complete package definition.
 *
 * @param _package      target package to update with parsed values
 */
void parsePackage(final PackageCI_mxJPO _package)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException
: {
    String str;
    AdminProperty property;
}
{
    (
        ( <UUID>                      property = uuidProperty()                 {this.appendValue(_package, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_package, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_package, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_package, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_package, "hidden", false);} )
      | ( <CUSTOM_TRUE>                                                         {this.setValue(_package, "custom", true);} )
      | ( <CUSTOM_FALSE>                                                        {this.setValue(_package, "custom", false);} )
      | ( <USESPACKAGE>               str = string()                            {this.appendValue(_package, "usesPackages", str);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_package, "properties", "propertiesStack", property);} )
    )*
}

/******************************************************* System -> Unique Key */

/**
 * Parses one complete unique key definition.
 *
 * @param _uniqueKey      target unique key to update with parsed values
 */
void parseUniqueKey(final UniqueKeyCI_mxJPO _uniqueKey)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Integer number;
    UniqueKeyCI_mxJPO.Field field;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_uniqueKey, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_uniqueKey, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_uniqueKey, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_uniqueKey, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_uniqueKey, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_uniqueKey, "hidden", false);} )
      | ( <ENABLE_TRUE>                                                         {this.setValue(_uniqueKey, "enable", true);} )
      | ( <ENABLE_FALSE>                                                        {this.setValue(_uniqueKey, "enable", false);} )
      | ( <GLOBAL_TRUE>                                                         {this.setValue(_uniqueKey, "global", true);} )
      | ( <GLOBAL_FALSE>                                                        {this.setValue(_uniqueKey, "global", false);} )
      | ( <FOR>
            ( <FOR_RELATIONSHIP>      str = string()                            {this.setValue(_uniqueKey, "forRelation", str);}
            | <FOR_TYPE>              str = string()                            {this.setValue(_uniqueKey, "forType", str);} ) )
      | ( <WITH> <WITH_INTERFACE>     str = string()                            {this.setValue(_uniqueKey, "withInterface", str);} )
      | ( <FIELD>                     str = string()                            {field = new UniqueKeyCI_mxJPO.Field();this.appendValue(_uniqueKey, "fields", field);this.setValue(field, "expression", str);}
                    ( <SIZE>          number = naturalNumber()                  {this.setValue(field, "size", number);} )? )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_uniqueKey, "properties", "propertiesStack", property);} )
    )*
}

/** System -> Unique Key: With Interface */
<DEFAULT> TOKEN :
{
      <WITH:                                "with">                                         : WITH_EXPECTED
}
<WITH_EXPECTED> TOKEN :
{
      <WITH_INTERFACE:                      "interface">                                    : STRING_EXPECTED
}

/******************************************************** User -> Association */

/**
 * Parses one complete association definition.
 *
 * @param _role     target association to update with parsed values
 */
void parseAssociation(final Association_mxJPO _role)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_role, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_role, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_role, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_role, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_role, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_role, "hidden", false);} )
      | ( <DEFINITION>                str = string()                            {this.setValue(_role, "definition", str);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_role, "properties", "propertiesStack", property);} )
    )*
}


/************************************************************** User -> Group */

/**
 * Parses one complete group definition.
 *
 * @param _group    target group to update with parsed values
 */
void parseGroup(final Group_mxJPO _group)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_group, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_group, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_group, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_group, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_group, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_group, "hidden", false);} )
      | ( <SITE>                      str = string()                            {this.setValue(_group, "site", str);} )
      | ( <PARENT>                    str = string()                            {this.appendValue(_group, "parentGroups", str);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_group, "properties", "propertiesStack", property);} )
    )*
}

/************************************************************* User -> Person */

/**
 * Parses one complete person definition.
 *
 * @param _person  target admin person to update with parsed values
 */
void parsePerson(final PersonCI_mxJPO _person)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Token tmp;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_person, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_person, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_person, "symbolicNames", str);} )
      | ( <COMMENT>                   str = multiLineString()                   {this.setValue(_person, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_person, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_person, "hidden", false);} )
      | ( <ACTIVE_TRUE>                                                         {this.setValue(_person, "active", true);} )
      | ( <ACTIVE_FALSE>                                                        {this.setValue(_person, "active", false);} )
      | ( <TRUSTED_TRUE>                                                        {this.setValue(_person, "trusted", true);} )
      | ( <TRUSTED_FALSE>                                                       {this.setValue(_person, "trusted", false);} )
      | ( <ACCESS>      ( <ACCESS_ALL>                                          {this.clearValues(_person, "access");this.appendValue(_person, "access", "all");}
                        | <ACCESS_OPEN>                                         {this.clearValues(_person, "access");}
                                        ( tmp = <ACCESS_EXPECTED_SINGLE>        {this.appendValue(_person, "access", this.getString(tmp.image));} )* <ACCESS_CLOSE > ) )
      | ( <ADMIN>       ( <ADMIN_ALL>                                           {this.clearValues(_person, "admin");this.appendValue(_person, "admin", "all");}
                        | <ADMIN_OPEN>                                          {this.clearValues(_person, "admin");}
                                        ( tmp = <ADMIN_EXPECTED_SINGLE>         {this.appendValue(_person, "admin", this.getString(tmp.image));} )* <ADMIN_CLOSE > ) )
      | ( <EMAIL_TRUE>                                                          {this.setValue(_person, "email", true);} )
      | ( <EMAIL_FALSE>                                                         {this.setValue(_person, "email", false);} )
      | ( <INCONMAIL_TRUE>                                                      {this.setValue(_person, "iconmail", true);} )
      | ( <INCONMAIL_FALSE>                                                     {this.setValue(_person, "iconmail", false);} )
      | ( <ADDRESS>                   str = string()                            {this.setValue(_person, "address", str);} )
      | ( <EMAILADDRESS>              str = string()                            {this.setValue(_person, "emailAddress", str);} )
      | ( <FAX>                       str = string()                            {this.setValue(_person, "fax", str);} )
      | ( <FULLNAME>                  str = string()                            {this.setValue(_person, "fullName", str);} )
      | ( <PHONE>                     str = string()                            {this.setValue(_person, "phone", str);} )
      | ( <PRODUCT> <PRODUCT_OPEN>  ( tmp = <PRODUCT_EXPECTED_SINGLE>           {this.appendValue(_person, "products", this.getString(tmp.image));} )* <PRODUCT_CLOSE> )
      | ( <TYPE> <TYPE_OPEN>                                                    {this.clearValues(_person, "types");}
                                    ( ( <TYPE_APPLICATION>                      {this.appendValue(_person, "types", TypeItem.APPLICATION);} )
                                    | ( <TYPE_FULL>                             {this.appendValue(_person, "types", TypeItem.FULL);} )
                                    | ( <TYPE_BUSINESS>                         {this.appendValue(_person, "types", TypeItem.BUSINESS);} )
                                    | ( <TYPE_SYSTEM>                           {this.appendValue(_person, "types", TypeItem.SYSTEM);} ) )* <TYPE_CLOSE > )
      | (<VAULT>                      str = string()                            {this.setValue(_person, "vault", str);} )
      | (<APPLICATION>                str = string()                            {this.setValue(_person, "application", str);} )
      | (<SITE>                       str = string()                            {this.setValue(_person, "site", str);} )
      | (<GROUP>                      str = string()                            {this.appendValue(_person, "groups", str);} )
      | (<ROLE>                       str = string()                            {this.appendValue(_person, "roles", str);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_person, "properties", "propertiesStack", property);} )
    )*
}

/** User -> Person: Access */
<DEFAULT> TOKEN :
{
       <ACCESS:                              "access">                                     : ACCESS_OPENEXPECTED
}
<ACCESS_OPENEXPECTED> TOKEN :
{
      <ACCESS_ALL:                           "all" >                                       : DEFAULT
    | <ACCESS_OPEN:                          "{">                                          : ACCESS_EXPECTED
}
<ACCESS_EXPECTED> TOKEN :
{
      <ACCESS_CLOSE:                         "}">                                           : DEFAULT
    | <ACCESS_EXPECTED_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+>
}

/** User -> Person: Admin */
<DEFAULT> TOKEN :
{
       <ADMIN:                              "admin">                                        : ADMIN_OPEN_EXPECTED
}
<ADMIN_OPEN_EXPECTED> TOKEN :
{
      <ADMIN_ALL:                           "all" >                                         : DEFAULT
    | <ADMIN_OPEN:                          "{">                                            : ADMIN_EXPECTED
}
<ADMIN_EXPECTED> TOKEN :
{
      <ADMIN_CLOSE:                         "}">                                           : DEFAULT
    | <ADMIN_EXPECTED_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+>
}

/** User -> Person: Product */
<DEFAULT> TOKEN :
{
      <PRODUCT:                              "product">                                    : PRODUCT_OPEN_EXPECTED
}
<PRODUCT_OPEN_EXPECTED> TOKEN :
{
      <PRODUCT_OPEN:                         "{">                                          : PRODUCT_EXPECTED
}
<PRODUCT_EXPECTED> TOKEN :
{
      <PRODUCT_CLOSE:                        "}">                                           : DEFAULT
    | <PRODUCT_EXPECTED_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+>
}

/** User -> Person: Type */
<DEFAULT> TOKEN :
{
       <TYPE:                                "type">                                        : TYPE_OPEN_EXPECTED
}
<TYPE_OPEN_EXPECTED> TOKEN :
{
      <TYPE_OPEN:                            "{">                                          : TYPE_EXPECTED
}
<TYPE_EXPECTED> TOKEN :
{
      <TYPE_CLOSE:                           "}">                                           : DEFAULT
    | <TYPE_APPLICATION:                     "application">                                 : TYPE_EXPECTED
    | <TYPE_FULL:                            "full">                                        : TYPE_EXPECTED
    | <TYPE_BUSINESS:                        "business">                                    : TYPE_EXPECTED
    | <TYPE_SYSTEM:                          "system">                                      : TYPE_EXPECTED
}

/************************************************************* User -> Role * */

/**
 * Parses one complete role definition.
 *
 * @param _role     target role to update with parsed values
 */
void parseRole(final Role_mxJPO _role)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_role, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_role, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_role, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_role, "description", str);} )
      | ( <KIND>                    ( <KIND_ORGANIZATION>                       {this.setValue(_role, "kind", Role_mxJPO.Kind.Organization);}
                                    | <KIND_PROJECT>                            {this.setValue(_role, "kind", Role_mxJPO.Kind.Project);}
                                    | <KIND_ROLE>                               {this.setValue(_role, "kind", Role_mxJPO.Kind.Role);} ) )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_role, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_role, "hidden", false);} )
      | ( <SITE>                      str = string()                            {this.setValue(_role, "site", str);} )
      | ( <PARENT>                    str = string()                            {this.appendValue(_role, "parentRoles", str);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_role, "properties", "propertiesStack", property);} )
    )*
}

/************************************************** User Interface -> Channel */

/**
 * Parses one complete menu definition.
 *
 * @param _channel     target menu to update with parsed values
 */
void parseChannel(Channel_mxJPO _channel)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Token tmp;
    AdminProperty property;
    CommandRef ref;
    Integer number;
    int refIdx = 0;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_channel, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_channel, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_channel, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_channel, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_channel, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_channel, "hidden", false);} )
      | ( <LABEL>                     str = string()                            {this.setValue(_channel, "label", str);} )
      | ( <ALT>                       str = string()                            {this.setValue(_channel, "alt", str);} )
      | ( <HREF>                      str = string()                            {this.setValue(_channel, "href", str);} )
      | ( <HEIGHT>                    number = naturalNumber()                  {this.setValue(_channel, "height", number);} )
      | ( <SETTING>                   property = settingProperty()              {this.appendValue(_channel, "properties", "propertiesStack", property);} )
      | ( <COMMAND>                   str = string()                            {ref = new CommandRef();this.setValue(ref, "column", refIdx++);this.appendValue(_channel, "children", "childrenStack", ref);this.setValue(ref, "name", str);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_channel, "properties", "propertiesStack", property);} )
    )*
}

/************************************************** User Interface -> Command */

/**
 * Parses one complete command definition.
 *
 * @param _command  target command to update with parsed values
 */
void parseCommand(Command_mxJPO _command)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_command, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_command, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_command, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_command, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_command, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_command, "hidden", false);} )
      | ( <ALT>                       str = string()                            {this.setValue(_command, "alt", str);} )
      | ( <HREF>                      str = string()                            {this.setValue(_command, "href", str);} )
      | ( <LABEL>                     str = string()                            {this.setValue(_command, "label", str);} )
      | ( <USER>                      str = string()                            {this.appendValue(_command, "users", str);} )
      | ( <SETTING>                   property = settingProperty()              {this.appendValue(_command, "properties", "propertiesStack", property);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_command, "properties", "propertiesStack", property);} )
      | ( <CODE>                      str = multiLineString()                   {this.setValue(_command, "code", str);} )
    )*
}

/***************************************************** User Interface -> Form */

/**
 * Parses one complete form definition.
 *
 * @param _form    target form to update with parsed values
 */
void parseForm(final Form_mxJPO _form)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Token tmp;
    AdminProperty property;
    Form_mxJPO.Field field;
    Setting setting;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_form, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_form, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_form, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_form, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_form, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_form, "hidden", false);} )
      | ( <FIELD>                                                               {field = new Form_mxJPO.Field(); this.appendValue(_form, "fields", field);  }
          <FIELD_OPEN>
                    ( <FIELD_NAME>      ( tmp = <FIELD_STRING>                  {this.setValue(field, "name",           this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "name",           this.getSingle(tmp.image));} )
                    | <FIELD_LABEL>     ( tmp = <FIELD_STRING>                  {this.setValue(field, "label",          this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "label",          this.getSingle(tmp.image));} )
                    | <FIELD_SELECT>    ( tmp = <FIELD_STRING>                  {this.setValue(field, "expression",     this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "expression",     this.getSingle(tmp.image));} )
                    | <FIELD_BOBJ>      ( tmp = <FIELD_STRING>                  {this.setValue(field, "expression",     this.getString(tmp.image)); this.setValue(field, "expressionType",  ExpressionType.BUSINESSOBJECT);}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "expression",     this.getSingle(tmp.image)); this.setValue(field, "expressionType",  ExpressionType.BUSINESSOBJECT);} )
                    | <FIELD_REL>       ( tmp = <FIELD_STRING>                  {this.setValue(field, "expression",     this.getString(tmp.image)); this.setValue(field, "expressionType",  ExpressionType.RELATIONSHIP);}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "expression",     this.getSingle(tmp.image)); this.setValue(field, "expressionType",  ExpressionType.RELATIONSHIP);} )
                    | <FIELD_RANGE>     ( tmp = <FIELD_STRING>                  {this.setValue(field, "range",          this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "range",          this.getSingle(tmp.image));} )
                    | <FIELD_HREF>      ( tmp = <FIELD_STRING>                  {this.setValue(field, "href",           this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "href",           this.getSingle(tmp.image));} )
                    | <FIELD_ALT>       ( tmp = <FIELD_STRING>                  {this.setValue(field, "alt",            this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "alt",            this.getSingle(tmp.image));} )
                    | <FIELD_USER>      ( tmp = <FIELD_STRING>                  {this.appendValue(field, "users",       this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.appendValue(field, "users",       this.getSingle(tmp.image));} )
                    | <FIELD_SETTING>                                           {setting = new Setting();this.appendValue(field, "settings", setting);}
                                        ( tmp = <FIELD_SETTING_STRING>          {this.setValue(setting, "name",         this.getString(tmp.image));}
                                        | tmp = <FIELD_SETTING_SINGLE>          {this.setValue(setting, "name",         this.getSingle(tmp.image));} )
                                        ( tmp = <FIELD_STRING>                  {this.setValue(setting, "value",        this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(setting, "value",        this.getSingle(tmp.image));} ) ) *
          <FIELD_CLOSE> )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_form, "properties", "propertiesStack", property);} )
    )*
}

<DEFAULT> TOKEN :
{
      <FIELD:                               "field">                            : FIELD_OPEN_EXPECTED
}

<FIELD_OPEN_EXPECTED> TOKEN :
{
      <FIELD_OPEN:                          "{">                                : FIELD_EXPECTED
}

<FIELD_EXPECTED> TOKEN :
{
      <FIELD_CLOSE:                         "}">                                : DEFAULT
    | <FIELD_NAME:                          "name">                             : FIELD_STRING_EXPECTED
    | <FIELD_LABEL:                         "label">                            : FIELD_STRING_EXPECTED
    | <FIELD_SELECT:                        "select">                           : FIELD_STRING_EXPECTED
    | <FIELD_BOBJ:                          "businessobject">                   : FIELD_STRING_EXPECTED
    | <FIELD_REL:                           "relationship">                     : FIELD_STRING_EXPECTED
    | <FIELD_RANGE:                         "range">                            : FIELD_STRING_EXPECTED
    | <FIELD_HREF:                          "href">                             : FIELD_STRING_EXPECTED
    | <FIELD_ALT:                           "alt">                              : FIELD_STRING_EXPECTED
    | <FIELD_USER:                          "user">                             : FIELD_STRING_EXPECTED
    | <FIELD_SETTING:                       "setting">                          : FIELD_SETTING_EXPECTED
}

<FIELD_STRING_EXPECTED> TOKEN :
{
      <FIELD_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : FIELD_EXPECTED
    | <FIELD_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : FIELD_EXPECTED
}

<FIELD_SETTING_EXPECTED> TOKEN :
{
      <FIELD_SETTING_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : FIELD_STRING_EXPECTED
    | <FIELD_SETTING_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : FIELD_STRING_EXPECTED

}

/************************************************** User Interface -> Inquiry */

/**
 * Parses one complete inquiry definition.
 *
 * @param _inquiry  target inquiry to update with parsed values
 */
void parseInquiry(final Inquiry_mxJPO _inquiry)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_inquiry, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_inquiry, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_inquiry, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_inquiry, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_inquiry, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_inquiry, "hidden", false);} )
      | ( <PATTERN>                   str = string()                            {this.setValue(_inquiry, "pattern", str);} )
      | ( <FORMAT>                    str = string()                            {this.setValue(_inquiry, "format", str);} )
      | ( <CODE>                      str = multiLineString()                   {this.setValue(_inquiry, "code", str);} )
      | ( <ARGUMENT>                  property = settingProperty()              {this.appendValue(_inquiry, "properties", "propertiesStack", property);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_inquiry, "properties", "propertiesStack", property);} )
    )*
}

/***************************************************** User Interface -> Menu */

/**
 * Parses one complete menu definition.
 *
 * @param _menu     target menu to update with parsed values
 */
void parseMenu(Menu_mxJPO _menu)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
    AbstractRef ref;
    int refIdx = 0;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_menu, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_menu, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_menu, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_menu, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_menu, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_menu, "hidden", false);} )
      | ( <TREEMENU_TRUE>                                                       {this.setValue(_menu, "treeMenu", true);} )
      | ( <TREEMENU_FALSE>                                                      {this.setValue(_menu, "treeMenu", false);} )
      | ( <ALT>                       str = string()                            {this.setValue(_menu, "alt", str);} )
      | ( <HREF>                      str = string()                            {this.setValue(_menu, "href", str);} )
      | ( <LABEL>                     str = string()                            {this.setValue(_menu, "label", str);} )
      | ( <SETTING>                   property = settingProperty()              {this.appendValue(_menu, "properties", "propertiesStack", property);} )
      | ( <COMMAND>                   str = string()                            {ref = new CommandRef();this.setValue(ref, "column", refIdx++);this.appendValue(_menu, "children", "childrenStack", ref);this.setValue(ref, "name", str);} )
      | ( <MENU>                      str = string()                            {ref = new MenuRef();   this.setValue(ref, "column", refIdx++);this.appendValue(_menu, "children", "childrenStack", ref);this.setValue(ref, "name", str);} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_menu, "properties", "propertiesStack", property);} )
    )*
}

/*************************************************** User Interface -> Portal */

/**
 * Parses one complete portal definition.
 *
 * @param _portal     target portal to update with parsed values
 */
void parsePortal(Portal_mxJPO _portal)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
    ChannelRef ref;
    int refRowIdx = 0, refColIdx = 0;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_portal, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_portal, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_portal, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_portal, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_portal, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_portal, "hidden", false);} )
      | ( <ALT>                       str = string()                            {this.setValue(_portal, "alt", str);} )
      | ( <HREF>                      str = string()                            {this.setValue(_portal, "href", str);} )
      | ( <LABEL>                     str = string()                            {this.setValue(_portal, "label", str);} )
      | ( <SETTING>                   property = settingProperty()              {this.appendValue(_portal, "properties", "propertiesStack", property);} )
      | ( <CHANNEL>                   str = string()                            {ref = new ChannelRef();this.setValue(ref, "column", refColIdx++);this.setValue(ref, "row", refRowIdx);this.appendValue(_portal, "children", "childrenStack", ref);this.setValue(ref, "name", str);} )
      | ( <NEWROW>                                                              {refRowIdx++;refColIdx = 0;} )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_portal, "properties", "propertiesStack", property);} )
    )*
}

/***************************************************** User Interface -> Table */

/**
 * Parses one complete table definition.
 *
 * @param _table    target table to update with parsed values
 */
void parseTable(final Table_mxJPO _table)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Token tmp;
    AdminProperty property;
    Table_mxJPO.Column column;
    Setting setting;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_table, "packageRef", str);} )
      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_table, "properties", "propertiesStack", property);} )
      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_table, "symbolicNames", str);} )
      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_table, "description", str);} )
      | ( <HIDDEN_TRUE>                                                         {this.setValue(_table, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_table, "hidden", false);} )
      | ( <COLUMN>                                                              {column = new Table_mxJPO.Column();this.appendValue(_table, "fields", column);  }
          <COLUMN_OPEN>
                    ( <COLUMN_NAME>     ( tmp = <COLUMN_STRING>                 {this.setValue(column, "name",                              this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "name",                              this.getSingle(tmp.image));} )
                    | <COLUMN_LABEL>    ( tmp = <COLUMN_STRING>                 {this.setValue(column, "label",                             this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "label",                             this.getSingle(tmp.image));} )
                    | <COLUMN_SELECT>   ( tmp = <COLUMN_STRING>                 {this.setValue(column, "expression",                        this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "expression",                        this.getSingle(tmp.image));} )
                    | <COLUMN_BOBJ>     ( tmp = <COLUMN_STRING>                 {this.setValue(column, "expression",                        this.getString(tmp.image));this.setValue(column, "expressionType", ExpressionType.BUSINESSOBJECT);}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "expression",                        this.getSingle(tmp.image));this.setValue(column, "expressionType", ExpressionType.BUSINESSOBJECT);} )
                    | <COLUMN_REL>      ( tmp = <COLUMN_STRING>                 {this.setValue(column, "expression",                        this.getString(tmp.image));this.setValue(column, "expressionType", ExpressionType.RELATIONSHIP);}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "expression",                        this.getSingle(tmp.image));this.setValue(column, "expressionType", ExpressionType.RELATIONSHIP);} )
                    | <COLUMN_RANGE>    ( tmp = <COLUMN_STRING>                 {this.setValue(column, "range",                             this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "range",                             this.getSingle(tmp.image));} )
                    | <COLUMN_HREF>     ( tmp = <COLUMN_STRING>                 {this.setValue(column, "href",                              this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "href",                              this.getSingle(tmp.image));} )
                    | <COLUMN_ALT>      ( tmp = <COLUMN_STRING>                 {this.setValue(column, "alt",                               this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "alt",                               this.getSingle(tmp.image));} )
                    | <COLUMN_HIDDEN_TRUE>                                      {this.setValue(column, "hidden",                            true);}
                    | <COLUMN_HIDDEN_FALSE>                                     {this.setValue(column, "hidden",                            false);}
                    | <COLUMN_USER>     ( tmp = <COLUMN_STRING>                 {this.appendValue(column, "users",                          this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.appendValue(column, "users",                          this.getSingle(tmp.image));} )
                    | <COLUMN_SORTTYPE> ( <COLUMN_SORTTYPE_ALPHA>               {this.setValue(column, "sortType",                          SortType.ALPHANUMERIC);}
                                        | <COLUMN_SORTTYPE_NUMERIC>             {this.setValue(column, "sortType",                          SortType.NUMERIC);}
                                        | <COLUMN_SORTTYPE_OTHER>               {this.setValue(column, "sortType",                          SortType.OTHER);}
                                        | <COLUMN_SORTTYPE_NONE>                {this.setValue(column, "sortType",                          SortType.NONE);} )
                    | <COLUMN_SETTING>                                          {setting = new Setting();this.appendValue(column, "settings", setting);}
                                        ( tmp = <SETTING_STRING>                {this.setValue(setting, "name",                             this.getString(tmp.image));}
                                        | tmp = <SETTING_SINGLE>                {this.setValue(setting, "name",                             this.getSingle(tmp.image));} )
                                        ( tmp = <COLUMN_STRING>                 {this.setValue(setting, "value",                            this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(setting, "value",                            this.getSingle(tmp.image));} ) ) *
          <COLUMN_CLOSE> )
      | ( <PROPERTY>                  property = property()                     {this.appendValue(_table, "properties", "propertiesStack", property);} )
    )*
}

<DEFAULT> TOKEN :
{
      <COLUMN:                              "column">                           : COLUMN_OPENEXPECTED
}

<COLUMN_OPENEXPECTED> TOKEN :
{
      <COLUMN_OPEN:                         "{">                                : COLUMN_EXPECTED
}

<COLUMN_EXPECTED> TOKEN :
{
      <COLUMN_CLOSE:                        "}">                                : DEFAULT
    | <COLUMN_NAME:                         "name">                             : COLUMN_STRING_EXPECTED
    | <COLUMN_LABEL:                        "label">                            : COLUMN_STRING_EXPECTED
    | <COLUMN_SELECT:                       "select">                           : COLUMN_STRING_EXPECTED
    | <COLUMN_BOBJ:                         "businessobject">                   : COLUMN_STRING_EXPECTED
    | <COLUMN_REL:                          "relationship">                     : COLUMN_STRING_EXPECTED
    | <COLUMN_RANGE:                        "range">                            : COLUMN_STRING_EXPECTED
    | <COLUMN_HREF:                         "href">                             : COLUMN_STRING_EXPECTED
    | <COLUMN_ALT:                          "alt">                              : COLUMN_STRING_EXPECTED
    | <COLUMN_HIDDEN_TRUE:                  "hidden">                           : COLUMN_EXPECTED
    | <COLUMN_HIDDEN_FALSE:                 "!hidden">                          : COLUMN_EXPECTED
    | <COLUMN_USER:                         "user">                             : COLUMN_STRING_EXPECTED
    | <COLUMN_SORTTYPE:                     "sorttype">                         : COLUMN_SORTTYPE_EXPECTED
    | <COLUMN_SETTING:                      "setting">                          : COLUMN_SETTING_STRING_EXPECTED
}

<COLUMN_STRING_EXPECTED> TOKEN :
{
      <COLUMN_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : COLUMN_EXPECTED
    | <COLUMN_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : COLUMN_EXPECTED
}

<COLUMN_SETTING_STRING_EXPECTED> TOKEN :
{
      <SETTING_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : COLUMN_STRING_EXPECTED
    | <SETTING_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : COLUMN_STRING_EXPECTED
}

<COLUMN_SORTTYPE_EXPECTED> TOKEN :
{
      <COLUMN_SORTTYPE_ALPHA:               "alpha">                            : COLUMN_EXPECTED
    | <COLUMN_SORTTYPE_NUMERIC:             "numeric">                          : COLUMN_EXPECTED
    | <COLUMN_SORTTYPE_OTHER:               "other">                            : COLUMN_EXPECTED
    | <COLUMN_SORTTYPE_NONE:                "none">                             : COLUMN_EXPECTED
}

/**************************************************************************** */