/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

options {
    JDK_VERSION = "1.7";
    STATIC = false;
    ERROR_REPORTING = true;
    USER_TOKEN_MANAGER = false;
    GENERATE_BOILERPLATE = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(MxParser)
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.zparser;

import java.lang.reflect.InvocationTargetException;

import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.ExpressionType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.SortType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.Setting;
import org.mxupdate.update.userinterface.Channel_mxJPO;
import org.mxupdate.update.userinterface.Command_mxJPO;
import org.mxupdate.update.userinterface.Form_mxJPO;
import org.mxupdate.update.userinterface.Form_mxJPO.Field;
import org.mxupdate.update.userinterface.Inquiry_mxJPO;
import org.mxupdate.update.userinterface.Menu_mxJPO;
import org.mxupdate.update.userinterface.Portal_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO.Column;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.AbstractRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.ChannelRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.CommandRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.MenuRef;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Channel_mxJPO}.
 */
@SuppressWarnings("unused")
public class MxParser
    extends AbstractParser_mxJPO
{
}

PARSER_END(MxParser)

<*> SKIP :
{
  " " | "\t" | "\n" | <("#" (~["\n"])* "\n")>
}

TOKEN : /** first level */
{
      <PACKAGE:                             "package">                                      : STRING_EXPECTED

    | <UUID:                                "uuid">                                         : STRING_EXPECTED

    | <SYMBOLICNAME:                        "symbolicname">                                 : STRING_EXPECTED

    | <DESCRIPTION:                         "description">                                  : MULTILINESTRING_EXPECTED

    | <HIDDEN_TRUE:                         "hidden">
    | <HIDDEN_FALSE:                        "!hidden">

    | <TREEMENU_TRUE:                       "treemenu">
    | <TREEMENU_FALSE:                      "!treemenu">

    | <LABEL:                               "label">                                        : STRING_EXPECTED

    | <ALT:                                 "alt">                                          : STRING_EXPECTED

    | <HREF:                                "href">                                         : STRING_EXPECTED

    | <HEIGHT:                              "height">                                       : NATURALNUMBER_EXPECTED

    | <USER:                                ("add" ([" ","\t","\n","\r"])+ )? "user">       : STRING_EXPECTED

    | <SETTING:                             ("add" ([" ","\t","\n","\r"])+ )? "setting">    : STRING_STRING_EXPECTED
    | <ARGUMENT:                            "argument">                                     : STRING_STRING_EXPECTED

    | <CHANNEL:                             "channel">                                      : STRING_EXPECTED
    | <COMMAND:                             ("add" ([" ","\t","\n","\r"])+ )? "command">    : STRING_EXPECTED
    | <MENU:                                ("add" ([" ","\t","\n","\r"])+ )? "menu">       : STRING_EXPECTED

    | <NEWROW:                              "newrow">                                       : DEFAULT

    | <PATTERN:                             "pattern">                                      : STRING_EXPECTED

    | <FORMAT:                              "format">                                       : STRING_EXPECTED

    | <CODE:                                "code">                                         : MULTILINESTRING_EXPECTED
}

/******************************************************* Common String String */

<STRING_STRING_EXPECTED> TOKEN :
{
      <STRING_STRING_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : STRING_EXPECTED
    | <STRING_STRING_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : STRING_EXPECTED

}

/************************************************************** Common String */
<STRING_EXPECTED> TOKEN :
{
      <STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : DEFAULT
    | <SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/*************************************************** Common Multi-Line-String */
<MULTILINESTRING_EXPECTED> TOKEN :
{
      <MULTILINESTRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\n" | "\t" | "\\\"" | "\\\\" | "\\{" | "\\}" | "\\n" | "\\t" )* "\"" )> : DEFAULT
    | <MULTILINESINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : DEFAULT
}

/************************************************************* Common Integer */
<NATURALNUMBER_EXPECTED> TOKEN :
{
      <NATURALNUMBER: (("0") | (["1"-"9"](["0"-"9"])*))> : DEFAULT
}

/***************************************************************** Form Field */
<DEFAULT> TOKEN :
{
      <FIELD:                               "field">                                        : FIELD_OPENEXPECTED
}

<FIELD_OPENEXPECTED> TOKEN :
{
      <FIELD_OPEN:                          "{">                                            : FIELD_EXPECTED
}

<FIELD_EXPECTED> TOKEN :
{
      <FIELD_CLOSE:                         "}">                                            : DEFAULT
    | <FIELD_NAME:                          "name">                                         : FIELD_STRING_EXPECTED
    | <FIELD_LABEL:                         "label">                                        : FIELD_STRING_EXPECTED
    | <FIELD_SELECT:                        "select">                                       : FIELD_STRING_EXPECTED
    | <FIELD_BOBJ:                          "businessobject">                               : FIELD_STRING_EXPECTED
    | <FIELD_REL:                           "relationship">                                 : FIELD_STRING_EXPECTED
    | <FIELD_RANGE:                         "range">                                        : FIELD_STRING_EXPECTED
    | <FIELD_HREF:                          "href">                                         : FIELD_STRING_EXPECTED
    | <FIELD_ALT:                           "alt">                                          : FIELD_STRING_EXPECTED
    | <FIELD_USER:                          "user">                                         : FIELD_STRING_EXPECTED
    | <FIELD_SETTING:                       "setting">                                      : FIELD_SETTING_EXPECTED
}

<FIELD_STRING_EXPECTED> TOKEN :
{
      <FIELD_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : FIELD_EXPECTED
    | <FIELD_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : FIELD_EXPECTED
}

<FIELD_SETTING_EXPECTED> TOKEN :
{
      <FIELD_SETTING_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : FIELD_STRING_EXPECTED
    | <FIELD_SETTING_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : FIELD_STRING_EXPECTED

}

/*************************************************************** Table Column */
<DEFAULT> TOKEN :
{
      <COLUMN:                              "column">                                       : COLUMN_OPENEXPECTED
}

<COLUMN_OPENEXPECTED> TOKEN :
{
      <COLUMN_OPEN:                         "{">                                            : COLUMN_EXPECTED
}

<COLUMN_EXPECTED> TOKEN :
{
      <COLUMN_CLOSE:                        "}">                                            : DEFAULT
    | <COLUMN_NAME:                         "name">                                         : COLUMN_STRING_EXPECTED
    | <COLUMN_LABEL:                        "label">                                        : COLUMN_STRING_EXPECTED
    | <COLUMN_SELECT:                       "select">                                       : COLUMN_STRING_EXPECTED
    | <COLUMN_BOBJ:                         "businessobject">                               : COLUMN_STRING_EXPECTED
    | <COLUMN_REL:                          "relationship">                                 : COLUMN_STRING_EXPECTED
    | <COLUMN_RANGE:                        "range">                                        : COLUMN_STRING_EXPECTED
    | <COLUMN_HREF:                         "href">                                         : COLUMN_STRING_EXPECTED
    | <COLUMN_ALT:                          "alt">                                          : COLUMN_STRING_EXPECTED
    | <COLUMN_HIDDEN_TRUE:                  "hidden">                                       : COLUMN_EXPECTED
    | <COLUMN_HIDDEN_FALSE:                 "!hidden">                                      : COLUMN_EXPECTED
    | <COLUMN_USER:                         "user">                                         : COLUMN_STRING_EXPECTED
    | <COLUMN_SORTTYPE:                     "sorttype">                                     : COLUMN_SORTTYPE_EXPECTED
    | <COLUMN_SETTING:                      "setting">                                      : COLUMN_SETTING_STRING_EXPECTED
}

<COLUMN_STRING_EXPECTED> TOKEN :
{
      <COLUMN_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : COLUMN_EXPECTED
    | <COLUMN_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : COLUMN_EXPECTED
}

<COLUMN_SETTING_STRING_EXPECTED> TOKEN :
{
      <SETTING_STRING: ( "\"" ( ~["\u0000"-"\u001f","\"","\\","\u0100"-"\uffff"] | "\\\"" | "\\\\" | "\\{" | "\\}" )* "\"" )> : COLUMN_STRING_EXPECTED
    | <SETTING_SINGLE: ( ~["\u0000"-"\u0020","\"","\\","{","}","\u0100"-"\uffff"] )+> : COLUMN_STRING_EXPECTED
}

<COLUMN_SORTTYPE_EXPECTED> TOKEN :
{
      <COLUMN_SORTTYPE_ALPHA:               "alpha">                                        : COLUMN_EXPECTED
    | <COLUMN_SORTTYPE_NUMERIC:             "numeric">                                      : COLUMN_EXPECTED
    | <COLUMN_SORTTYPE_OTHER:               "other">                                        : COLUMN_EXPECTED
    | <COLUMN_SORTTYPE_NONE:                "none">                                         : COLUMN_EXPECTED
}

/******************************************************************* Property */
<DEFAULT> TOKEN :
{
      <PROPERTY:                            "property">                                     : STRING_EXPECTED
    | <PROPERTYTO:                          "to">                                           : STRING_STRING_EXPECTED
    | <PROPERTYVAL:                         "value">                                        : STRING_EXPECTED
}

/************************************************** User Interface -> Channel */

/**
 * Parses one complete menu definition.
 *
 * @param _channel     target menu to update with parsed values
 */
void parseChannel(Channel_mxJPO _channel)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Token tmp;
    AdminProperty property;
    CommandRef ref;
    Integer number;
    int refIdx = 0;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_channel, "packageRef", str);} )

      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_channel, "properties", "propertiesStack", property);} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_channel, "symbolicNames", str);} )

      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_channel, "description", str);} )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_channel, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_channel, "hidden", false);} )

      | ( <LABEL>                     str = string()                            {this.setValue(_channel, "label", str);} )

      | ( <ALT>                       str = string()                            {this.setValue(_channel, "alt", str);} )

      | ( <HREF>                      str = string()                            {this.setValue(_channel, "href", str);} )

      | ( <HEIGHT>                    number = naturalNumber()                  {this.setValue(_channel, "height", number);} )

      | ( <SETTING>                   property = settingProperty()              {this.appendValue(_channel, "properties", "propertiesStack", property);} )

      | ( <COMMAND>                   str = string()                            {ref = new CommandRef();this.setValue(ref, "column", refIdx++);this.appendValue(_channel, "children", "childrenStack", ref);this.setValue(ref, "name", str);} )

      | ( <PROPERTY>                  property = property()                     {this.appendValue(_channel, "properties", "propertiesStack", property);} )
    )*
}

/************************************************** User Interface -> Command */

/**
 * Parses one complete command definition.
 *
 * @param _command  target command to update with parsed values
 */
void parseCommand(Command_mxJPO _command)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_command, "packageRef", str);} )

      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_command, "properties", "propertiesStack", property);} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_command, "symbolicNames", str);} )

      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_command, "description", str);} )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_command, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_command, "hidden", false);} )

      | ( <ALT>                       str = string()                            {this.setValue(_command, "alt", str);} )

      | ( <HREF>                      str = string()                            {this.setValue(_command, "href", str);} )

      | ( <LABEL>                     str = string()                            {this.setValue(_command, "label", str);} )

      | ( <USER>                      str = string()                            {this.appendValue(_command, "users", str);} )

      | ( <SETTING>                   property = settingProperty()              {this.appendValue(_command, "properties", "propertiesStack", property);} )

      | ( <PROPERTY>                  property = property()                     {this.appendValue(_command, "properties", "propertiesStack", property);} )

      | ( <CODE>                      str = multiLineString()                   {this.setValue(_command, "code", str);} )
    )*
}

/***************************************************** User Interface -> Form */

/**
 * Parses one complete form definition.
 *
 * @param _form    target form to update with parsed values
 */
void parseForm(final Form_mxJPO _form)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Token tmp;
    AdminProperty property;
    Field field;
    Setting setting;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_form, "packageRef", str);} )

      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_form, "properties", "propertiesStack", property);} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_form, "symbolicNames", str);} )

      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_form, "description", str);} )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_form, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_form, "hidden", false);} )

      | ( <FIELD>                                                               {field = new Field(); this.appendValue(_form, "fields", field);  }
          <FIELD_OPEN>
                    ( <FIELD_NAME>      ( tmp = <FIELD_STRING>                  {this.setValue(field, "name",           this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "name",           this.getSingle(tmp.image));} )
                    | <FIELD_LABEL>     ( tmp = <FIELD_STRING>                  {this.setValue(field, "label",          this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "label",          this.getSingle(tmp.image));} )
                    | <FIELD_SELECT>    ( tmp = <FIELD_STRING>                  {this.setValue(field, "expression",     this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "expression",     this.getSingle(tmp.image));} )
                    | <FIELD_BOBJ>      ( tmp = <FIELD_STRING>                  {this.setValue(field, "expression",     this.getString(tmp.image)); this.setValue(field, "expressionType",  ExpressionType.BUSINESSOBJECT);}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "expression",     this.getSingle(tmp.image)); this.setValue(field, "expressionType",  ExpressionType.BUSINESSOBJECT);} )
                    | <FIELD_REL>       ( tmp = <FIELD_STRING>                  {this.setValue(field, "expression",     this.getString(tmp.image)); this.setValue(field, "expressionType",  ExpressionType.RELATIONSHIP);}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "expression",     this.getSingle(tmp.image)); this.setValue(field, "expressionType",  ExpressionType.RELATIONSHIP);} )
                    | <FIELD_RANGE>     ( tmp = <FIELD_STRING>                  {this.setValue(field, "range",          this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "range",          this.getSingle(tmp.image));} )
                    | <FIELD_HREF>      ( tmp = <FIELD_STRING>                  {this.setValue(field, "href",           this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "href",           this.getSingle(tmp.image));} )
                    | <FIELD_ALT>       ( tmp = <FIELD_STRING>                  {this.setValue(field, "alt",            this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(field, "alt",            this.getSingle(tmp.image));} )
                    | <FIELD_USER>      ( tmp = <FIELD_STRING>                  {this.appendValue(field, "users",       this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.appendValue(field, "users",       this.getSingle(tmp.image));} )
                    | <FIELD_SETTING>                                           {setting = new Setting();this.appendValue(field, "settings", setting);}
                                        ( tmp = <FIELD_SETTING_STRING>          {this.setValue(setting, "name",         this.getString(tmp.image));}
                                        | tmp = <FIELD_SETTING_SINGLE>          {this.setValue(setting, "name",         this.getSingle(tmp.image));} )
                                        ( tmp = <FIELD_STRING>                  {this.setValue(setting, "value",        this.getString(tmp.image));}
                                        | tmp = <FIELD_SINGLE>                  {this.setValue(setting, "value",        this.getSingle(tmp.image));} ) ) *
          <FIELD_CLOSE> )

      | ( <PROPERTY>                  property = property()                     {this.appendValue(_form, "properties", "propertiesStack", property);} )
    )*
}

/************************************************** User Interface -> Inquiry */

/**
 * Parses one complete inquiry definition.
 *
 * @param _inquiry  target inquiry to update with parsed values
 */
void parseInquiry(final Inquiry_mxJPO _inquiry)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_inquiry, "packageRef", str);} )

      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_inquiry, "properties", "propertiesStack", property);} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_inquiry, "symbolicNames", str);} )

      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_inquiry, "description", str);} )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_inquiry, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_inquiry, "hidden", false);} )

      | ( <PATTERN>                   str = string()                            {this.setValue(_inquiry, "pattern", str);} )

      | ( <FORMAT>                    str = string()                            {this.setValue(_inquiry, "format", str);} )

      | ( <CODE>                      str = multiLineString()                   {this.setValue(_inquiry, "code", str);} )

      | ( <ARGUMENT>                  property = settingProperty()              {this.appendValue(_inquiry, "properties", "propertiesStack", property);} )

      | ( <PROPERTY>                  property = property()                     {this.appendValue(_inquiry, "properties", "propertiesStack", property);} )
    )*
}

/***************************************************** User Interface -> Menu */

/**
 * Parses one complete menu definition.
 *
 * @param _menu     target menu to update with parsed values
 */
void parseMenu(Menu_mxJPO _menu)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
    AbstractRef ref;
    int refIdx = 0;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_menu, "packageRef", str);} )

      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_menu, "properties", "propertiesStack", property);} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_menu, "symbolicNames", str);} )

      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_menu, "description", str);} )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_menu, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_menu, "hidden", false);} )

      | ( <TREEMENU_TRUE>                                                       {this.setValue(_menu, "treeMenu", true);} )
      | ( <TREEMENU_FALSE>                                                      {this.setValue(_menu, "treeMenu", false);} )

      | ( <ALT>                       str = string()                            {this.setValue(_menu, "alt", str);} )

      | ( <HREF>                      str = string()                            {this.setValue(_menu, "href", str);} )

      | ( <LABEL>                     str = string()                            {this.setValue(_menu, "label", str);} )

      | ( <SETTING>                   property = settingProperty()              {this.appendValue(_menu, "properties", "propertiesStack", property);} )

      | ( <COMMAND>                   str = string()                            {ref = new CommandRef();this.setValue(ref, "column", refIdx++);this.appendValue(_menu, "children", "childrenStack", ref);this.setValue(ref, "name", str);} )
      | ( <MENU>                      str = string()                            {ref = new MenuRef();   this.setValue(ref, "column", refIdx++);this.appendValue(_menu, "children", "childrenStack", ref);this.setValue(ref, "name", str);} )

      | ( <PROPERTY>                  property = property()                     {this.appendValue(_menu, "properties", "propertiesStack", property);} )
    )*
}

/*************************************************** User Interface -> Portal */

/**
 * Parses one complete portal definition.
 *
 * @param _portal     target portal to update with parsed values
 */
void parsePortal(Portal_mxJPO _portal)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    AdminProperty property;
    ChannelRef ref;
    int refRowIdx = 0, refColIdx = 0;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_portal, "packageRef", str);} )

      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_portal, "properties", "propertiesStack", property);} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_portal, "symbolicNames", str);} )

      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_portal, "description", str);} )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_portal, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_portal, "hidden", false);} )

      | ( <ALT>                       str = string()                            {this.setValue(_portal, "alt", str);} )

      | ( <HREF>                      str = string()                            {this.setValue(_portal, "href", str);} )

      | ( <LABEL>                     str = string()                            {this.setValue(_portal, "label", str);} )

      | ( <SETTING>                   property = settingProperty()              {this.appendValue(_portal, "properties", "propertiesStack", property);} )

      | ( <CHANNEL>                   str = string()                            {ref = new ChannelRef();this.setValue(ref, "column", refColIdx++);this.setValue(ref, "row", refRowIdx);this.appendValue(_portal, "children", "childrenStack", ref);this.setValue(ref, "name", str);} )
      | ( <NEWROW>                                                              {refRowIdx++;refColIdx = 0;} )

      | ( <PROPERTY>                  property = property()                     {this.appendValue(_portal, "properties", "propertiesStack", property);} )
    )*
}

/***************************************************** User Interface -> Table */

/**
 * Parses one complete table definition.
 *
 * @param _table    target table to update with parsed values
 */
void parseTable(final Table_mxJPO _table)
    throws SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException :
{
    String str;
    Token tmp;
    AdminProperty property;
    Column column;
    Setting setting;
}
{
    (
        ( <PACKAGE>                   str = string()                            {this.setValue(_table, "packageRef", str);} )

      | ( <UUID>                      property = uuidProperty()                 {this.appendValue(_table, "properties", "propertiesStack", property);} )

      | ( <SYMBOLICNAME>              str = string()                            {this.appendValue(_table, "symbolicNames", str);} )

      | ( <DESCRIPTION>               str = multiLineString()                   {this.setValue(_table, "description", str);} )

      | ( <HIDDEN_TRUE>                                                         {this.setValue(_table, "hidden", true);} )
      | ( <HIDDEN_FALSE>                                                        {this.setValue(_table, "hidden", false);} )

      | ( <COLUMN>                                                              {column = new Column();this.appendValue(_table, "fields", column);  }
          <COLUMN_OPEN>
                    ( <COLUMN_NAME>     ( tmp = <COLUMN_STRING>                 {this.setValue(column, "name",                              this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "name",                              this.getSingle(tmp.image));} )
                    | <COLUMN_LABEL>    ( tmp = <COLUMN_STRING>                 {this.setValue(column, "label",                             this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "label",                             this.getSingle(tmp.image));} )
                    | <COLUMN_SELECT>   ( tmp = <COLUMN_STRING>                 {this.setValue(column, "expression",                        this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "expression",                        this.getSingle(tmp.image));} )
                    | <COLUMN_BOBJ>     ( tmp = <COLUMN_STRING>                 {this.setValue(column, "expression",                        this.getString(tmp.image));this.setValue(column, "expressionType", ExpressionType.BUSINESSOBJECT);}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "expression",                        this.getSingle(tmp.image));this.setValue(column, "expressionType", ExpressionType.BUSINESSOBJECT);} )
                    | <COLUMN_REL>      ( tmp = <COLUMN_STRING>                 {this.setValue(column, "expression",                        this.getString(tmp.image));this.setValue(column, "expressionType", ExpressionType.RELATIONSHIP);}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "expression",                        this.getSingle(tmp.image));this.setValue(column, "expressionType", ExpressionType.RELATIONSHIP);} )
                    | <COLUMN_RANGE>    ( tmp = <COLUMN_STRING>                 {this.setValue(column, "range",                             this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "range",                             this.getSingle(tmp.image));} )
                    | <COLUMN_HREF>     ( tmp = <COLUMN_STRING>                 {this.setValue(column, "href",                              this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "href",                              this.getSingle(tmp.image));} )
                    | <COLUMN_ALT>      ( tmp = <COLUMN_STRING>                 {this.setValue(column, "alt",                               this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(column, "alt",                               this.getSingle(tmp.image));} )
                    | <COLUMN_HIDDEN_TRUE>                                      {this.setValue(column, "hidden",                            true);}
                    | <COLUMN_HIDDEN_FALSE>                                     {this.setValue(column, "hidden",                            false);}
                    | <COLUMN_USER>     ( tmp = <COLUMN_STRING>                 {this.appendValue(column, "users",                          this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.appendValue(column, "users",                          this.getSingle(tmp.image));} )
                    | <COLUMN_SORTTYPE> ( <COLUMN_SORTTYPE_ALPHA>               {this.setValue(column, "sortType",                          SortType.ALPHANUMERIC);}
                                        | <COLUMN_SORTTYPE_NUMERIC>             {this.setValue(column, "sortType",                          SortType.NUMERIC);}
                                        | <COLUMN_SORTTYPE_OTHER>               {this.setValue(column, "sortType",                          SortType.OTHER);}
                                        | <COLUMN_SORTTYPE_NONE>                {this.setValue(column, "sortType",                          SortType.NONE);} )
                    | <COLUMN_SETTING>                                          {setting = new Setting();this.appendValue(column, "settings", setting);}
                                        ( tmp = <SETTING_STRING>                {this.setValue(setting, "name",                             this.getString(tmp.image));}
                                        | tmp = <SETTING_SINGLE>                {this.setValue(setting, "name",                             this.getSingle(tmp.image));} )
                                        ( tmp = <COLUMN_STRING>                 {this.setValue(setting, "value",                            this.getString(tmp.image));}
                                        | tmp = <COLUMN_SINGLE>                 {this.setValue(setting, "value",                            this.getSingle(tmp.image));} ) ) *
          <COLUMN_CLOSE> )

      | ( <PROPERTY>                  property = property()                     {this.appendValue(_table, "properties", "propertiesStack", property);} )
    )*
}

/**************************************************************************** */

/**
 * Parses the UUID property definition.
 */
AdminProperty uuidProperty() :
{
    String str;
    AdminProperty property = new AdminProperty();
}
{
    str = string()
    {this.setValue(property, "value", str);}
    {this.setValue(property, "name",  "UUID");}
    {return property;}
}

/**
 * Parses one setting.
 */
AdminProperty settingProperty() :
{
    String name, value;
    Token tmp;
    AdminProperty property = new AdminProperty();
}
{
    name = stringString()
    value = string()

    {this.setValue(property, "name", "%" + name);}
    {this.setValue(property, "value", value);}
    {return property;}
}

/**
 * Parses the properties definition.
 */
AdminProperty property() :
{
    String str1,str2;
    Token tmp;
    AdminProperty property = new AdminProperty();
}
{
    str1 = string()                                             {this.setValue(property, "name", str1);}
    ( ( <PROPERTYVAL>  str1 = string()                          {this.setValue(property, "value", str1);} )
    | ( <PROPERTYTO>   str1 = stringString()  str2 = string()   {this.setValue(property, "refAdminType", str1);this.setValue(property, "refAdminName", str2);} ) )*
    {return property;}
}

/**
 * Evaluates integer value.
 *
 * @return integer
 */
Integer naturalNumber() :
{
    Token tmp;
}
{
    tmp = <NATURALNUMBER>
    {return Integer.valueOf(tmp.image);}
}

/**
 * Evaluates multi-line string.
 *
 * @return string
 */
String multiLineString() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <MULTILINESTRING>  {ret = this.getString(tmp.image);}
    | tmp = <MULTILINESINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}

/**
 * Evaluates prefixed single-line string.
 *
 * @return string
 */
String stringString() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <STRING_STRING_STRING>  {ret = this.getString(tmp.image);}
    | tmp = <STRING_STRING_SINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}

/**
 * Evaluates single-line string.
 *
 * @return string
 */
String string() :
{
    Token tmp;
    String ret = null;
}
{
    ( tmp = <STRING>  {ret = this.getString(tmp.image);}
    | tmp = <SINGLE>  {ret = this.getSingle(tmp.image);} )
    {return ret;}
}
