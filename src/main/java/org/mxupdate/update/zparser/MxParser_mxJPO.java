/* MxParser.java */
/* Generated By:JavaCC: Do not edit this line. MxParser.java */
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.zparser;

import java.lang.reflect.InvocationTargetException;

import org.mxupdate.update.system.IndexCI_mxJPO;
import org.mxupdate.update.user.Association_mxJPO;
import org.mxupdate.update.user.Group_mxJPO;
import org.mxupdate.update.user.PersonCI_mxJPO;
import org.mxupdate.update.user.PersonCI_mxJPO.TypeItem;
import org.mxupdate.update.user.Role_mxJPO;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.ExpressionType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.SortType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.Setting;
import org.mxupdate.update.userinterface.Channel_mxJPO;
import org.mxupdate.update.userinterface.Command_mxJPO;
import org.mxupdate.update.userinterface.Form_mxJPO;
import org.mxupdate.update.userinterface.Inquiry_mxJPO;
import org.mxupdate.update.userinterface.Menu_mxJPO;
import org.mxupdate.update.userinterface.Portal_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO.Column;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.AbstractRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.ChannelRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.CommandRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.MenuRef;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Channel_mxJPO}.
 */
@SuppressWarnings("unused")
public class MxParser_mxJPO
    extends AbstractParser_mxJPO implements MxParserConstants_mxJPO {

/************************************************************ System -> Index */

/**
 * Parses one complete package definition.
 *
 * @param _uniqueKey      target package to update with parsed values
 */
  final public void parseIndex(final IndexCI_mxJPO _index) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Integer number;
    IndexCI_mxJPO.Field field;
    AdminProperty property;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENABLE_TRUE:
      case ENABLE_FALSE:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case UNIQUE_TRUE:
      case UNIQUE_FALSE:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case FIELD:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_index, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_index, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_index, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_index, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_index, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_index, "hidden", false);
        break;
        }
      case ENABLE_TRUE:{
        jj_consume_token(ENABLE_TRUE);
this.setValue(_index, "enable", true);
        break;
        }
      case ENABLE_FALSE:{
        jj_consume_token(ENABLE_FALSE);
this.setValue(_index, "enable", false);
        break;
        }
      case UNIQUE_TRUE:{
        jj_consume_token(UNIQUE_TRUE);
this.setValue(_index, "unique", true);
        break;
        }
      case UNIQUE_FALSE:{
        jj_consume_token(UNIQUE_FALSE);
this.setValue(_index, "unique", false);
        break;
        }
      case FIELD:{
        jj_consume_token(FIELD);
        str = string();
field = new IndexCI_mxJPO.Field();this.appendValue(_index, "fields", field);this.setValue(field, "expression", str);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZE:{
          jj_consume_token(SIZE);
          number = naturalNumber();
this.setValue(field, "size", number);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_index, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/******************************************************** User -> Association */

/**
 * Parses one complete association definition.
 *
 * @param _role     target association to update with parsed values
 */
  final public void parseAssociation(final Association_mxJPO _role) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case DEFINITION:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_role, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_role, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_role, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_role, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_role, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_role, "hidden", false);
        break;
        }
      case DEFINITION:{
        jj_consume_token(DEFINITION);
        str = string();
this.setValue(_role, "definition", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_role, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************************** User -> Group */

/**
 * Parses one complete group definition.
 *
 * @param _group    target group to update with parsed values
 */
  final public void parseGroup(final Group_mxJPO _group) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case PACKAGE:
      case PARENT:
      case SITE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_group, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_group, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_group, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_group, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_group, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_group, "hidden", false);
        break;
        }
      case SITE:{
        jj_consume_token(SITE);
        str = string();
this.setValue(_group, "site", str);
        break;
        }
      case PARENT:{
        jj_consume_token(PARENT);
        str = string();
this.appendValue(_group, "parentGroups", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_group, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************************* User -> Person */

/**
 * Parses one complete person definition.
 *
 * @param _person  target admin person to update with parsed values
 */
  final public void parsePerson(final PersonCI_mxJPO _person) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Token tmp;
    AdminProperty property;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ACTIVE_TRUE:
      case ACTIVE_FALSE:
      case EMAIL_TRUE:
      case EMAIL_FALSE:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case INCONMAIL_TRUE:
      case INCONMAIL_FALSE:
      case TRUSTED_TRUE:
      case TRUSTED_FALSE:
      case ADDRESS:
      case APPLICATION:
      case EMAILADDRESS:
      case FAX:
      case FULLNAME:
      case GROUP:
      case PACKAGE:
      case PHONE:
      case ROLE:
      case SITE:
      case SYMBOLICNAME:
      case UUID:
      case VAULT:
      case COMMENT:
      case ACCESS:
      case ADMIN:
      case PRODUCT:
      case TYPE:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_person, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_person, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_person, "symbolicNames", str);
        break;
        }
      case COMMENT:{
        jj_consume_token(COMMENT);
        str = multiLineString();
this.setValue(_person, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_person, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_person, "hidden", false);
        break;
        }
      case ACTIVE_TRUE:{
        jj_consume_token(ACTIVE_TRUE);
this.setValue(_person, "active", true);
        break;
        }
      case ACTIVE_FALSE:{
        jj_consume_token(ACTIVE_FALSE);
this.setValue(_person, "active", false);
        break;
        }
      case TRUSTED_TRUE:{
        jj_consume_token(TRUSTED_TRUE);
this.setValue(_person, "trusted", true);
        break;
        }
      case TRUSTED_FALSE:{
        jj_consume_token(TRUSTED_FALSE);
this.setValue(_person, "trusted", false);
        break;
        }
      case ACCESS:{
        jj_consume_token(ACCESS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ACCESS_ALL:{
          jj_consume_token(ACCESS_ALL);
this.clearValues(_person, "access");this.appendValue(_person, "access", "all");
          break;
          }
        case ACCESS_OPEN:{
          jj_consume_token(ACCESS_OPEN);
this.clearValues(_person, "access");
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ACCESS_EXPECTED_SINGLE:{
              ;
              break;
              }
            default:
              jj_la1[8] = jj_gen;
              break label_5;
            }
            tmp = jj_consume_token(ACCESS_EXPECTED_SINGLE);
this.appendValue(_person, "access", this.getString(tmp.image));
          }
          jj_consume_token(ACCESS_CLOSE);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ADMIN:{
        jj_consume_token(ADMIN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADMIN_ALL:{
          jj_consume_token(ADMIN_ALL);
this.clearValues(_person, "admin");this.appendValue(_person, "admin", "all");
          break;
          }
        case ADMIN_OPEN:{
          jj_consume_token(ADMIN_OPEN);
this.clearValues(_person, "admin");
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ADMIN_EXPECTED_SINGLE:{
              ;
              break;
              }
            default:
              jj_la1[10] = jj_gen;
              break label_6;
            }
            tmp = jj_consume_token(ADMIN_EXPECTED_SINGLE);
this.appendValue(_person, "admin", this.getString(tmp.image));
          }
          jj_consume_token(ADMIN_CLOSE);
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case EMAIL_TRUE:{
        jj_consume_token(EMAIL_TRUE);
this.setValue(_person, "email", true);
        break;
        }
      case EMAIL_FALSE:{
        jj_consume_token(EMAIL_FALSE);
this.setValue(_person, "email", false);
        break;
        }
      case INCONMAIL_TRUE:{
        jj_consume_token(INCONMAIL_TRUE);
this.setValue(_person, "iconmail", true);
        break;
        }
      case INCONMAIL_FALSE:{
        jj_consume_token(INCONMAIL_FALSE);
this.setValue(_person, "iconmail", false);
        break;
        }
      case ADDRESS:{
        jj_consume_token(ADDRESS);
        str = string();
this.setValue(_person, "address", str);
        break;
        }
      case EMAILADDRESS:{
        jj_consume_token(EMAILADDRESS);
        str = string();
this.setValue(_person, "emailAddress", str);
        break;
        }
      case FAX:{
        jj_consume_token(FAX);
        str = string();
this.setValue(_person, "fax", str);
        break;
        }
      case FULLNAME:{
        jj_consume_token(FULLNAME);
        str = string();
this.setValue(_person, "fullName", str);
        break;
        }
      case PHONE:{
        jj_consume_token(PHONE);
        str = string();
this.setValue(_person, "phone", str);
        break;
        }
      case PRODUCT:{
        jj_consume_token(PRODUCT);
        jj_consume_token(PRODUCT_OPEN);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PRODUCT_EXPECTED_SINGLE:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_7;
          }
          tmp = jj_consume_token(PRODUCT_EXPECTED_SINGLE);
this.appendValue(_person, "products", this.getString(tmp.image));
        }
        jj_consume_token(PRODUCT_CLOSE);
        break;
        }
      case TYPE:{
        jj_consume_token(TYPE);
        jj_consume_token(TYPE_OPEN);
this.clearValues(_person, "types");
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TYPE_APPLICATION:
          case TYPE_FULL:
          case TYPE_BUSINESS:
          case TYPE_SYSTEM:{
            ;
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            break label_8;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TYPE_APPLICATION:{
            jj_consume_token(TYPE_APPLICATION);
this.appendValue(_person, "types", TypeItem.APPLICATION);
            break;
            }
          case TYPE_FULL:{
            jj_consume_token(TYPE_FULL);
this.appendValue(_person, "types", TypeItem.FULL);
            break;
            }
          case TYPE_BUSINESS:{
            jj_consume_token(TYPE_BUSINESS);
this.appendValue(_person, "types", TypeItem.BUSINESS);
            break;
            }
          case TYPE_SYSTEM:{
            jj_consume_token(TYPE_SYSTEM);
this.appendValue(_person, "types", TypeItem.SYSTEM);
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(TYPE_CLOSE);
        break;
        }
      case VAULT:{
        jj_consume_token(VAULT);
        str = string();
this.setValue(_person, "vault", str);
        break;
        }
      case APPLICATION:{
        jj_consume_token(APPLICATION);
        str = string();
this.setValue(_person, "application", str);
        break;
        }
      case SITE:{
        jj_consume_token(SITE);
        str = string();
this.setValue(_person, "site", str);
        break;
        }
      case GROUP:{
        jj_consume_token(GROUP);
        str = string();
this.appendValue(_person, "groups", str);
        break;
        }
      case ROLE:{
        jj_consume_token(ROLE);
        str = string();
this.appendValue(_person, "roles", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_person, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************************* User -> Role * */

/**
 * Parses one complete role definition.
 *
 * @param _role     target role to update with parsed values
 */
  final public void parseRole(final Role_mxJPO _role) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case PACKAGE:
      case PARENT:
      case SITE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case KIND:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_role, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_role, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_role, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_role, "description", str);
        break;
        }
      case KIND:{
        jj_consume_token(KIND);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KIND_ORGANIZATION:{
          jj_consume_token(KIND_ORGANIZATION);
this.setValue(_role, "kind", Role_mxJPO.Kind.Organization);
          break;
          }
        case KIND_PROJECT:{
          jj_consume_token(KIND_PROJECT);
this.setValue(_role, "kind", Role_mxJPO.Kind.Project);
          break;
          }
        case KIND_ROLE:{
          jj_consume_token(KIND_ROLE);
this.setValue(_role, "kind", Role_mxJPO.Kind.Role);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_role, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_role, "hidden", false);
        break;
        }
      case SITE:{
        jj_consume_token(SITE);
        str = string();
this.setValue(_role, "site", str);
        break;
        }
      case PARENT:{
        jj_consume_token(PARENT);
        str = string();
this.appendValue(_role, "parentRoles", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_role, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************** User Interface -> Channel */

/**
 * Parses one complete menu definition.
 *
 * @param _channel     target menu to update with parsed values
 */
  final public void parseChannel(Channel_mxJPO _channel) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Token tmp;
    AdminProperty property;
    CommandRef ref;
    Integer number;
    int refIdx = 0;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case HEIGHT:
      case SETTING:
      case ALT:
      case COMMAND:
      case HREF:
      case LABEL:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_channel, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_channel, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_channel, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_channel, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_channel, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_channel, "hidden", false);
        break;
        }
      case LABEL:{
        jj_consume_token(LABEL);
        str = string();
this.setValue(_channel, "label", str);
        break;
        }
      case ALT:{
        jj_consume_token(ALT);
        str = string();
this.setValue(_channel, "alt", str);
        break;
        }
      case HREF:{
        jj_consume_token(HREF);
        str = string();
this.setValue(_channel, "href", str);
        break;
        }
      case HEIGHT:{
        jj_consume_token(HEIGHT);
        number = naturalNumber();
this.setValue(_channel, "height", number);
        break;
        }
      case SETTING:{
        jj_consume_token(SETTING);
        property = settingProperty();
this.appendValue(_channel, "properties", "propertiesStack", property);
        break;
        }
      case COMMAND:{
        jj_consume_token(COMMAND);
        str = string();
ref = new CommandRef();this.setValue(ref, "column", refIdx++);this.appendValue(_channel, "children", "childrenStack", ref);this.setValue(ref, "name", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_channel, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************** User Interface -> Command */

/**
 * Parses one complete command definition.
 *
 * @param _command  target command to update with parsed values
 */
  final public void parseCommand(Command_mxJPO _command) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case SETTING:
      case ALT:
      case HREF:
      case LABEL:
      case PACKAGE:
      case SYMBOLICNAME:
      case USER:
      case UUID:
      case CODE:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_command, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_command, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_command, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_command, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_command, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_command, "hidden", false);
        break;
        }
      case ALT:{
        jj_consume_token(ALT);
        str = string();
this.setValue(_command, "alt", str);
        break;
        }
      case HREF:{
        jj_consume_token(HREF);
        str = string();
this.setValue(_command, "href", str);
        break;
        }
      case LABEL:{
        jj_consume_token(LABEL);
        str = string();
this.setValue(_command, "label", str);
        break;
        }
      case USER:{
        jj_consume_token(USER);
        str = string();
this.appendValue(_command, "users", str);
        break;
        }
      case SETTING:{
        jj_consume_token(SETTING);
        property = settingProperty();
this.appendValue(_command, "properties", "propertiesStack", property);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_command, "properties", "propertiesStack", property);
        break;
        }
      case CODE:{
        jj_consume_token(CODE);
        str = multiLineString();
this.setValue(_command, "code", str);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/***************************************************** User Interface -> Form */

/**
 * Parses one complete form definition.
 *
 * @param _form    target form to update with parsed values
 */
  final public void parseForm(final Form_mxJPO _form) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Token tmp;
    AdminProperty property;
    Form_mxJPO.Field field;
    Setting setting;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case FIELD:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_form, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_form, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_form, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_form, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_form, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_form, "hidden", false);
        break;
        }
      case FIELD:{
        jj_consume_token(FIELD);
field = new Form_mxJPO.Field(); this.appendValue(_form, "fields", field);
        jj_consume_token(FIELD_OPEN);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FIELD_NAME:
          case FIELD_LABEL:
          case FIELD_SELECT:
          case FIELD_BOBJ:
          case FIELD_REL:
          case FIELD_RANGE:
          case FIELD_HREF:
          case FIELD_ALT:
          case FIELD_USER:
          case FIELD_SETTING:{
            ;
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            break label_13;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FIELD_NAME:{
            jj_consume_token(FIELD_NAME);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FIELD_STRING:{
              tmp = jj_consume_token(FIELD_STRING);
this.setValue(field, "name",           this.getString(tmp.image));
              break;
              }
            case FIELD_SINGLE:{
              tmp = jj_consume_token(FIELD_SINGLE);
this.setValue(field, "name",           this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[25] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case FIELD_LABEL:{
            jj_consume_token(FIELD_LABEL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FIELD_STRING:{
              tmp = jj_consume_token(FIELD_STRING);
this.setValue(field, "label",          this.getString(tmp.image));
              break;
              }
            case FIELD_SINGLE:{
              tmp = jj_consume_token(FIELD_SINGLE);
this.setValue(field, "label",          this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[26] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case FIELD_SELECT:{
            jj_consume_token(FIELD_SELECT);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FIELD_STRING:{
              tmp = jj_consume_token(FIELD_STRING);
this.setValue(field, "expression",     this.getString(tmp.image));
              break;
              }
            case FIELD_SINGLE:{
              tmp = jj_consume_token(FIELD_SINGLE);
this.setValue(field, "expression",     this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[27] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case FIELD_BOBJ:{
            jj_consume_token(FIELD_BOBJ);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FIELD_STRING:{
              tmp = jj_consume_token(FIELD_STRING);
this.setValue(field, "expression",     this.getString(tmp.image)); this.setValue(field, "expressionType",  ExpressionType.BUSINESSOBJECT);
              break;
              }
            case FIELD_SINGLE:{
              tmp = jj_consume_token(FIELD_SINGLE);
this.setValue(field, "expression",     this.getSingle(tmp.image)); this.setValue(field, "expressionType",  ExpressionType.BUSINESSOBJECT);
              break;
              }
            default:
              jj_la1[28] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case FIELD_REL:{
            jj_consume_token(FIELD_REL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FIELD_STRING:{
              tmp = jj_consume_token(FIELD_STRING);
this.setValue(field, "expression",     this.getString(tmp.image)); this.setValue(field, "expressionType",  ExpressionType.RELATIONSHIP);
              break;
              }
            case FIELD_SINGLE:{
              tmp = jj_consume_token(FIELD_SINGLE);
this.setValue(field, "expression",     this.getSingle(tmp.image)); this.setValue(field, "expressionType",  ExpressionType.RELATIONSHIP);
              break;
              }
            default:
              jj_la1[29] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case FIELD_RANGE:{
            jj_consume_token(FIELD_RANGE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FIELD_STRING:{
              tmp = jj_consume_token(FIELD_STRING);
this.setValue(field, "range",          this.getString(tmp.image));
              break;
              }
            case FIELD_SINGLE:{
              tmp = jj_consume_token(FIELD_SINGLE);
this.setValue(field, "range",          this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[30] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case FIELD_HREF:{
            jj_consume_token(FIELD_HREF);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FIELD_STRING:{
              tmp = jj_consume_token(FIELD_STRING);
this.setValue(field, "href",           this.getString(tmp.image));
              break;
              }
            case FIELD_SINGLE:{
              tmp = jj_consume_token(FIELD_SINGLE);
this.setValue(field, "href",           this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[31] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case FIELD_ALT:{
            jj_consume_token(FIELD_ALT);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FIELD_STRING:{
              tmp = jj_consume_token(FIELD_STRING);
this.setValue(field, "alt",            this.getString(tmp.image));
              break;
              }
            case FIELD_SINGLE:{
              tmp = jj_consume_token(FIELD_SINGLE);
this.setValue(field, "alt",            this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[32] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case FIELD_USER:{
            jj_consume_token(FIELD_USER);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FIELD_STRING:{
              tmp = jj_consume_token(FIELD_STRING);
this.appendValue(field, "users",       this.getString(tmp.image));
              break;
              }
            case FIELD_SINGLE:{
              tmp = jj_consume_token(FIELD_SINGLE);
this.appendValue(field, "users",       this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[33] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case FIELD_SETTING:{
            jj_consume_token(FIELD_SETTING);
setting = new Setting();this.appendValue(field, "settings", setting);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FIELD_SETTING_STRING:{
              tmp = jj_consume_token(FIELD_SETTING_STRING);
this.setValue(setting, "name",         this.getString(tmp.image));
              break;
              }
            case FIELD_SETTING_SINGLE:{
              tmp = jj_consume_token(FIELD_SETTING_SINGLE);
this.setValue(setting, "name",         this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[34] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FIELD_STRING:{
              tmp = jj_consume_token(FIELD_STRING);
this.setValue(setting, "value",        this.getString(tmp.image));
              break;
              }
            case FIELD_SINGLE:{
              tmp = jj_consume_token(FIELD_SINGLE);
this.setValue(setting, "value",        this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[35] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[36] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(FIELD_CLOSE);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_form, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************** User Interface -> Inquiry */

/**
 * Parses one complete inquiry definition.
 *
 * @param _inquiry  target inquiry to update with parsed values
 */
  final public void parseInquiry(final Inquiry_mxJPO _inquiry) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case ARGUMENT:
      case FORMAT:
      case PACKAGE:
      case PATTERN:
      case SYMBOLICNAME:
      case UUID:
      case CODE:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_inquiry, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_inquiry, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_inquiry, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_inquiry, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_inquiry, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_inquiry, "hidden", false);
        break;
        }
      case PATTERN:{
        jj_consume_token(PATTERN);
        str = string();
this.setValue(_inquiry, "pattern", str);
        break;
        }
      case FORMAT:{
        jj_consume_token(FORMAT);
        str = string();
this.setValue(_inquiry, "format", str);
        break;
        }
      case CODE:{
        jj_consume_token(CODE);
        str = multiLineString();
this.setValue(_inquiry, "code", str);
        break;
        }
      case ARGUMENT:{
        jj_consume_token(ARGUMENT);
        property = settingProperty();
this.appendValue(_inquiry, "properties", "propertiesStack", property);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_inquiry, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/***************************************************** User Interface -> Menu */

/**
 * Parses one complete menu definition.
 *
 * @param _menu     target menu to update with parsed values
 */
  final public void parseMenu(Menu_mxJPO _menu) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    AbstractRef ref;
    int refIdx = 0;
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case TREEMENU_TRUE:
      case TREEMENU_FALSE:
      case SETTING:
      case ALT:
      case COMMAND:
      case HREF:
      case LABEL:
      case MENU:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_menu, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_menu, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_menu, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_menu, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_menu, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_menu, "hidden", false);
        break;
        }
      case TREEMENU_TRUE:{
        jj_consume_token(TREEMENU_TRUE);
this.setValue(_menu, "treeMenu", true);
        break;
        }
      case TREEMENU_FALSE:{
        jj_consume_token(TREEMENU_FALSE);
this.setValue(_menu, "treeMenu", false);
        break;
        }
      case ALT:{
        jj_consume_token(ALT);
        str = string();
this.setValue(_menu, "alt", str);
        break;
        }
      case HREF:{
        jj_consume_token(HREF);
        str = string();
this.setValue(_menu, "href", str);
        break;
        }
      case LABEL:{
        jj_consume_token(LABEL);
        str = string();
this.setValue(_menu, "label", str);
        break;
        }
      case SETTING:{
        jj_consume_token(SETTING);
        property = settingProperty();
this.appendValue(_menu, "properties", "propertiesStack", property);
        break;
        }
      case COMMAND:{
        jj_consume_token(COMMAND);
        str = string();
ref = new CommandRef();this.setValue(ref, "column", refIdx++);this.appendValue(_menu, "children", "childrenStack", ref);this.setValue(ref, "name", str);
        break;
        }
      case MENU:{
        jj_consume_token(MENU);
        str = string();
ref = new MenuRef();   this.setValue(ref, "column", refIdx++);this.appendValue(_menu, "children", "childrenStack", ref);this.setValue(ref, "name", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_menu, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*************************************************** User Interface -> Portal */

/**
 * Parses one complete portal definition.
 *
 * @param _portal     target portal to update with parsed values
 */
  final public void parsePortal(Portal_mxJPO _portal) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    ChannelRef ref;
    int refRowIdx = 0, refColIdx = 0;
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case NEWROW:
      case SETTING:
      case ALT:
      case CHANNEL:
      case HREF:
      case LABEL:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_portal, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_portal, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_portal, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_portal, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_portal, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_portal, "hidden", false);
        break;
        }
      case ALT:{
        jj_consume_token(ALT);
        str = string();
this.setValue(_portal, "alt", str);
        break;
        }
      case HREF:{
        jj_consume_token(HREF);
        str = string();
this.setValue(_portal, "href", str);
        break;
        }
      case LABEL:{
        jj_consume_token(LABEL);
        str = string();
this.setValue(_portal, "label", str);
        break;
        }
      case SETTING:{
        jj_consume_token(SETTING);
        property = settingProperty();
this.appendValue(_portal, "properties", "propertiesStack", property);
        break;
        }
      case CHANNEL:{
        jj_consume_token(CHANNEL);
        str = string();
ref = new ChannelRef();this.setValue(ref, "column", refColIdx++);this.setValue(ref, "row", refRowIdx);this.appendValue(_portal, "children", "childrenStack", ref);this.setValue(ref, "name", str);
        break;
        }
      case NEWROW:{
        jj_consume_token(NEWROW);
refRowIdx++;refColIdx = 0;
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_portal, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/***************************************************** User Interface -> Table */

/**
 * Parses one complete table definition.
 *
 * @param _table    target table to update with parsed values
 */
  final public void parseTable(final Table_mxJPO _table) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Token tmp;
    AdminProperty property;
    Column column;
    Setting setting;
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case COLUMN:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_table, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_table, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_table, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_table, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_table, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_table, "hidden", false);
        break;
        }
      case COLUMN:{
        jj_consume_token(COLUMN);
column = new Column();this.appendValue(_table, "fields", column);
        jj_consume_token(COLUMN_OPEN);
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COLUMN_NAME:
          case COLUMN_LABEL:
          case COLUMN_SELECT:
          case COLUMN_BOBJ:
          case COLUMN_REL:
          case COLUMN_RANGE:
          case COLUMN_HREF:
          case COLUMN_ALT:
          case COLUMN_HIDDEN_TRUE:
          case COLUMN_HIDDEN_FALSE:
          case COLUMN_USER:
          case COLUMN_SORTTYPE:
          case COLUMN_SETTING:{
            ;
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            break label_18;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COLUMN_NAME:{
            jj_consume_token(COLUMN_NAME);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COLUMN_STRING:{
              tmp = jj_consume_token(COLUMN_STRING);
this.setValue(column, "name",                              this.getString(tmp.image));
              break;
              }
            case COLUMN_SINGLE:{
              tmp = jj_consume_token(COLUMN_SINGLE);
this.setValue(column, "name",                              this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[46] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case COLUMN_LABEL:{
            jj_consume_token(COLUMN_LABEL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COLUMN_STRING:{
              tmp = jj_consume_token(COLUMN_STRING);
this.setValue(column, "label",                             this.getString(tmp.image));
              break;
              }
            case COLUMN_SINGLE:{
              tmp = jj_consume_token(COLUMN_SINGLE);
this.setValue(column, "label",                             this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[47] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case COLUMN_SELECT:{
            jj_consume_token(COLUMN_SELECT);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COLUMN_STRING:{
              tmp = jj_consume_token(COLUMN_STRING);
this.setValue(column, "expression",                        this.getString(tmp.image));
              break;
              }
            case COLUMN_SINGLE:{
              tmp = jj_consume_token(COLUMN_SINGLE);
this.setValue(column, "expression",                        this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[48] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case COLUMN_BOBJ:{
            jj_consume_token(COLUMN_BOBJ);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COLUMN_STRING:{
              tmp = jj_consume_token(COLUMN_STRING);
this.setValue(column, "expression",                        this.getString(tmp.image));this.setValue(column, "expressionType", ExpressionType.BUSINESSOBJECT);
              break;
              }
            case COLUMN_SINGLE:{
              tmp = jj_consume_token(COLUMN_SINGLE);
this.setValue(column, "expression",                        this.getSingle(tmp.image));this.setValue(column, "expressionType", ExpressionType.BUSINESSOBJECT);
              break;
              }
            default:
              jj_la1[49] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case COLUMN_REL:{
            jj_consume_token(COLUMN_REL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COLUMN_STRING:{
              tmp = jj_consume_token(COLUMN_STRING);
this.setValue(column, "expression",                        this.getString(tmp.image));this.setValue(column, "expressionType", ExpressionType.RELATIONSHIP);
              break;
              }
            case COLUMN_SINGLE:{
              tmp = jj_consume_token(COLUMN_SINGLE);
this.setValue(column, "expression",                        this.getSingle(tmp.image));this.setValue(column, "expressionType", ExpressionType.RELATIONSHIP);
              break;
              }
            default:
              jj_la1[50] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case COLUMN_RANGE:{
            jj_consume_token(COLUMN_RANGE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COLUMN_STRING:{
              tmp = jj_consume_token(COLUMN_STRING);
this.setValue(column, "range",                             this.getString(tmp.image));
              break;
              }
            case COLUMN_SINGLE:{
              tmp = jj_consume_token(COLUMN_SINGLE);
this.setValue(column, "range",                             this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[51] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case COLUMN_HREF:{
            jj_consume_token(COLUMN_HREF);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COLUMN_STRING:{
              tmp = jj_consume_token(COLUMN_STRING);
this.setValue(column, "href",                              this.getString(tmp.image));
              break;
              }
            case COLUMN_SINGLE:{
              tmp = jj_consume_token(COLUMN_SINGLE);
this.setValue(column, "href",                              this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[52] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case COLUMN_ALT:{
            jj_consume_token(COLUMN_ALT);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COLUMN_STRING:{
              tmp = jj_consume_token(COLUMN_STRING);
this.setValue(column, "alt",                               this.getString(tmp.image));
              break;
              }
            case COLUMN_SINGLE:{
              tmp = jj_consume_token(COLUMN_SINGLE);
this.setValue(column, "alt",                               this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[53] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case COLUMN_HIDDEN_TRUE:{
            jj_consume_token(COLUMN_HIDDEN_TRUE);
this.setValue(column, "hidden",                            true);
            break;
            }
          case COLUMN_HIDDEN_FALSE:{
            jj_consume_token(COLUMN_HIDDEN_FALSE);
this.setValue(column, "hidden",                            false);
            break;
            }
          case COLUMN_USER:{
            jj_consume_token(COLUMN_USER);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COLUMN_STRING:{
              tmp = jj_consume_token(COLUMN_STRING);
this.appendValue(column, "users",                          this.getString(tmp.image));
              break;
              }
            case COLUMN_SINGLE:{
              tmp = jj_consume_token(COLUMN_SINGLE);
this.appendValue(column, "users",                          this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[54] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case COLUMN_SORTTYPE:{
            jj_consume_token(COLUMN_SORTTYPE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COLUMN_SORTTYPE_ALPHA:{
              jj_consume_token(COLUMN_SORTTYPE_ALPHA);
this.setValue(column, "sortType",                          SortType.ALPHANUMERIC);
              break;
              }
            case COLUMN_SORTTYPE_NUMERIC:{
              jj_consume_token(COLUMN_SORTTYPE_NUMERIC);
this.setValue(column, "sortType",                          SortType.NUMERIC);
              break;
              }
            case COLUMN_SORTTYPE_OTHER:{
              jj_consume_token(COLUMN_SORTTYPE_OTHER);
this.setValue(column, "sortType",                          SortType.OTHER);
              break;
              }
            case COLUMN_SORTTYPE_NONE:{
              jj_consume_token(COLUMN_SORTTYPE_NONE);
this.setValue(column, "sortType",                          SortType.NONE);
              break;
              }
            default:
              jj_la1[55] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case COLUMN_SETTING:{
            jj_consume_token(COLUMN_SETTING);
setting = new Setting();this.appendValue(column, "settings", setting);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SETTING_STRING:{
              tmp = jj_consume_token(SETTING_STRING);
this.setValue(setting, "name",                             this.getString(tmp.image));
              break;
              }
            case SETTING_SINGLE:{
              tmp = jj_consume_token(SETTING_SINGLE);
this.setValue(setting, "name",                             this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[56] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COLUMN_STRING:{
              tmp = jj_consume_token(COLUMN_STRING);
this.setValue(setting, "value",                            this.getString(tmp.image));
              break;
              }
            case COLUMN_SINGLE:{
              tmp = jj_consume_token(COLUMN_SINGLE);
this.setValue(setting, "value",                            this.getSingle(tmp.image));
              break;
              }
            default:
              jj_la1[57] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[58] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(COLUMN_CLOSE);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_table, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**************************************************************************** */

/**
 * Parses the UUID property definition.
 */
  final public AdminProperty uuidProperty() throws ParseException {String str;
    AdminProperty property = new AdminProperty();
    str = string();
this.setValue(property, "value", str);
this.setValue(property, "name",  "UUID");
{if ("" != null) return property;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parses one setting.
 */
  final public AdminProperty settingProperty() throws ParseException {String name, value;
    Token tmp;
    AdminProperty property = new AdminProperty();
    name = stringString();
    value = string();
this.setValue(property, "name", "%" + name);
this.setValue(property, "value", value);
{if ("" != null) return property;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parses the properties definition.
 */
  final public AdminProperty property() throws ParseException {String str1,str2;
    Token tmp;
    AdminProperty property = new AdminProperty();
    str1 = string();
this.setValue(property, "name", str1);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PROPERTYTO:
      case PROPERTYVAL:{
        ;
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PROPERTYVAL:{
        jj_consume_token(PROPERTYVAL);
        str1 = string();
this.setValue(property, "value", str1);
        break;
        }
      case PROPERTYTO:{
        jj_consume_token(PROPERTYTO);
        str1 = stringString();
        str2 = string();
this.setValue(property, "refAdminType", str1);this.setValue(property, "refAdminName", str2);
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return property;}
    throw new Error("Missing return statement in function");
  }

/**
 * Evaluates integer value.
 *
 * @return integer
 */
  final public Integer naturalNumber() throws ParseException {Token tmp;
    tmp = jj_consume_token(NATURALNUMBER);
{if ("" != null) return Integer.valueOf(tmp.image);}
    throw new Error("Missing return statement in function");
  }

/**
 * Evaluates multi-line string.
 *
 * @return string
 */
  final public String multiLineString() throws ParseException {Token tmp;
    String ret = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULTILINESTRING:{
      tmp = jj_consume_token(MULTILINESTRING);
ret = this.getString(tmp.image);
      break;
      }
    case MULTILINESINGLE:{
      tmp = jj_consume_token(MULTILINESINGLE);
ret = this.getSingle(tmp.image);
      break;
      }
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * Evaluates prefixed single-line string.
 *
 * @return string
 */
  final public String stringString() throws ParseException {Token tmp;
    String ret = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_STRING_STRING:{
      tmp = jj_consume_token(STRING_STRING_STRING);
ret = this.getString(tmp.image);
      break;
      }
    case STRING_STRING_SINGLE:{
      tmp = jj_consume_token(STRING_STRING_SINGLE);
ret = this.getSingle(tmp.image);
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * Evaluates single-line string.
 *
 * @return string
 */
  final public String string() throws ParseException {Token tmp;
    String ret = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      tmp = jj_consume_token(STRING);
ret = this.getString(tmp.image);
      break;
      }
    case SINGLE:{
      tmp = jj_consume_token(SINGLE);
ret = this.getSingle(tmp.image);
      break;
      }
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public MxParserTokenManager_mxJPO token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[65];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x181e00,0x800000,0x181e00,0x80001800,0x80001800,0x1800,0x1800,0x140679e0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x140679e0,0x1800,0x0,0x1800,0x49401800,0x49401800,0x9001800,0x9001800,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800,0x2001800,0x2001800,0x49019800,0x49019800,0x29201800,0x29201800,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x114100,0x0,0x114100,0x114100,0x114100,0x116300,0x116300,0xb791b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb791b,0x10116300,0xe0000000,0x10116300,0x114160,0x114160,0x15c160,0x15c160,0x114100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x114100,0x154504,0x154504,0x1141e0,0x1141e0,0x114160,0x114160,0x114100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x114100,0x0,0x0,0x6000000,0x600000,0x1800000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x200000,0x0,0x200000,0x0,0x0,0x0,0x0,0x4421,0x10,0x6,0x200,0xc0,0x2000,0x1e0000,0x1e0000,0x4421,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0xff000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff000000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x40000000,0x0,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x3,0xc,0xc,0xc,0xc,0xc,0xc,0xc,0xc,0xc,0x30,0xc,0x3,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x40000000,0x40000040,0x3ffe00,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0xc00000,0x3c000000,0x3000000,0xc00000,0x3ffe00,0x40000040,0x80000000,0x80000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public MxParser_mxJPO(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MxParser_mxJPO(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MxParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MxParser_mxJPO(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MxParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new MxParserTokenManager_mxJPO(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MxParser_mxJPO(MxParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MxParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[129];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 65; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 129; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
