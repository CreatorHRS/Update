/* MxParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. MxParserTokenManager.java */
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.zparser;
import java.lang.reflect.InvocationTargetException;
import org.mxupdate.update.system.IndexCI_mxJPO;
import org.mxupdate.update.user.Association_mxJPO;
import org.mxupdate.update.user.Group_mxJPO;
import org.mxupdate.update.user.PersonCI_mxJPO;
import org.mxupdate.update.user.PersonCI_mxJPO.TypeItem;
import org.mxupdate.update.user.Role_mxJPO;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.ExpressionType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.SortType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.Setting;
import org.mxupdate.update.userinterface.Channel_mxJPO;
import org.mxupdate.update.userinterface.Command_mxJPO;
import org.mxupdate.update.userinterface.Form_mxJPO;
import org.mxupdate.update.userinterface.Inquiry_mxJPO;
import org.mxupdate.update.userinterface.Menu_mxJPO;
import org.mxupdate.update.userinterface.Portal_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO.Column;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.AbstractRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.ChannelRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.CommandRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.MenuRef;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/** Token Manager. */
@SuppressWarnings("unused")class MxParserTokenManager_mxJPO implements MxParserConstants_mxJPO {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1){
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 103);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0, long active1){
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_11(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 75);
      default :
         return jjMoveNfa_11(0, 0);
   }
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2800000000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa2_0(active1, 0x400000000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active1, 0x2000000000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active1, 0x1000000000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active1, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa3_0(active1, 0x1000000000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active1, 0x800000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active1, 0x2000000000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active1, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(3, 125);
         return jjMoveStringLiteralDfa4_0(active1, 0x1800000000000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active1, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(4, 122);
         break;
      case 114:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(4, 124);
         return jjMoveStringLiteralDfa5_0(active1, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_0(active1, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(6, 123);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0){
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 98)
                     kind = 98;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_15(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_15(int pos, long active0, long active1){
   return jjMoveNfa_15(jjStopStringLiteralDfa_15(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_15(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_15(0x2L);
      case 123:
         return jjStopAtPos(0, 66);
      default :
         return jjMoveNfa_15(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_15(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa2_15(active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_15(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_15(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_15(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(2, 65);
         break;
      default :
         break;
   }
   return jjStartNfa_15(1, 0L, active1);
}
private int jjMoveNfa_15(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_14(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_14(int pos, long active0, long active1){
   return jjMoveNfa_14(jjStopStringLiteralDfa_14(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_14(){
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 67);
      default :
         return jjMoveNfa_14(0, 0);
   }
}
private int jjMoveNfa_14(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 68)
                     kind = 68;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_18(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_18(int pos, long active0){
   return jjMoveNfa_18(jjStopStringLiteralDfa_18(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_18(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_18(0, 0);
   }
}
private int jjMoveNfa_18(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAdd(13); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000600L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 57)
                     kind = 57;
                  break;
               case 13:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 13:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(13); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(9, 14); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 11:
                  if (curChar == 110)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 12:
                  if (curChar == 116)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 13:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(13); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_19(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_19(int pos, long active0, long active1){
   return jjMoveNfa_19(jjStopStringLiteralDfa_19(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_19(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 86);
      default :
         return jjMoveNfa_19(0, 0);
   }
}
private int jjMoveNfa_19(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 55)
                     kind = 55;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 120)
                     kind = 120;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 121)
                     kind = 121;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_16(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_16(int pos, long active0, long active1){
   return jjMoveNfa_16(jjStopStringLiteralDfa_16(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_16(){
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa1_16(0x2000000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_16(0x4000000000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_16(0x8000000000000000L);
      default :
         return jjMoveNfa_16(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_16(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa2_16(active0, 0x8000000000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_16(active0, 0x6000000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_16(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa3_16(active0, 0x2000000000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_16(active0, 0x8000000000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_16(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_16(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_16(active0, 0x2000000000000000L);
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(3, 63);
         break;
      case 106:
         return jjMoveStringLiteralDfa4_16(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_16(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_16(active0, 0x4000000000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_16(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_16(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_16(active0, 0x4000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_16(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_16(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(6, 62);
         break;
      case 122:
         return jjMoveStringLiteralDfa7_16(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_16(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_16(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_16(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa9_16(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_16(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa10_16(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_16(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa11_16(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_16(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_16(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(11, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_16(10, active0, 0L);
}
private int jjMoveNfa_16(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1){
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_8(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_8(0x20000L);
      case 98:
         return jjMoveStringLiteralDfa1_8(0x80000L);
      case 102:
         return jjMoveStringLiteralDfa1_8(0x40000L);
      case 115:
         return jjMoveStringLiteralDfa1_8(0x100000L);
      case 125:
         return jjStopAtPos(0, 80);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_8(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa2_8(active1, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa2_8(active1, 0xc0000L);
      case 121:
         return jjMoveStringLiteralDfa2_8(active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_8(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_8(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_8(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa3_8(active1, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa3_8(active1, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa3_8(active1, 0x180000L);
      default :
         break;
   }
   return jjStartNfa_8(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_8(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_8(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa4_8(active1, 0x80000L);
      case 108:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(3, 82);
         return jjMoveStringLiteralDfa4_8(active1, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa4_8(active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_8(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_8(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_8(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_8(active1, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa5_8(active1, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa5_8(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_8(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_8(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_8(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_8(active1, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa6_8(active1, 0x80000L);
      case 109:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(5, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_8(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_8(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_8(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_8(active1, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa7_8(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_8(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_8(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_8(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 115:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(7, 83);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_8(active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_8(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_8(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_8(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_8(active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_8(7, 0L, active1);
}
private int jjMoveStringLiteralDfa9_8(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_8(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_8(active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_8(8, 0L, active1);
}
private int jjMoveStringLiteralDfa10_8(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_8(8, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(10, 81);
         break;
      default :
         break;
   }
   return jjStartNfa_8(9, 0L, active1);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0, long active1){
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_13(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_13(0x40L);
      case 123:
         return jjStopAtPos(0, 71);
      default :
         return jjMoveNfa_13(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_13(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa2_13(active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_13(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_13(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_13(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(2, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_13(1, 0L, active1);
}
private int jjMoveNfa_13(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_3(0x4000000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x1000000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_3(0x100000000000L);
      case 104:
         return jjMoveStringLiteralDfa1_3(0x2800000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_3(0x40000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x20000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_3(0x600000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_3(0x30080000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_3(0x8000000000000L);
      case 125:
         return jjStopAtPos(0, 104);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_3(active1, 0x460000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_3(active1, 0x20280000000000L);
      case 104:
         return jjMoveStringLiteralDfa2_3(active1, 0x4000000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_3(active1, 0x2000000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active1, 0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_3(active1, 0x10000000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_3(active1, 0x800000000000L);
      case 115:
         return jjMoveStringLiteralDfa2_3(active1, 0x8000000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_3(active1, 0x40000000000L);
      case 100:
         return jjMoveStringLiteralDfa3_3(active1, 0x2000000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_3(active1, 0x8800000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active1, 0x4000000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_3(active1, 0x280000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_3(active1, 0x20000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_3(active1, 0x400000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_3(active1, 0x10000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active1, 0x100000000000L);
      case 116:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 112);
         return jjMoveStringLiteralDfa3_3(active1, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_3(active1, 0x200000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_3(active1, 0x6000000000000L);
      case 101:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(3, 105);
         return jjMoveStringLiteralDfa4_3(active1, 0xc0000000000L);
      case 102:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(3, 111);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_3(active1, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_3(active1, 0x100000000000L);
      case 114:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(3, 115);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_3(active1, 0x30000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_3(active1, 0x80000000000L);
      case 100:
         return jjMoveStringLiteralDfa5_3(active1, 0x4000000000000L);
      case 101:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(4, 110);
         return jjMoveStringLiteralDfa5_3(active1, 0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_3(active1, 0x20000000000000L);
      case 108:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 106);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_3(active1, 0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_3(active1, 0x10200000000000L);
      default :
         break;
   }
   return jjStartNfa_3(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa6_3(active1, 0x4100000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_3(active1, 0x200000000000L);
      case 110:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(5, 113);
         return jjMoveStringLiteralDfa6_3(active1, 0x20000000000000L);
      case 116:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 107);
         break;
      case 121:
         return jjMoveStringLiteralDfa6_3(active1, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 103:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(6, 117);
         break;
      case 110:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(6, 114);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_3(active1, 0x200000000000L);
      case 112:
         return jjMoveStringLiteralDfa7_3(active1, 0x10000000000000L);
      case 115:
         return jjMoveStringLiteralDfa7_3(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_3(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(7, 116);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_3(active1, 0x200000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_3(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_3(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_3(active1, 0x100000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_3(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_3(7, 0L, active1);
}
private int jjMoveStringLiteralDfa9_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa10_3(active1, 0x100000000000L);
      case 104:
         return jjMoveStringLiteralDfa10_3(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_3(8, 0L, active1);
}
private int jjMoveStringLiteralDfa10_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(8, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_3(active1, 0x200000000000L);
      case 106:
         return jjMoveStringLiteralDfa11_3(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_3(9, 0L, active1);
}
private int jjMoveStringLiteralDfa11_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(9, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_3(active1, 0x100000000000L);
      case 112:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(11, 109);
         break;
      default :
         break;
   }
   return jjStartNfa_3(10, 0L, active1);
}
private int jjMoveStringLiteralDfa12_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(10, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_3(active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_3(11, 0L, active1);
}
private int jjMoveStringLiteralDfa13_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(11, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(13, 108);
         break;
      default :
         break;
   }
   return jjStartNfa_3(12, 0L, active1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1){
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_9(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 79);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0, long active1){
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_12(){
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 72);
      default :
         return jjMoveNfa_12(0, 0);
   }
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 118)
                     kind = 118;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1){
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_7(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_7(0x80000000L);
      case 98:
         return jjMoveStringLiteralDfa1_7(0x8000000L);
      case 104:
         return jjMoveStringLiteralDfa1_7(0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa1_7(0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa1_7(0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa1_7(0x30000000L);
      case 115:
         return jjMoveStringLiteralDfa1_7(0x204000000L);
      case 117:
         return jjMoveStringLiteralDfa1_7(0x100000000L);
      case 125:
         return jjStopAtPos(0, 87);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_7(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_7(active1, 0x23000000L);
      case 101:
         return jjMoveStringLiteralDfa2_7(active1, 0x214000000L);
      case 108:
         return jjMoveStringLiteralDfa2_7(active1, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa2_7(active1, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa2_7(active1, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa2_7(active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_7(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_7(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_7(active1, 0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa3_7(active1, 0x140000000L);
      case 108:
         return jjMoveStringLiteralDfa3_7(active1, 0x14000000L);
      case 109:
         return jjMoveStringLiteralDfa3_7(active1, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa3_7(active1, 0x20000000L);
      case 115:
         return jjMoveStringLiteralDfa3_7(active1, 0x8000000L);
      case 116:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 95);
         return jjMoveStringLiteralDfa3_7(active1, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_7(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_7(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_7(active1, 0x10000000L);
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 88);
         return jjMoveStringLiteralDfa4_7(active1, 0x6000000L);
      case 102:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 94);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_7(active1, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa4_7(active1, 0x8000000L);
      case 114:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(3, 96);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_7(active1, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_7(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_7(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_7(active1, 0x4000000L);
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 93);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_7(active1, 0x200000000L);
      case 108:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(4, 89);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_7(active1, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa5_7(active1, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_7(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_7(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa6_7(active1, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa6_7(active1, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa6_7(active1, 0x200000000L);
      case 116:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 90);
         break;
      default :
         break;
   }
   return jjStartNfa_7(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_7(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 103:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(6, 97);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_7(active1, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa7_7(active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_7(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_7(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa8_7(active1, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa8_7(active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_7(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_7(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_7(active1, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa9_7(active1, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_7(7, 0L, active1);
}
private int jjMoveStringLiteralDfa9_7(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa10_7(active1, 0x8000000L);
      case 104:
         return jjMoveStringLiteralDfa10_7(active1, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_7(8, 0L, active1);
}
private int jjMoveStringLiteralDfa10_7(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(8, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_7(active1, 0x10000000L);
      case 106:
         return jjMoveStringLiteralDfa11_7(active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_7(9, 0L, active1);
}
private int jjMoveStringLiteralDfa11_7(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(9, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_7(active1, 0x8000000L);
      case 112:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(11, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_7(10, 0L, active1);
}
private int jjMoveStringLiteralDfa12_7(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(10, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_7(active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_7(11, 0L, active1);
}
private int jjMoveStringLiteralDfa13_7(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(11, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(13, 91);
         break;
      default :
         break;
   }
   return jjStartNfa_7(12, 0L, active1);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0){
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 100)
                     kind = 100;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_20(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_20(int pos, long active0){
   return jjMoveNfa_20(jjStopStringLiteralDfa_20(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_20(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_20(0, 0);
   }
}
private int jjMoveNfa_20(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 55)
                     kind = 55;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_22(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x600000800000L) != 0L)
            return 8;
         if ((active0 & 0x1000000080000L) != 0L)
            return 23;
         if ((active0 & 0x1e000020L) != 0L || (active1 & 0x21L) != 0L)
            return 28;
         if ((active0 & 0xc000020000000L) != 0L || (active1 & 0x4000000000L) != 0L)
            return 15;
         return -1;
      case 1:
         if ((active0 & 0xc000000000000L) != 0L || (active1 & 0x4000000000L) != 0L)
            return 14;
         if ((active0 & 0x4000000L) != 0L || (active1 & 0x20L) != 0L)
            return 26;
         return -1;
      case 2:
         if ((active0 & 0x4000000L) != 0L)
            return 38;
         if ((active0 & 0x8000000000000L) != 0L)
            return 13;
         return -1;
      case 3:
         if ((active0 & 0x8000000000000L) != 0L)
            return 12;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_22(int pos, long active0, long active1, long active2){
   return jjMoveNfa_22(jjStopStringLiteralDfa_22(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_22(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_22(0x155540L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_22(0x1e000020L, 0x21L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_22(0xc000020000000L, 0x4000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_22(0x10000080000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_22(0x100000280L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_22(0xe00000000L, 0x200000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_22(0x1000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_22(0x2000400800L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_22(0x2000L, 0x0L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_22(0x1000000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_22(0x4000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_22(0x200000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_22(0xf0000000000L, 0x4000000000000400L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_22(0x100000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_22(0x600000800000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_22(0x28000L, 0x8000000000004000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_22(0x1000000080000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_22(0x2000000000000L, 0x0L, 0x1L);
      default :
         return jjMoveNfa_22(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_22(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_22(active0, 0x2074200000040L, active1, 0L, active2, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa2_22(active0, 0x2020L, active1, 0x1L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_22(active0, 0x4000000L, active1, 0x20L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_22(active0, 0x10000080600500L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_22(active0, 0x80020001000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_22(active0, 0x1000200000804800L, active1, 0x200000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_22(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_22(active0, 0x100000080L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_22(active0, 0x80200L, active1, 0L, active2, 0L);
      case 111:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         return jjMoveStringLiteralDfa2_22(active0, 0xc100400000000L, active1, 0x4000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_22(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_22(active0, 0x3002028000L, active1, 0x4000000000000400L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_22(active0, 0x50000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_22(active0, 0x1000800100000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_22(active0, 0x400000000000L, active1, 0x4000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_22(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_22(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_22(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_22(active0, 0x120000280L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_22(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_22(active0, 0x10000004040L, active1, 0x1L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_22(active0, 0x4000004000800L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_22(active0, 0x2000008000L, active1, 0x200000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_22(active0, 0x80000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_22(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_22(active0, 0x1000000481000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_22(active0, 0x100800000000L, active1, 0x4000000000L, active2, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa3_22(active0, 0x8400000000100L, active1, 0x20L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_22(active0, 0x1000000000100400L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_22(active0, 0x81000002000L, active1, 0x4000000000000400L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_22(active0, 0x10000000L, active1, 0x4000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_22(active0, 0x20400050000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_22(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 27);
         return jjMoveStringLiteralDfa3_22(active0, 0x240000000020L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_22(active0, 0x2000000020000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_22(active0, 0x200000L, active1, 0L, active2, 0L);
      case 120:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 33);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_22(active0, 0x800000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_22(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_22(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_22(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_22(active0, 0x500L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_22(active0, 0x400000000200L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_22(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(3, 48);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(3, 60);
         return jjMoveStringLiteralDfa4_22(active0, 0x1800L, active1, 0x400L, active2, 0L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(3, 23);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(3, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(3, 45);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(3, 50);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(3, 78);
         return jjMoveStringLiteralDfa4_22(active0, 0x24000018000L, active1, 0x1L, active2, 0L);
      case 102:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 37);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_22(active0, 0x400000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_22(active0, 0x1801000a0L, active1, 0x20L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_22(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_22(active0, 0x2000810000000L, active1, 0x200000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_22(active0, 0x8000400000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_22(active0, 0x80020002000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_22(active0, 0x4000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_22(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_22(active0, 0x80000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_22(active0, 0x4200000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_22(active0, 0x20000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_22(active0, 0x40000000040L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_22(active0, 0x1002040000L, active1, 0x4000000000L, active2, 0x1L);
      default :
         break;
   }
   return jjStartNfa_22(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_22(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_22(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_22(active0, 0x10400000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_22(active0, 0x400L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(4, 85);
         return jjMoveStringLiteralDfa5_22(active0, 0x1000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(4, 43);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(4, 128);
         return jjMoveStringLiteralDfa5_22(active0, 0x8040004010800L, active1, 0x4000000000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_22(active0, 0x400000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_22(active0, 0x10000140L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         return jjMoveStringLiteralDfa5_22(active0, 0x100000200L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_22(active0, 0x200a000L, active1, 0x4000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(4, 69);
         return jjMoveStringLiteralDfa5_22(active0, 0x208a0004000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_22(active0, 0x400000200000L, active1, 0L, active2, 0L);
      case 112:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(4, 36);
         break;
      case 113:
         return jjMoveStringLiteralDfa5_22(active0, 0x100000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_22(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_22(active0, 0x40000L, active1, 0x1L, active2, 0L);
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(4, 49);
         return jjMoveStringLiteralDfa5_22(active0, 0x20000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_22(active0, 0x80000L, active1, 0x400L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_22(active0, 0x20L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_22(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_22(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_22(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_22(active0, 0x900002000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_22(active0, 0x10000000L, active1, 0x400L);
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(5, 5);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(5, 9);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(5, 19);
         return jjMoveStringLiteralDfa6_22(active0, 0x22029000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_22(active0, 0x10000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_22(active0, 0x10000080000000L, active1, 0L);
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(5, 8);
         return jjMoveStringLiteralDfa6_22(active0, 0x400000000400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_22(active0, 0x14000L, active1, 0L);
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(5, 11);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(5, 102);
         return jjMoveStringLiteralDfa6_22(active0, 0x8000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_22(active0, 0x40000000000L, active1, 0x4000000000000000L);
      case 115:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(5, 64);
         return jjMoveStringLiteralDfa6_22(active0, 0x4000000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(5, 34);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(5, 41);
         return jjMoveStringLiteralDfa6_22(active0, 0x40000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_22(active0, 0x100000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_22(active0, 0x40L, active1, 0L);
      case 119:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(5, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_22(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_22(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_22(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_22(active0, 0x10004000L, active1, 0L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(6, 17);
         return jjMoveStringLiteralDfa7_22(active0, 0x100000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(6, 6);
         else if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(6, 10);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(6, 20);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 40);
         return jjMoveStringLiteralDfa7_22(active0, 0x50000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_22(active0, 0x400000002000L, active1, 0L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(6, 29);
         break;
      case 109:
         return jjMoveStringLiteralDfa7_22(active0, 0x800000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(6, 12);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         return jjMoveStringLiteralDfa7_22(active0, 0x2008000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_22(active0, 0x10000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         break;
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(6, 51);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(6, 74);
         return jjMoveStringLiteralDfa7_22(active0, 0x80000000L, active1, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_22(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_22(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_22(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_22(active0, 0x400000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(7, 18);
         return jjMoveStringLiteralDfa8_22(active0, 0x100000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(7, 35);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_22(active0, 0x80004000L, active1, 0L);
      case 108:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(7, 13);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_22(active0, 0x10000L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(7, 25);
         return jjMoveStringLiteralDfa8_22(active0, 0x10000010000000L, active1, 0L);
      case 117:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(7, 15);
         break;
      case 121:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(7, 126);
         break;
      default :
         break;
   }
   return jjStartNfa_22(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_22(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_22(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_22(active0, 0x10000010000000L);
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(8, 14);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_22(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_22(active0, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa9_22(active0, 0x100000000L);
      case 117:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(8, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_22(7, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_22(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_22(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_22(active0, 0x400000000000L);
      case 101:
         return jjMoveStringLiteralDfa10_22(active0, 0x100000000L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(9, 31);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_22(active0, 0x10000010000000L);
      default :
         break;
   }
   return jjStartNfa_22(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_22(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_22(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa11_22(active0, 0x400000000000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(10, 28);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(10, 52);
         break;
      case 115:
         return jjMoveStringLiteralDfa11_22(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_22(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_22(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_22(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_22(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(11, 46);
         break;
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(11, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_22(10, active0, 0L, 0L);
}
private int jjMoveNfa_22(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 38;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 38:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(36, 24); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 20); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(30, 16); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(27, 9); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 27:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(27, 9); }
                  break;
               case 30:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(30, 16); }
                  break;
               case 33:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 20); }
                  break;
               case 36:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(36, 24); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 97)
                     { jjAddStates(15, 18); }
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 28:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 35;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 32;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 36;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 33;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 30;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 3:
                  if (curChar == 103 && kind > 24)
                     kind = 24;
                  break;
               case 4:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 100 && kind > 30)
                     kind = 30;
                  break;
               case 11:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 117 && kind > 39)
                     kind = 39;
                  break;
               case 18:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 114 && kind > 47)
                     kind = 47;
                  break;
               case 22:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 97)
                     { jjAddStates(15, 18); }
                  break;
               case 29:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 31:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 34:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1){
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_10(){
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 76);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_17(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_17(int pos, long active0){
   return jjMoveNfa_17(jjStopStringLiteralDfa_17(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_17(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_17(0, 0);
   }
}
private int jjMoveNfa_17(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  else if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if (curChar == 48 && kind > 59)
                     kind = 59;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_21(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_21(int pos, long active0){
   return jjMoveNfa_21(jjStopStringLiteralDfa_21(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_21(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_21(0, 0);
   }
}
private int jjMoveNfa_21(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 53)
                     kind = 53;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 5, 6, 7, 8, 9, 10, 7, 8, 9, 10, 11, 12, 28, 
   31, 34, 37, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\141\143\164\151\166\145", 
"\41\141\143\164\151\166\145", "\145\155\141\151\154", "\41\145\155\141\151\154", "\145\156\141\142\154\145", 
"\41\145\156\141\142\154\145", "\150\151\144\144\145\156", "\41\150\151\144\144\145\156", 
"\151\143\157\156\155\141\151\154", "\41\151\143\157\156\155\141\151\154", "\164\162\145\145\155\145\156\165", 
"\41\164\162\145\145\155\145\156\165", "\164\162\165\163\164\145\144", "\41\164\162\165\163\164\145\144", 
"\165\156\151\161\165\145", "\41\165\156\151\161\165\145", "\156\145\167\162\157\167", 
"\150\145\151\147\150\164", "\163\151\172\145", null, "\141\162\147\165\155\145\156\164", 
"\141\144\144\162\145\163\163", "\141\154\164", "\141\160\160\154\151\143\141\164\151\157\156", 
"\143\150\141\156\156\145\154", null, "\144\145\146\151\156\151\164\151\157\156", 
"\145\155\141\151\154\141\144\144\162\145\163\163", "\146\141\170", "\146\157\162\155\141\164", 
"\146\165\154\154\156\141\155\145", "\147\162\157\165\160", "\150\162\145\146", "\154\141\142\145\154", null, 
"\160\141\143\153\141\147\145", "\160\141\162\145\156\164", "\160\141\164\164\145\162\156", 
"\160\150\157\156\145", "\162\157\154\145", "\163\151\164\145", 
"\163\171\155\142\157\154\151\143\156\141\155\145", null, "\165\165\151\144", "\166\141\165\154\164", "\143\157\144\145", 
"\143\157\155\155\145\156\164", "\144\145\163\143\162\151\160\164\151\157\156", null, null, null, null, null, 
null, null, "\153\151\156\144", "\157\162\147\141\156\151\172\141\164\151\157\156", 
"\160\162\157\152\145\143\164", "\162\157\154\145", "\141\143\143\145\163\163", "\141\154\154", "\173", 
"\175", null, "\141\144\155\151\156", "\141\154\154", "\173", "\175", null, 
"\160\162\157\144\165\143\164", "\173", "\175", null, "\164\171\160\145", "\173", "\175", 
"\141\160\160\154\151\143\141\164\151\157\156", "\146\165\154\154", "\142\165\163\151\156\145\163\163", 
"\163\171\163\164\145\155", "\146\151\145\154\144", "\173", "\175", "\156\141\155\145", 
"\154\141\142\145\154", "\163\145\154\145\143\164", 
"\142\165\163\151\156\145\163\163\157\142\152\145\143\164", "\162\145\154\141\164\151\157\156\163\150\151\160", "\162\141\156\147\145", 
"\150\162\145\146", "\141\154\164", "\165\163\145\162", "\163\145\164\164\151\156\147", null, null, 
null, null, "\143\157\154\165\155\156", "\173", "\175", "\156\141\155\145", 
"\154\141\142\145\154", "\163\145\154\145\143\164", 
"\142\165\163\151\156\145\163\163\157\142\152\145\143\164", "\162\145\154\141\164\151\157\156\163\150\151\160", "\162\141\156\147\145", 
"\150\162\145\146", "\141\154\164", "\150\151\144\144\145\156", "\41\150\151\144\144\145\156", 
"\165\163\145\162", "\163\157\162\164\164\171\160\145", "\163\145\164\164\151\156\147", null, null, 
null, null, "\141\154\160\150\141", "\156\165\155\145\162\151\143", 
"\157\164\150\145\162", "\156\157\156\145", "\160\162\157\160\145\162\164\171", "\164\157", 
"\166\141\154\165\145", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 22;
int defaultLexState = 22;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
     case 10:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
     case 11:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_11();
       break;
     case 12:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_12();
       break;
     case 13:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_13();
       break;
     case 14:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_14();
       break;
     case 15:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_15();
       break;
     case 16:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_16();
       break;
     case 17:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_17();
       break;
     case 18:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_18();
       break;
     case 19:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_19();
       break;
     case 20:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_20();
       break;
     case 21:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_21();
       break;
     case 22:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_22();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MxParserTokenManager_mxJPO(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public MxParserTokenManager_mxJPO (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
	
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 38; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {
  
    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 23 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "COLUMN_SORTTYPE_EXPECTED",
   "COLUMN_SETTING_STRING_EXPECTED",
   "COLUMN_STRING_EXPECTED",
   "COLUMN_EXPECTED",
   "COLUMN_OPENEXPECTED",
   "FIELD_SETTING_EXPECTED",
   "FIELD_STRING_EXPECTED",
   "FIELD_EXPECTED",
   "TYPE_EXPECTED",
   "TYPE_OPENEXPECTED",
   "PRODUCT_EXPECTED",
   "PRODUCT_OPENEXPECTED",
   "ADMIN_EXPECTED",
   "ADMIN_OPENEXPECTED",
   "ACCESS_EXPECTED",
   "ACCESS_OPENEXPECTED",
   "KIND_EXPECTED",
   "NATURALNUMBER_EXPECTED",
   "MULTILINESTRING_EXPECTED",
   "FIELD_START_EXPECTED",
   "STRING_EXPECTED",
   "STRING_STRING_EXPECTED",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 21, 
   21, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
   18, 18, 18, 20, 20, 22, 22, 22, 22, 22, 16, 22, 22, 22, 15, 22, 14, 22, -1, 13, 22, 12, 22, -1, 11, 
   10, 22, -1, 9, 8, 22, -1, -1, -1, -1, 19, 7, 22, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 7, 
   6, 6, 4, 3, 22, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 0, 1, 3, 3, 2, 2, 3, 3, 3, 
   3, 20, 21, 20, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0x1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[38];
    private final int[] jjstateSet = new int[2 * 38];

    
    protected int curChar;
}
