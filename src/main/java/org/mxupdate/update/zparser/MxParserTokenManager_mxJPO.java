/* MxParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. MxParserTokenManager.java */
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.zparser;
import java.lang.reflect.InvocationTargetException;
import java.util.Set;
import org.mxupdate.update.datamodel.AttributeCI_mxJPO;
import org.mxupdate.update.datamodel.Dimension_mxJPO;
import org.mxupdate.update.datamodel.Expression_mxJPO;
import org.mxupdate.update.datamodel.Format_mxJPO;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.program.Page_mxJPO;
import org.mxupdate.update.program.ProgramCI_mxJPO;
import org.mxupdate.update.system.IndexCI_mxJPO;
import org.mxupdate.update.system.PackageCI_mxJPO;
import org.mxupdate.update.system.UniqueKeyCI_mxJPO;
import org.mxupdate.update.user.Association_mxJPO;
import org.mxupdate.update.user.Group_mxJPO;
import org.mxupdate.update.user.PersonCI_mxJPO;
import org.mxupdate.update.user.PersonCI_mxJPO.TypeItem;
import org.mxupdate.update.user.Role_mxJPO;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.ExpressionType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.SortType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.Setting;
import org.mxupdate.update.userinterface.Channel_mxJPO;
import org.mxupdate.update.userinterface.Command_mxJPO;
import org.mxupdate.update.userinterface.Form_mxJPO;
import org.mxupdate.update.userinterface.Inquiry_mxJPO;
import org.mxupdate.update.userinterface.Menu_mxJPO;
import org.mxupdate.update.userinterface.Portal_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO.Column;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.AbstractRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.ChannelRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.CommandRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.MenuRef;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/** Token Manager. */
@SuppressWarnings("unused")class MxParserTokenManager_mxJPO implements MxParserConstants_mxJPO {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1, active2, active3), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 217);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 234)
                     kind = 234;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 235)
                     kind = 235;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0){
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 213)
                        kind = 213;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 212)
                     kind = 212;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 213)
                     kind = 213;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 213)
                     kind = 213;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 213)
                     kind = 213;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_19(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_19(int pos, long active0){
   return jjMoveNfa_19(jjStopStringLiteralDfa_19(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_19(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_19(0, 0);
   }
}
private int jjMoveNfa_19(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 168)
                        kind = 168;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 167)
                     kind = 167;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 168)
                     kind = 168;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 168)
                     kind = 168;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 168)
                     kind = 168;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_31(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_31(int pos, long active0, long active1){
   return jjMoveNfa_31(jjStopStringLiteralDfa_31(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_31(){
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa1_31(0x18000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_31(0x20000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_31(0x600000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_31(0x40000000000L);
      case 106:
         return jjMoveStringLiteralDfa1_31(0x800000000000L);
      case 109:
         return jjMoveStringLiteralDfa1_31(0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_31(0x2000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_31(0x4000000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_31(0x8080000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_31(0x100000000000L);
      default :
         return jjMoveNfa_31(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_31(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_31(active1, 0x820000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_31(active1, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_31(active1, 0x8000000000L);
      case 107:
         return jjMoveStringLiteralDfa2_31(active1, 0x200000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_31(active1, 0x40000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_31(active1, 0x8010000000000L);
      case 113:
         return jjMoveStringLiteralDfa2_31(active1, 0x1000000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_31(active1, 0x6000000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_31(active1, 0x100000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_31(active1, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_31(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_31(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_31(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_31(active1, 0x80000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_31(active1, 0x2000000000000L);
      case 108:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 109);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 112);
         return jjMoveStringLiteralDfa3_31(active1, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_31(active1, 0x8000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_31(active1, 0x4010000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_31(active1, 0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_31(active1, 0x460000000000L);
      case 118:
         return jjMoveStringLiteralDfa3_31(active1, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_31(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_31(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_31(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(3, 111);
         return jjMoveStringLiteralDfa4_31(active1, 0x2008000000000L);
      case 101:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(3, 105);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(3, 115);
         return jjMoveStringLiteralDfa4_31(active1, 0x440000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_31(active1, 0x100000000000L);
      case 106:
         return jjMoveStringLiteralDfa4_31(active1, 0x4000000000000L);
      case 108:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(3, 107);
         return jjMoveStringLiteralDfa4_31(active1, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_31(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_31(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_31(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_31(active1, 0x4010000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_31(active1, 0x40000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_31(active1, 0x2100000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_31(active1, 0x408000000000L);
      default :
         break;
   }
   return jjStartNfa_31(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_31(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_31(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_31(active1, 0x10000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_31(active1, 0x4000000000000L);
      case 101:
         return jjMoveStringLiteralDfa6_31(active1, 0x40000000000L);
      case 103:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(5, 108);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_31(active1, 0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_31(active1, 0x400000000000L);
      case 121:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(5, 103);
         break;
      default :
         break;
   }
   return jjStartNfa_31(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_31(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_31(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_31(active1, 0x400000000000L);
      case 110:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 104);
         break;
      case 114:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 106);
         break;
      case 116:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(6, 114);
         break;
      case 122:
         return jjMoveStringLiteralDfa7_31(active1, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_31(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_31(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_31(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_31(active1, 0x2000000000000L);
      case 108:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(7, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_31(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_31(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_31(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa9_31(active1, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_31(7, 0L, active1);
}
private int jjMoveStringLiteralDfa9_31(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_31(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa10_31(active1, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_31(8, 0L, active1);
}
private int jjMoveStringLiteralDfa10_31(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_31(8, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa11_31(active1, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_31(9, 0L, active1);
}
private int jjMoveStringLiteralDfa11_31(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_31(9, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(11, 113);
         break;
      default :
         break;
   }
   return jjStartNfa_31(10, 0L, active1);
}
private int jjMoveNfa_31(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_8(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_8(0x8L);
      case 98:
         return jjMoveStringLiteralDfa1_8(0x20L);
      case 102:
         return jjMoveStringLiteralDfa1_8(0x10L);
      case 115:
         return jjMoveStringLiteralDfa1_8(0x40L);
      case 125:
         return jjStopAtPos(0, 194);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_8(long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa2_8(active3, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa2_8(active3, 0x30L);
      case 121:
         return jjMoveStringLiteralDfa2_8(active3, 0x40L);
      default :
         break;
   }
   return jjStartNfa_8(0, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa2_8(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_8(0, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa3_8(active3, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa3_8(active3, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa3_8(active3, 0x60L);
      default :
         break;
   }
   return jjStartNfa_8(1, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa3_8(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_8(1, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(2, 0L, 0L, 0L, active3);
      return 3;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa4_8(active3, 0x20L);
      case 108:
         if ((active3 & 0x10L) != 0L)
            return jjStopAtPos(3, 196);
         return jjMoveStringLiteralDfa4_8(active3, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa4_8(active3, 0x40L);
      default :
         break;
   }
   return jjStartNfa_8(2, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa4_8(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_8(2, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(3, 0L, 0L, 0L, active3);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_8(active3, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa5_8(active3, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa5_8(active3, 0x20L);
      default :
         break;
   }
   return jjStartNfa_8(3, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa5_8(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_8(3, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(4, 0L, 0L, 0L, active3);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_8(active3, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa6_8(active3, 0x20L);
      case 109:
         if ((active3 & 0x40L) != 0L)
            return jjStopAtPos(5, 198);
         break;
      default :
         break;
   }
   return jjStartNfa_8(4, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa6_8(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_8(4, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(5, 0L, 0L, 0L, active3);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_8(active3, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa7_8(active3, 0x20L);
      default :
         break;
   }
   return jjStartNfa_8(5, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa7_8(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_8(5, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(6, 0L, 0L, 0L, active3);
      return 7;
   }
   switch(curChar)
   {
      case 115:
         if ((active3 & 0x20L) != 0L)
            return jjStopAtPos(7, 197);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_8(active3, 0x8L);
      default :
         break;
   }
   return jjStartNfa_8(6, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa8_8(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_8(6, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(7, 0L, 0L, 0L, active3);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_8(active3, 0x8L);
      default :
         break;
   }
   return jjStartNfa_8(7, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa9_8(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_8(7, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(8, 0L, 0L, 0L, active3);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_8(active3, 0x8L);
      default :
         break;
   }
   return jjStartNfa_8(8, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa10_8(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_8(8, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(9, 0L, 0L, 0L, active3);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active3 & 0x8L) != 0L)
            return jjStopAtPos(10, 195);
         break;
      default :
         break;
   }
   return jjStartNfa_8(9, 0L, 0L, 0L, active3);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_34(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_34(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_34(jjStopStringLiteralDfa_34(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_34(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 193);
      default :
         return jjMoveNfa_34(0, 0);
   }
}
private int jjMoveNfa_34(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 94)
                     kind = 94;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_32(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_32(int pos, long active0){
   return jjMoveNfa_32(jjStopStringLiteralDfa_32(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_32(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_32(0, 0);
   }
}
private int jjMoveNfa_32(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 98)
                        kind = 98;
                  }
                  else if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if (curChar == 48 && kind > 98)
                     kind = 98;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_22(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_22(int pos, long active0){
   return jjMoveNfa_22(jjStopStringLiteralDfa_22(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_22(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_22(0, 0);
   }
}
private int jjMoveNfa_22(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 163)
                        kind = 163;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 162)
                     kind = 162;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 163)
                     kind = 163;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_27(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_27(int pos, long active0, long active1, long active2){
   return jjMoveNfa_27(jjStopStringLiteralDfa_27(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_27(){
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa1_27(0x400L);
      case 105:
         return jjMoveStringLiteralDfa1_27(0x200L);
      default :
         return jjMoveNfa_27(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_27(long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_27(active2, 0x200L);
      case 120:
         return jjMoveStringLiteralDfa2_27(active2, 0x400L);
      default :
         break;
   }
   return jjStartNfa_27(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_27(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_27(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_27(active2, 0x600L);
      default :
         break;
   }
   return jjStartNfa_27(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_27(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_27(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa4_27(active2, 0x600L);
      default :
         break;
   }
   return jjStartNfa_27(2, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa4_27(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_27(2, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(3, 0L, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa5_27(active2, 0x600L);
      default :
         break;
   }
   return jjStartNfa_27(3, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa5_27(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_27(3, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(4, 0L, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa6_27(active2, 0x600L);
      default :
         break;
   }
   return jjStartNfa_27(4, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa6_27(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_27(4, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(5, 0L, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa7_27(active2, 0x600L);
      default :
         break;
   }
   return jjStartNfa_27(5, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa7_27(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_27(5, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(6, 0L, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa8_27(active2, 0x600L);
      default :
         break;
   }
   return jjStartNfa_27(6, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa8_27(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_27(6, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(7, 0L, 0L, active2);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(8, 137);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(8, 138);
         break;
      default :
         break;
   }
   return jjStartNfa_27(7, 0L, 0L, active2);
}
private int jjMoveNfa_27(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1, long active2){
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_10(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 189);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_21(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_21(int pos, long active0){
   return jjMoveNfa_21(jjStopStringLiteralDfa_21(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_21(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_21(0, 0);
   }
}
private int jjMoveNfa_21(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 165)
                        kind = 165;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 164)
                     kind = 164;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 165)
                     kind = 165;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_16(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_16(int pos, long active0, long active1, long active2){
   return jjMoveNfa_16(jjStopStringLiteralDfa_16(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_16(){
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa1_16(0x400000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_16(0x800000000000L);
      default :
         return jjMoveNfa_16(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_16(long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa2_16(active2, 0x400000000000L);
      case 121:
         return jjMoveStringLiteralDfa2_16(active2, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_16(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_16(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_16(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa3_16(active2, 0x400000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_16(active2, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_16(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_16(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_16(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_16(active2, 0x400000000000L);
      case 101:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(3, 175);
         break;
      default :
         break;
   }
   return jjStartNfa_16(2, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa4_16(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_16(2, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(3, 0L, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa5_16(active2, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_16(3, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa5_16(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_16(3, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(4, 0L, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_16(active2, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_16(4, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa6_16(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_16(4, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(5, 0L, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa7_16(active2, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_16(5, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa7_16(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_16(5, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(6, 0L, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa8_16(active2, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_16(6, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa8_16(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_16(6, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(7, 0L, 0L, active2);
      return 8;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa9_16(active2, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_16(7, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa9_16(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_16(7, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(8, 0L, 0L, active2);
      return 9;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa10_16(active2, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_16(8, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa10_16(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_16(8, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(9, 0L, 0L, active2);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_16(active2, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_16(9, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa11_16(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_16(9, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(10, 0L, 0L, active2);
      return 11;
   }
   switch(curChar)
   {
      case 112:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(11, 174);
         break;
      default :
         break;
   }
   return jjStartNfa_16(10, 0L, 0L, active2);
}
private int jjMoveNfa_16(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0, long active1, long active2){
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_13(){
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 181);
      default :
         return jjMoveNfa_13(0, 0);
   }
}
private int jjMoveNfa_13(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 182)
                        kind = 182;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 182)
                     kind = 182;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 182)
                     kind = 182;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 182)
                     kind = 182;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_30(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_30(int pos, long active0){
   return jjMoveNfa_30(jjStopStringLiteralDfa_30(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_30(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_30(0, 0);
   }
}
private int jjMoveNfa_30(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 117)
                     kind = 117;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_20(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_20(int pos, long active0){
   return jjMoveNfa_20(jjStopStringLiteralDfa_20(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_20(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_20(0, 0);
   }
}
private int jjMoveNfa_20(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 166)
                        kind = 166;
                     { jjCheckNAddStates(9, 11); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 166)
                        kind = 166;
                     { jjCheckNAddTwoStates(6, 7); }
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 166)
                        kind = 166;
                     { jjCheckNAddStates(9, 11); }
                  }
                  else if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if (curChar != 45)
                     break;
                  if (kind > 166)
                     kind = 166;
                  { jjCheckNAddStates(9, 11); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  { jjCheckNAddStates(9, 11); }
                  break;
               case 5:
                  if (curChar != 46)
                     break;
                  if (kind > 166)
                     kind = 166;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 8:
                  if (curChar != 45)
                     break;
                  if (kind > 166)
                     kind = 166;
                  { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  { jjCheckNAdd(9); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if (curChar != 69)
                     break;
                  if (kind > 166)
                     kind = 166;
                  { jjAddStates(12, 13); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_26(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_26(int pos, long active0){
   return jjMoveNfa_26(jjStopStringLiteralDfa_26(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_26(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_26(0, 0);
   }
}
private int jjMoveNfa_26(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 139)
                     kind = 139;
                  break;
               case 10:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  { jjCheckNAdd(10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  { jjCheckNAdd(10); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(14, 16); }
                  break;
               case 8:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 140)
                     kind = 140;
                  { jjCheckNAdd(10); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_17(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_17(int pos, long active0){
   return jjMoveNfa_17(jjStopStringLiteralDfa_17(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_17(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_17(0, 0);
   }
}
private int jjMoveNfa_17(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 171)
                     kind = 171;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 172)
                     kind = 172;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xa00000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa2_0(active3, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active3, 0x800000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active3, 0x400000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active3, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa2_0(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_0(0, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa3_0(active3, 0x400000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active3, 0x200000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active3, 0x800000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active3, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa3_0(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_0(1, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, 0L, 0L, active3);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active3 & 0x800000000000L) != 0L)
            return jjStopAtPos(3, 239);
         return jjMoveStringLiteralDfa4_0(active3, 0x600000000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active3, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa4_0(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_0(2, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, 0L, 0L, 0L, active3);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         if ((active3 & 0x100000000000L) != 0L)
            return jjStopAtPos(4, 236);
         break;
      case 114:
         if ((active3 & 0x400000000000L) != 0L)
            return jjStopAtPos(4, 238);
         return jjMoveStringLiteralDfa5_0(active3, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa5_0(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_0(3, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, 0L, 0L, active3);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_0(active3, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa6_0(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_0(4, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, 0L, 0L, active3);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         if ((active3 & 0x200000000000L) != 0L)
            return jjStopAtPos(6, 237);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, 0L, 0L, active3);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_14(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_14(int pos, long active0, long active1, long active2){
   return jjMoveNfa_14(jjStopStringLiteralDfa_14(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_14(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_14(0x8000000000000L);
      case 123:
         return jjStopAtPos(0, 180);
      default :
         return jjMoveNfa_14(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_14(long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa2_14(active2, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_14(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_14(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_14(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 179);
         break;
      default :
         break;
   }
   return jjStartNfa_14(1, 0L, 0L, active2);
}
private int jjMoveNfa_14(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_35(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_35(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_35(jjStopStringLiteralDfa_35(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_35(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 200);
      default :
         return jjMoveNfa_35(0, 0);
   }
}
private int jjMoveNfa_35(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 94)
                     kind = 94;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_3(0x1000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x400000000L);
      case 98:
         return jjMoveStringLiteralDfa1_3(0x40000000L);
      case 104:
         return jjMoveStringLiteralDfa1_3(0xa00000000L);
      case 108:
         return jjMoveStringLiteralDfa1_3(0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa1_3(0x180000000L);
      case 115:
         return jjMoveStringLiteralDfa1_3(0xc020000000L);
      case 117:
         return jjMoveStringLiteralDfa1_3(0x2000000000L);
      case 125:
         return jjStopAtPos(0, 218);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_3(active3, 0x118000000L);
      case 101:
         return jjMoveStringLiteralDfa2_3(active3, 0x80a0000000L);
      case 104:
         return jjMoveStringLiteralDfa2_3(active3, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_3(active3, 0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active3, 0x400000000L);
      case 111:
         return jjMoveStringLiteralDfa2_3(active3, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_3(active3, 0x200000000L);
      case 115:
         return jjMoveStringLiteralDfa2_3(active3, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active3, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa2_3(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_3(0, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_3(active3, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa3_3(active3, 0x800000000L);
      case 101:
         return jjMoveStringLiteralDfa3_3(active3, 0x2200000000L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active3, 0x1000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_3(active3, 0xa0000000L);
      case 109:
         return jjMoveStringLiteralDfa3_3(active3, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa3_3(active3, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa3_3(active3, 0x4000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active3, 0x40000000L);
      case 116:
         if ((active3 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 226);
         return jjMoveStringLiteralDfa3_3(active3, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa3_3(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_3(1, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, 0L, 0L, 0L, active3);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_3(active3, 0x80000000L);
      case 100:
         return jjMoveStringLiteralDfa4_3(active3, 0x1800000000L);
      case 101:
         if ((active3 & 0x8000000L) != 0L)
            return jjStopAtPos(3, 219);
         return jjMoveStringLiteralDfa4_3(active3, 0x30000000L);
      case 102:
         if ((active3 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 225);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_3(active3, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa4_3(active3, 0x40000000L);
      case 114:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 229);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_3(active3, 0xc000000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa4_3(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_3(2, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, 0L, 0L, 0L, active3);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_3(active3, 0x20000000L);
      case 100:
         return jjMoveStringLiteralDfa5_3(active3, 0x1000000000L);
      case 101:
         if ((active3 & 0x100000000L) != 0L)
            return jjStopAtPos(4, 224);
         return jjMoveStringLiteralDfa5_3(active3, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa5_3(active3, 0x8000000000L);
      case 108:
         if ((active3 & 0x10000000L) != 0L)
            return jjStopAtPos(4, 220);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_3(active3, 0x40000000L);
      case 116:
         return jjMoveStringLiteralDfa5_3(active3, 0x4080000000L);
      default :
         break;
   }
   return jjStartNfa_3(3, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa5_3(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_3(3, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, 0L, 0L, 0L, active3);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa6_3(active3, 0x1040000000L);
      case 105:
         return jjMoveStringLiteralDfa6_3(active3, 0x80000000L);
      case 110:
         if ((active3 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 227);
         return jjMoveStringLiteralDfa6_3(active3, 0x8000000000L);
      case 116:
         if ((active3 & 0x20000000L) != 0L)
            return jjStopAtPos(5, 221);
         break;
      case 121:
         return jjMoveStringLiteralDfa6_3(active3, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_3(4, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa6_3(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_3(4, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, 0L, 0L, 0L, active3);
      return 6;
   }
   switch(curChar)
   {
      case 103:
         if ((active3 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 231);
         break;
      case 110:
         if ((active3 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 228);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_3(active3, 0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa7_3(active3, 0x4000000000L);
      case 115:
         return jjMoveStringLiteralDfa7_3(active3, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_3(5, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa7_3(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_3(5, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, 0L, 0L, 0L, active3);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active3 & 0x4000000000L) != 0L)
            return jjStopAtPos(7, 230);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_3(active3, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa8_3(active3, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_3(6, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa8_3(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_3(6, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, 0L, 0L, 0L, active3);
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_3(active3, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa9_3(active3, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_3(7, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa9_3(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_3(7, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, 0L, 0L, 0L, active3);
      return 9;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa10_3(active3, 0x40000000L);
      case 104:
         return jjMoveStringLiteralDfa10_3(active3, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_3(8, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa10_3(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_3(8, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(9, 0L, 0L, 0L, active3);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_3(active3, 0x80000000L);
      case 106:
         return jjMoveStringLiteralDfa11_3(active3, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_3(9, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa11_3(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_3(9, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(10, 0L, 0L, 0L, active3);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_3(active3, 0x40000000L);
      case 112:
         if ((active3 & 0x80000000L) != 0L)
            return jjStopAtPos(11, 223);
         break;
      default :
         break;
   }
   return jjStartNfa_3(10, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa12_3(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_3(10, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(11, 0L, 0L, 0L, active3);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_3(active3, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_3(11, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa13_3(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_3(11, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(12, 0L, 0L, 0L, active3);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         if ((active3 & 0x40000000L) != 0L)
            return jjStopAtPos(13, 222);
         break;
      default :
         break;
   }
   return jjStartNfa_3(12, 0L, 0L, 0L, active3);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_24(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_24(int pos, long active0){
   return jjMoveNfa_24(jjStopStringLiteralDfa_24(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_24(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_24(0, 0);
   }
}
private int jjMoveNfa_24(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 146)
                     kind = 146;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 147)
                     kind = 147;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_33(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_33(int pos, long active0){
   return jjMoveNfa_33(jjStopStringLiteralDfa_33(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_33(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_33(0, 0);
   }
}
private int jjMoveNfa_33(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                     { jjCheckNAdd(13); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000600L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 96)
                     kind = 96;
                  break;
               case 13:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 13:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(13); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(17, 22); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 11:
                  if (curChar == 110)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 12:
                  if (curChar == 116)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 13:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(13); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_29(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_29(int pos, long active0, long active1){
   return jjMoveNfa_29(jjStopStringLiteralDfa_29(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_29(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_29(0x40000000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_29(0x80000000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_29(0x100000000000000L);
      default :
         return jjMoveNfa_29(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_29(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa2_29(active1, 0x40000000000000L);
      case 104:
         return jjMoveStringLiteralDfa2_29(active1, 0x80000000000000L);
      case 118:
         return jjMoveStringLiteralDfa2_29(active1, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_29(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_29(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_29(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa3_29(active1, 0x180000000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_29(active1, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_29(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_29(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_29(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_29(active1, 0x80000000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_29(active1, 0x40000000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_29(active1, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_29(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_29(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_29(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 107:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(4, 119);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_29(active1, 0x40000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_29(active1, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_29(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_29(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_29(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_29(active1, 0x100000000000000L);
      case 110:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(5, 118);
         break;
      default :
         break;
   }
   return jjStartNfa_29(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_29(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_29(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa7_29(active1, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_29(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_29(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_29(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(7, 120);
         break;
      default :
         break;
   }
   return jjStartNfa_29(6, 0L, active1);
}
private int jjMoveNfa_29(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_25(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_25(int pos, long active0, long active1, long active2){
   return jjMoveNfa_25(jjStopStringLiteralDfa_25(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_25(){
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa1_25(0x10000L);
      case 105:
         return jjMoveStringLiteralDfa1_25(0x8000L);
      default :
         return jjMoveNfa_25(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_25(long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_25(active2, 0x8000L);
      case 120:
         return jjMoveStringLiteralDfa2_25(active2, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_25(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_25(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_25(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_25(active2, 0x18000L);
      default :
         break;
   }
   return jjStartNfa_25(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_25(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_25(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa4_25(active2, 0x18000L);
      default :
         break;
   }
   return jjStartNfa_25(2, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa4_25(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_25(2, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(3, 0L, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa5_25(active2, 0x18000L);
      default :
         break;
   }
   return jjStartNfa_25(3, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa5_25(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_25(3, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(4, 0L, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa6_25(active2, 0x18000L);
      default :
         break;
   }
   return jjStartNfa_25(4, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa6_25(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_25(4, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(5, 0L, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa7_25(active2, 0x18000L);
      default :
         break;
   }
   return jjStartNfa_25(5, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa7_25(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_25(5, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(6, 0L, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa8_25(active2, 0x18000L);
      default :
         break;
   }
   return jjStartNfa_25(6, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa8_25(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_25(6, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(7, 0L, 0L, active2);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(8, 143);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(8, 144);
         break;
      default :
         break;
   }
   return jjStartNfa_25(7, 0L, 0L, active2);
}
private int jjMoveNfa_25(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 232)
                     kind = 232;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 233)
                     kind = 233;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0, long active1, long active2){
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_11(){
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 186);
      default :
         return jjMoveNfa_11(0, 0);
   }
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 187)
                        kind = 187;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 187)
                     kind = 187;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_36(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_36(int pos, long active0){
   return jjMoveNfa_36(jjStopStringLiteralDfa_36(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_36(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_36(0, 0);
   }
}
private int jjMoveNfa_36(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 94)
                     kind = 94;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_37(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_37(int pos, long active0){
   return jjMoveNfa_37(jjStopStringLiteralDfa_37(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_37(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_37(0, 0);
   }
}
private int jjMoveNfa_37(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 92)
                     kind = 92;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_7(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_7(0x20000L);
      case 98:
         return jjMoveStringLiteralDfa1_7(0x2000L);
      case 104:
         return jjMoveStringLiteralDfa1_7(0x10000L);
      case 108:
         return jjMoveStringLiteralDfa1_7(0x800L);
      case 110:
         return jjMoveStringLiteralDfa1_7(0x400L);
      case 114:
         return jjMoveStringLiteralDfa1_7(0xc000L);
      case 115:
         return jjMoveStringLiteralDfa1_7(0x81000L);
      case 117:
         return jjMoveStringLiteralDfa1_7(0x40000L);
      case 125:
         return jjStopAtPos(0, 201);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_7(long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_7(active3, 0x8c00L);
      case 101:
         return jjMoveStringLiteralDfa2_7(active3, 0x85000L);
      case 108:
         return jjMoveStringLiteralDfa2_7(active3, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa2_7(active3, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa2_7(active3, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa2_7(active3, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_7(0, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa2_7(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_7(0, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_7(active3, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa3_7(active3, 0x50000L);
      case 108:
         return jjMoveStringLiteralDfa3_7(active3, 0x5000L);
      case 109:
         return jjMoveStringLiteralDfa3_7(active3, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa3_7(active3, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa3_7(active3, 0x2000L);
      case 116:
         if ((active3 & 0x20000L) != 0L)
            return jjStopAtPos(2, 209);
         return jjMoveStringLiteralDfa3_7(active3, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_7(1, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa3_7(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_7(1, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(2, 0L, 0L, 0L, active3);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_7(active3, 0x4000L);
      case 101:
         if ((active3 & 0x400L) != 0L)
            return jjStopAtPos(3, 202);
         return jjMoveStringLiteralDfa4_7(active3, 0x1800L);
      case 102:
         if ((active3 & 0x10000L) != 0L)
            return jjStopAtPos(3, 208);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_7(active3, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa4_7(active3, 0x2000L);
      case 114:
         if ((active3 & 0x40000L) != 0L)
            return jjStopAtPos(3, 210);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_7(active3, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_7(2, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa4_7(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_7(2, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(3, 0L, 0L, 0L, active3);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_7(active3, 0x1000L);
      case 101:
         if ((active3 & 0x8000L) != 0L)
            return jjStopAtPos(4, 207);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_7(active3, 0x80000L);
      case 108:
         if ((active3 & 0x800L) != 0L)
            return jjStopAtPos(4, 203);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_7(active3, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa5_7(active3, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_7(3, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa5_7(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_7(3, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(4, 0L, 0L, 0L, active3);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa6_7(active3, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa6_7(active3, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa6_7(active3, 0x80000L);
      case 116:
         if ((active3 & 0x1000L) != 0L)
            return jjStopAtPos(5, 204);
         break;
      default :
         break;
   }
   return jjStartNfa_7(4, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa6_7(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_7(4, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(5, 0L, 0L, 0L, active3);
      return 6;
   }
   switch(curChar)
   {
      case 103:
         if ((active3 & 0x80000L) != 0L)
            return jjStopAtPos(6, 211);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_7(active3, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa7_7(active3, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_7(5, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa7_7(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_7(5, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(6, 0L, 0L, 0L, active3);
      return 7;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa8_7(active3, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa8_7(active3, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_7(6, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa8_7(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_7(6, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(7, 0L, 0L, 0L, active3);
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_7(active3, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa9_7(active3, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_7(7, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa9_7(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_7(7, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(8, 0L, 0L, 0L, active3);
      return 9;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa10_7(active3, 0x2000L);
      case 104:
         return jjMoveStringLiteralDfa10_7(active3, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_7(8, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa10_7(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_7(8, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(9, 0L, 0L, 0L, active3);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_7(active3, 0x4000L);
      case 106:
         return jjMoveStringLiteralDfa11_7(active3, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_7(9, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa11_7(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_7(9, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(10, 0L, 0L, 0L, active3);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_7(active3, 0x2000L);
      case 112:
         if ((active3 & 0x4000L) != 0L)
            return jjStopAtPos(11, 206);
         break;
      default :
         break;
   }
   return jjStartNfa_7(10, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa12_7(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_7(10, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(11, 0L, 0L, 0L, active3);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_7(active3, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_7(11, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa13_7(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_7(11, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(12, 0L, 0L, 0L, active3);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         if ((active3 & 0x2000L) != 0L)
            return jjStopAtPos(13, 205);
         break;
      default :
         break;
   }
   return jjStartNfa_7(12, 0L, 0L, 0L, active3);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_38(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0x1c000L) != 0L)
            return 8;
         if ((active0 & 0xa80000000L) != 0L || (active1 & 0x3000L) != 0L)
            return 44;
         if ((active0 & 0x20000000000L) != 0L || (active1 & 0xc0000L) != 0L || (active2 & 0x20000L) != 0L)
            return 23;
         if ((active0 & 0x78000000000020L) != 0L || (active2 & 0x84000000000000L) != 0L)
            return 28;
         if ((active0 & 0x80000000000080L) != 0L || (active1 & 0x3800000L) != 0L || (active3 & 0x1000000L) != 0L)
            return 15;
         if ((active0 & 0x1000000a00000L) != 0L || (active1 & 0x40L) != 0L)
            return 19;
         return -1;
      case 1:
         if ((active1 & 0x40000L) != 0L)
            return 22;
         if ((active1 & 0x3800000L) != 0L || (active3 & 0x1000000L) != 0L)
            return 14;
         if ((active0 & 0x80000000L) != 0L)
            return 43;
         if ((active0 & 0x10000000000000L) != 0L || (active2 & 0x80000000000000L) != 0L)
            return 26;
         return -1;
      case 2:
         if ((active1 & 0x40000L) != 0L)
            return 21;
         if ((active0 & 0x10000000000000L) != 0L)
            return 147;
         if ((active1 & 0x1000000L) != 0L)
            return 13;
         if ((active0 & 0x80000000L) != 0L)
            return 42;
         return -1;
      case 3:
         if ((active1 & 0x1000000L) != 0L)
            return 12;
         if ((active0 & 0x80000000L) != 0L)
            return 39;
         return -1;
      case 4:
         if ((active0 & 0x80000000L) != 0L)
            return 148;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_38(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_38(jjStopStringLiteralDfa_38(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_38(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_38(0x55555555540L, 0x0L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_38(0x78000000000020L, 0x0L, 0x84000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_38(0x80000000000080L, 0x3800000L, 0x0L, 0x1000000L);
      case 100:
         return jjMoveStringLiteralDfa1_38(0x600080000000200L, 0xc000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_38(0x1800100000002800L, 0x0L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_38(0xe000000000000000L, 0x1L, 0x200000000000L, 0x80L);
      case 103:
         return jjMoveStringLiteralDfa1_38(0x8000L, 0x2L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_38(0x800000020000L, 0x4L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_38(0x200000080000L, 0x8L, 0x0L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_38(0x0L, 0x4000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_38(0x0L, 0x10L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_38(0x1000000a00000L, 0x40L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_38(0x400002000000L, 0x0L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_38(0x28000000L, 0x800000f80L, 0x1000000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_38(0xa80000000L, 0x3000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_38(0x2000000000000L, 0x1c000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_38(0xa000000000L, 0x10001000000000L, 0x0L, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa1_38(0x20000000000L, 0xc0000L, 0x20000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_38(0x0L, 0x2000700000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_38(0x0L, 0x0L, 0x1000000000000L, 0x0L);
      default :
         return jjMoveNfa_38(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_38(long active0, long active1, long active2, long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_38(active0, 0x2001000080000040L, active1, 0x2000100390L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_38(active0, 0x80120L, active1, 0L, active2, 0x4000000000000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_38(active0, 0x810000000000400L, active1, 0L, active2, 0x80000000000000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_38(active0, 0x200c80a02005000L, active1, 0xc200000L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_38(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_38(active0, 0x80000000040000L, active1, 0x400L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_38(active0, 0x4402000008120000L, active1, 0x4000404040L, active2, 0x1000000000000L, active3, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa2_38(active0, 0x20000000008000L, active1, 0L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_38(active0, 0x1000200001400800L, active1, 0L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_38(active0, 0x20004002000L, active1, 0x8L, active2, 0x20000L, active3, 0L);
      case 111:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         return jjMoveStringLiteralDfa2_38(active0, 0x8000000020000200L, active1, 0x3801000L, active2, 0x200000000000L, active3, 0x1000000L);
      case 112:
         return jjMoveStringLiteralDfa2_38(active0, 0x40000050000000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_38(active0, 0x800b500000000L, active1, 0x10000800000806L, active2, 0x1000000000000000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_38(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_38(active0, 0x14000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_38(active0, 0x40000a00080L, active1, 0x8a001L, active2, 0L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_38(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_38(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0x1L);
      default :
         break;
   }
   return jjStartNfa_38(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_38(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_38(0, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_38(active0, 0x1080000100002800L, active1, 0L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_38(active0, 0L, active1, 0x10L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_38(active0, 0x100040L, active1, 0x80L, active2, 0x4000000000000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_38(active0, 0x10000000020000L, active1, 0x800000L, active2, 0L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_38(active0, 0x103406000000L, active1, 0x440004L, active2, 0L, active3, 0x80L);
      case 102:
         return jjMoveStringLiteralDfa3_38(active0, 0x200080000000000L, active1, 0x4008000L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_38(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_38(active0, 0x800820010040000L, active1, 0x10000000080800L, active2, 0x20000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_38(active0, 0x4000000000a10000L, active1, 0x2000003001L, active2, 0L, active3, 0x1000000L);
      case 109:
         return jjMoveStringLiteralDfa3_38(active0, 0x400200000001000L, active1, 0x1010040L, active2, 0x80000000000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_38(active0, 0x40080004000L, active1, 0x4002000000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_38(active0, 0x60088400L, active1, 0x800000402L, active2, 0x1000000000000000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_38(active0, 0x40000008000000L, active1, 0x8L, active2, 0L, active3, 0x1L);
      case 114:
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_38(active0, 0x8000014000000000L, active1, 0x200100L, active2, 0L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_38(active0, 0xa00000080L, active1, 0x8000000L, active2, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 53);
         return jjMoveStringLiteralDfa3_38(active0, 0x20L, active1, 0x4200L, active2, 0x1000000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_38(active0, 0x8001400100L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_38(active0, 0x400000000200L, active1, 0L, active2, 0L, active3, 0L);
      case 120:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(2, 61);
         return jjMoveStringLiteralDfa3_38(active0, 0x1000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_38(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_38(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_38(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_38(1, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_38(active0, 0x5000L, active1, 0x4000000L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_38(active0, 0xa000L, active1, 0x10000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_38(active0, 0x100000000000L, active1, 0x8000000L, active2, 0L, active3, 0L);
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(3, 83);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 102);
         return jjMoveStringLiteralDfa4_38(active0, 0x2060000L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(3, 27);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 49);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(3, 62);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(3, 70);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(3, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(3, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(3, 78);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(3, 87);
         else if ((active3 & 0x1L) != 0L)
            return jjStopAtPos(3, 192);
         return jjMoveStringLiteralDfa4_38(active0, 0x400286a04000000L, active1, 0x110L, active2, 0x4000000000000L, active3, 0L);
      case 102:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(3, 66);
         return jjMoveStringLiteralDfa4_38(active0, 0L, active1, 0x8000L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_38(active0, 0x800080000000L, active1, 0x10000000000000L, active2, 0L, active3, 0L);
      case 104:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(3, 176);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_38(active0, 0x1200040000000820L, active1, 0L, active2, 0x80000000000000L, active3, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_38(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_38(active0, 0x41000021400000L, active1, 0x100001L, active2, 0L, active3, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa4_38(active0, 0x8000000000000000L, active1, 0x1000000L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_38(active0, 0x80000100080200L, active1, 0xc00L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_38(active0, 0x40110000L, active1, 0L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_38(active0, 0x10000000L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_38(active0, 0x20000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_38(active0, 0x10400000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_38(active0, 0x9400000100L, active1, 0x240000L, active2, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(3, 59);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(3, 145);
         return jjMoveStringLiteralDfa4_38(active0, 0xa000c0L, active1, 0x2000200L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_38(active0, 0x8010000000000L, active1, 0x200000000aL, active2, 0L, active3, 0x1000000L);
      case 119:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(3, 86);
         return jjMoveStringLiteralDfa4_38(active0, 0x400L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_38(2, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa4_38(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_38(2, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_38(active0, 0x8000000000008000L, active1, 0x80L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_38(active0, 0x14000L, active1, 0L, active2, 0L, active3, 0L);
      case 100:
         if ((active3 & 0x80L) != 0L)
            return jjStopAtPos(4, 199);
         return jjMoveStringLiteralDfa5_38(active0, 0x200004040000L, active1, 0L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(4, 28);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(4, 74);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 101);
         return jjMoveStringLiteralDfa5_38(active0, 0x110054a0020000L, active1, 0x803000200L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_38(active0, 0x100000000L, active1, 0x10000000000000L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_38(active0, 0x800000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_38(active0, 0x40000000a01040L, active1, 0x208000L, active2, 0L, active3, 0L);
      case 108:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(4, 68);
         return jjMoveStringLiteralDfa5_38(active0, 0x1000000040002200L, active1, 0L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_38(active0, 0x8002000080000L, active1, 0L, active2, 0L, active3, 0x1000000L);
      case 110:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStopAtPos(4, 183);
         return jjMoveStringLiteralDfa5_38(active0, 0x680000000100400L, active1, 0x101L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_38(active0, 0x400000000080L, active1, 0x10000L, active2, 0L, active3, 0L);
      case 112:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(4, 65);
         return jjMoveStringLiteralDfa5_38(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      case 113:
         return jjMoveStringLiteralDfa5_38(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_38(active0, 0x80000000000L, active1, 0x8000000L, active2, 0L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_38(active0, 0x10002000000L, active1, 0L, active2, 0x4000000000000L, active3, 0L);
      case 116:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(4, 67);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(4, 75);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(4, 84);
         return jjMoveStringLiteralDfa5_38(active0, 0x8a01400100L, active1, 0L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_38(active0, 0x120000000000L, active1, 0x4000000L, active2, 0x1000000000000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_38(active0, 0x20L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_38(3, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa5_38(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_38(3, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_38(active0, 0x1000000000090000L, active1, 0x40001L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_38(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_38(active0, 0x40000000000000L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 100:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(5, 29);
         break;
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(5, 5);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(5, 41);
         return jjMoveStringLiteralDfa6_38(active0, 0x8800a140040000L, active1, 0x10000000000000L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_38(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_38(active0, 0x200200001400000L, active1, 0x8000000L, active2, 0L, active3, 0L);
      case 108:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(5, 15);
         return jjMoveStringLiteralDfa6_38(active0, 0x204400L, active1, 0x4010000L, active2, 0L, active3, 0L);
      case 109:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         return jjMoveStringLiteralDfa6_38(active0, 0x4000100000L, active1, 0L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(5, 17);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStopAtPos(5, 216);
         return jjMoveStringLiteralDfa6_38(active0, 0x1000000000000L, active1, 0x3000000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_38(active0, 0xa00000300L, active1, 0x200000L, active2, 0L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_38(active0, 0x80000000000L, active1, 0x800000200L, active2, 0L, active3, 0L);
      case 115:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStopAtPos(5, 178);
         return jjMoveStringLiteralDfa6_38(active0, 0x410000004000000L, active1, 0L, active2, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(5, 47);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(5, 63);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(5, 72);
         return jjMoveStringLiteralDfa6_38(active0, 0x111400000000L, active1, 0L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_38(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_38(active0, 0x80800040L, active1, 0L, active2, 0L, active3, 0L);
      case 119:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(5, 46);
         break;
      case 120:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(5, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_38(4, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa6_38(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_38(4, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(5, active0, active1, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_38(active0, 0x40200080900200L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_38(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_38(active0, 0L, active1, 0x40000L, active2, 0L);
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 30);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 39);
         return jjMoveStringLiteralDfa7_38(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(6, 6);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(6, 14);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(6, 44);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(6, 71);
         return jjMoveStringLiteralDfa7_38(active0, 0x94000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_38(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_38(active0, 0x400000000280000L, active1, 0x10000L, active2, 0L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(6, 16);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(6, 55);
         return jjMoveStringLiteralDfa7_38(active0, 0x400000L, active1, 0L, active2, 0L);
      case 109:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(6, 8);
         return jjMoveStringLiteralDfa7_38(active0, 0L, active1, 0x1L, active2, 0L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(6, 18);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(6, 73);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(6, 85);
         return jjMoveStringLiteralDfa7_38(active0, 0x8002a00000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_38(active0, 0x1400000400L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_38(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 114:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(6, 116);
         break;
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(6, 52);
         break;
      case 116:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 90);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(6, 188);
         return jjMoveStringLiteralDfa7_38(active0, 0x200000000000000L, active1, 0x800000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_38(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_38(active0, 0x101000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_38(5, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa7_38(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_38(5, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(6, active0, active1, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_38(active0, 0x101000400L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_38(active0, 0x200000000L, active1, 0x10000L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(7, 40);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(7, 43);
         return jjMoveStringLiteralDfa8_38(active0, 0x1000000000000200L, active1, 0L);
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(7, 64);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_38(active0, 0x200000000500000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa8_38(active0, 0L, active1, 0x40000L);
      case 108:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(7, 19);
         return jjMoveStringLiteralDfa8_38(active0, 0x80800000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_38(active0, 0x5400200000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_38(active0, 0x400000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_38(active0, 0x800000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_38(active0, 0x2000000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(7, 51);
         return jjMoveStringLiteralDfa8_38(active0, 0x41200000000000L, active1, 0x8000000L);
      case 117:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(7, 37);
         return jjMoveStringLiteralDfa8_38(active0, 0x4000000L, active1, 0L);
      case 121:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(7, 99);
         break;
      default :
         break;
   }
   return jjStartNfa_38(6, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa8_38(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_38(6, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(7, active0, active1, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_38(active0, 0x200L, active1, 0x40000L);
      case 99:
         return jjMoveStringLiteralDfa9_38(active0, 0x400000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa9_38(active0, 0x400L, active1, 0L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(8, 21);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(8, 45);
         return jjMoveStringLiteralDfa9_38(active0, 0x800000000L, active1, 0L);
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(8, 48);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_38(active0, 0x40000002000000L, active1, 0x8000000L);
      case 108:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(8, 20);
         return jjMoveStringLiteralDfa9_38(active0, 0x301000000L, active1, 0L);
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(8, 58);
         return jjMoveStringLiteralDfa9_38(active0, 0x400000L, active1, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa9_38(active0, 0x200000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_38(active0, 0x1000001000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_38(active0, 0x4000000L, active1, 0L);
      case 117:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(8, 38);
         return jjMoveStringLiteralDfa9_38(active0, 0x80800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_38(7, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_38(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_38(7, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(8, active0, active1, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_38(active0, 0x400L, active1, 0x10000L);
      case 98:
         return jjMoveStringLiteralDfa10_38(active0, 0x200L, active1, 0L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(9, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(9, 23);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(9, 31);
         return jjMoveStringLiteralDfa10_38(active0, 0x1000001000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa10_38(active0, 0L, active1, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa10_38(active0, 0x4000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_38(active0, 0x400000000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(9, 57);
         return jjMoveStringLiteralDfa10_38(active0, 0x2000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_38(active0, 0x40000200000000L, active1, 0x8000000L);
      case 117:
         return jjMoveStringLiteralDfa10_38(active0, 0x101000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa10_38(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_38(8, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_38(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_38(8, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(9, active0, active1, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa11_38(active0, 0x400L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(10, 24);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(10, 32);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(10, 82);
         return jjMoveStringLiteralDfa11_38(active0, 0x2000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_38(active0, 0x800000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_38(active0, 0x200L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_38(active0, 0L, active1, 0x10000L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(10, 54);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(10, 91);
         return jjMoveStringLiteralDfa11_38(active0, 0x204000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_38(active0, 0x400000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa11_38(active0, 0x1000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa11_38(active0, 0x1000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_38(9, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_38(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_38(9, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(10, active0, active1, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(11, 9);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(11, 33);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(11, 80);
         return jjMoveStringLiteralDfa12_38(active0, 0x4000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_38(active0, 0x1000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_38(active0, 0x400L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_38(active0, 0x400000000L, active1, 0L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(11, 60);
         return jjMoveStringLiteralDfa12_38(active0, 0x802000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_38(10, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_38(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_38(10, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(11, active0, 0L, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(12, 10);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(12, 34);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_38(active0, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa13_38(active0, 0x1006000000L);
      default :
         break;
   }
   return jjStartNfa_38(11, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_38(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_38(11, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(12, active0, 0L, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa14_38(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa14_38(active0, 0x802000000L);
      case 115:
         return jjMoveStringLiteralDfa14_38(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_38(12, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_38(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_38(12, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(13, active0, 0L, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa15_38(active0, 0x2000000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(14, 35);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_38(active0, 0x1004000000L);
      default :
         break;
   }
   return jjStartNfa_38(13, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_38(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_38(13, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(14, active0, 0L, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa16_38(active0, 0x4000000L);
      case 106:
         return jjMoveStringLiteralDfa16_38(active0, 0x2000000L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(15, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_38(14, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_38(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_38(14, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(15, active0, 0L, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_38(active0, 0x2000000L);
      case 106:
         return jjMoveStringLiteralDfa17_38(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_38(15, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_38(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_38(15, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(16, active0, 0L, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_38(active0, 0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa18_38(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_38(16, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_38(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_38(16, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(17, active0, 0L, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa19_38(active0, 0x4000000L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(18, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_38(17, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa19_38(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_38(17, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_38(18, active0, 0L, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(19, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_38(18, active0, 0L, 0L, 0L);
}
private int jjMoveNfa_38(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 147;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 148:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(136, 143); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(124, 131); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(112, 119); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(101, 107); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(90, 96); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(80, 85); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(73, 75); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(66, 68); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(59, 61); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(52, 54); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(46, 47); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 147:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(36, 24); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 20); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(30, 16); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(27, 9); }
                  break;
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 27:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(27, 9); }
                  break;
               case 30:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(30, 16); }
                  break;
               case 33:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 20); }
                  break;
               case 36:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(36, 24); }
                  break;
               case 40:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if (curChar == 61 && kind > 121)
                     kind = 121;
                  break;
               case 46:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(46, 47); }
                  break;
               case 47:
                  if (curChar == 62 && kind > 122)
                     kind = 122;
                  break;
               case 52:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(52, 54); }
                  break;
               case 53:
                  if (curChar == 61 && kind > 123)
                     kind = 123;
                  break;
               case 54:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 59:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(59, 61); }
                  break;
               case 60:
                  if (curChar == 32 && kind > 124)
                     kind = 124;
                  break;
               case 61:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 66:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(66, 68); }
                  break;
               case 67:
                  if (curChar == 61 && kind > 125)
                     kind = 125;
                  break;
               case 68:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 73:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(73, 75); }
                  break;
               case 74:
                  if (curChar == 61 && kind > 126)
                     kind = 126;
                  break;
               case 75:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 80:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(80, 85); }
                  break;
               case 90:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(90, 96); }
                  break;
               case 96:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 101:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(101, 107); }
                  break;
               case 112:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(112, 119); }
                  break;
               case 119:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 124:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(124, 131); }
                  break;
               case 136:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(136, 143); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 135;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 123;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 111;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 100;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 79;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 72;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 65;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 51;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 45;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 43:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 144;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 132;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 120;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 108;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 97;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 86;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 76;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 69;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 62;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 55;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 48;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 145;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 133;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 121;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 109;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 98;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 87;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 77;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 63;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 56;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 26:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 36;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 33;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 30;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 35;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 32;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 39:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 136;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 124;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 112;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 101;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 90;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 80;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 73;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 66;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 59;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 52;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 46;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 0:
                  if (curChar == 114)
                     { jjAddStates(23, 34); }
                  else if (curChar == 97)
                     { jjAddStates(35, 38); }
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 3:
                  if (curChar == 103 && kind > 50)
                     kind = 50;
                  break;
               case 4:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 100 && kind > 56)
                     kind = 56;
                  break;
               case 11:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 117 && kind > 69)
                     kind = 69;
                  break;
               case 18:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 114 && kind > 81)
                     kind = 81;
                  break;
               case 22:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 97)
                     { jjAddStates(35, 38); }
                  break;
               case 29:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 31:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 34:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 38:
                  if (curChar == 114)
                     { jjAddStates(23, 34); }
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 49:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 55:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 56:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 62:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 63:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 69:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 70:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 77:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 81:
                  if (curChar == 104 && kind > 127)
                     kind = 127;
                  break;
               case 82:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 87:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 91:
                  if (curChar == 104 && kind > 128)
                     kind = 128;
                  break;
               case 92:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 97:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 98:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 102:
                  if (curChar == 104 && kind > 129)
                     kind = 129;
                  break;
               case 103:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 109:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 113:
                  if (curChar == 104 && kind > 130)
                     kind = 130;
                  break;
               case 114:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 120:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 121:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 125:
                  if (curChar == 109 && kind > 131)
                     kind = 131;
                  break;
               case 126:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 133:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 137:
                  if (curChar == 110 && kind > 132)
                     kind = 132;
                  break;
               case 138:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 145:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 147 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1, long active2){
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_9(){
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 190);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 191)
                     kind = 191;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0){
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 215)
                        kind = 215;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 214)
                     kind = 214;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 215)
                     kind = 215;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_23(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_23(int pos, long active0, long active1, long active2){
   return jjMoveNfa_23(jjStopStringLiteralDfa_23(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_23(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_23(0x1000000L);
      case 100:
         return jjMoveStringLiteralDfa1_23(0x2800000L);
      case 108:
         return jjMoveStringLiteralDfa1_23(0x4000000L);
      case 109:
         return jjMoveStringLiteralDfa1_23(0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa1_23(0x10000000L);
      case 112:
         return jjMoveStringLiteralDfa1_23(0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa1_23(0x220000000L);
      case 116:
         return jjMoveStringLiteralDfa1_23(0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa1_23(0x400000L);
      case 118:
         return jjMoveStringLiteralDfa1_23(0x80000000L);
      case 123:
         return jjStopAtPos(0, 148);
      case 125:
         return jjStopAtPos(0, 149);
      default :
         return jjMoveNfa_23(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_23(long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_23(active2, 0x84000000L);
      case 100:
         return jjMoveStringLiteralDfa2_23(active2, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa2_23(active2, 0x22800000L);
      case 102:
         return jjMoveStringLiteralDfa2_23(active2, 0x10000000L);
      case 111:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         break;
      case 114:
         return jjMoveStringLiteralDfa2_23(active2, 0x40000000L);
      case 117:
         return jjMoveStringLiteralDfa2_23(active2, 0x8400000L);
      case 121:
         return jjMoveStringLiteralDfa2_23(active2, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_23(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_23(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_23(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_23(active2, 0x4000000L);
      case 101:
         return jjMoveStringLiteralDfa3_23(active2, 0x1000000L);
      case 102:
         return jjMoveStringLiteralDfa3_23(active2, 0x10800000L);
      case 105:
         return jjMoveStringLiteralDfa3_23(active2, 0x400000L);
      case 108:
         return jjMoveStringLiteralDfa3_23(active2, 0x88000000L);
      case 111:
         return jjMoveStringLiteralDfa3_23(active2, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa3_23(active2, 0x202000000L);
      case 116:
         return jjMoveStringLiteralDfa3_23(active2, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_23(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_23(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_23(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_23(active2, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa4_23(active2, 0x2000000L);
      case 100:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(3, 150);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_23(active2, 0x4000000L);
      case 102:
         return jjMoveStringLiteralDfa4_23(active2, 0x1000000L);
      case 112:
         return jjMoveStringLiteralDfa4_23(active2, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa4_23(active2, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa4_23(active2, 0x228000000L);
      case 117:
         return jjMoveStringLiteralDfa4_23(active2, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_23(2, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa4_23(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_23(2, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(3, 0L, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_23(active2, 0x1000000L);
      case 101:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 159);
         return jjMoveStringLiteralDfa5_23(active2, 0x250000000L);
      case 105:
         return jjMoveStringLiteralDfa5_23(active2, 0x28000000L);
      case 108:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(4, 154);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_23(active2, 0x2000000L);
      case 117:
         return jjMoveStringLiteralDfa5_23(active2, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_23(3, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa5_23(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_23(3, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(4, 0L, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_23(active2, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa6_23(active2, 0x800000L);
      case 109:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(5, 161);
         break;
      case 110:
         return jjMoveStringLiteralDfa6_23(active2, 0x20000000L);
      case 112:
         return jjMoveStringLiteralDfa6_23(active2, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa6_23(active2, 0x40000000L);
      case 116:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 156);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_23(active2, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_23(4, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa6_23(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_23(4, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(5, 0L, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 103:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(6, 157);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_23(active2, 0x9000000L);
      case 112:
         return jjMoveStringLiteralDfa7_23(active2, 0x2000000L);
      case 116:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(6, 151);
         return jjMoveStringLiteralDfa7_23(active2, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_23(5, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa7_23(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_23(5, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(6, 0L, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa8_23(active2, 0x8000000L);
      case 116:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(7, 152);
         return jjMoveStringLiteralDfa8_23(active2, 0x2000000L);
      case 121:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(7, 158);
         break;
      default :
         break;
   }
   return jjStartNfa_23(6, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa8_23(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_23(6, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(7, 0L, 0L, active2);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_23(active2, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa9_23(active2, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_23(7, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa9_23(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_23(7, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(8, 0L, 0L, active2);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_23(active2, 0x2000000L);
      case 114:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(9, 155);
         break;
      default :
         break;
   }
   return jjStartNfa_23(8, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa10_23(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_23(8, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(9, 0L, 0L, active2);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(10, 153);
         break;
      default :
         break;
   }
   return jjStartNfa_23(9, 0L, 0L, active2);
}
private int jjMoveNfa_23(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_18(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_18(int pos, long active0, long active1, long active2){
   return jjMoveNfa_18(jjStopStringLiteralDfa_18(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_18(){
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa1_18(0x20000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_18(0x40000000000L);
      default :
         return jjMoveNfa_18(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_18(long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_18(active2, 0x40000000000L);
      case 111:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 169);
         break;
      default :
         break;
   }
   return jjStartNfa_18(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_18(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_18(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa3_18(active2, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_18(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_18(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_18(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 116:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 170);
         break;
      default :
         break;
   }
   return jjStartNfa_18(2, 0L, 0L, active2);
}
private int jjMoveNfa_18(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_28(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_28(int pos, long active0){
   return jjMoveNfa_28(jjStopStringLiteralDfa_28(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_28(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_28(0, 0);
   }
}
private int jjMoveNfa_28(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 134)
                        kind = 134;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 133)
                     kind = 133;
                  break;
               case 10:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  { jjCheckNAdd(10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  { jjCheckNAdd(10); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(14, 16); }
                  break;
               case 8:
                  if (curChar == 123)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 9:
                  if (curChar == 125)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 134)
                     kind = 134;
                  { jjCheckNAdd(10); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0, long active1, long active2){
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_12(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_12(0x100000000000000L);
      case 123:
         return jjStopAtPos(0, 185);
      default :
         return jjMoveNfa_12(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_12(long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa2_12(active2, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_12(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_12(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_12(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 184);
         break;
      default :
         break;
   }
   return jjStartNfa_12(1, 0L, 0L, active2);
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_15(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_15(int pos, long active0, long active1, long active2){
   return jjMoveNfa_15(jjStopStringLiteralDfa_15(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_15(){
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa1_15(0x2000000000000L);
      default :
         return jjMoveNfa_15(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_15(long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_15(active2, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_15(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_15(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_15(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa3_15(active2, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_15(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_15(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_15(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa4_15(active2, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_15(2, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa4_15(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_15(2, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(3, 0L, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa5_15(active2, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_15(3, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa5_15(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_15(3, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(4, 0L, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa6_15(active2, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_15(4, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa6_15(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_15(4, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(5, 0L, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_15(active2, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_15(5, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa7_15(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_15(5, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(6, 0L, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_15(active2, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_15(6, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa8_15(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_15(6, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(7, 0L, 0L, active2);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(8, 177);
         break;
      default :
         break;
   }
   return jjStartNfa_15(7, 0L, 0L, active2);
}
private int jjMoveNfa_15(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 1); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 5, 6, 7, 8, 9, 10, 4, 5, 7, 8, 9, 7, 8, 
   9, 7, 8, 9, 10, 11, 12, 44, 50, 57, 64, 71, 78, 88, 99, 110, 
   122, 134, 146, 28, 31, 34, 37, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\141\143\164\151\166\145", 
"\41\141\143\164\151\166\145", "\143\165\163\164\157\155", "\41\143\165\163\164\157\155", 
"\144\157\167\156\154\157\141\144\141\142\154\145", "\41\144\157\167\156\154\157\141\144\141\142\154\145", "\145\155\141\151\154", 
"\41\145\155\141\151\154", "\145\156\141\142\154\145", "\41\145\156\141\142\154\145", 
"\147\154\157\142\141\154", "\41\147\154\157\142\141\154", "\150\151\144\144\145\156", 
"\41\150\151\144\144\145\156", "\151\143\157\156\155\141\151\154", "\41\151\143\157\156\155\141\151\154", 
"\155\165\154\164\151\154\151\156\145", "\41\155\165\154\164\151\154\151\156\145", 
"\155\165\154\164\151\166\141\154\165\145", "\41\155\165\154\164\151\166\141\154\165\145", 
"\156\145\145\144\163\142\165\163\151\156\145\163\163\157\142\152\145\143\164", 
"\41\156\145\145\144\163\142\165\163\151\156\145\163\163\157\142\152\145\143\164", "\160\151\160\145", "\41\160\151\160\145", "\160\157\157\154\145\144", 
"\41\160\157\157\154\145\144", "\162\141\156\147\145\166\141\154\165\145", 
"\41\162\141\156\147\145\166\141\154\165\145", "\162\145\163\145\164\157\156\143\154\157\156\145", 
"\41\162\145\163\145\164\157\156\143\154\157\156\145", "\162\145\163\145\164\157\156\162\145\166\151\163\151\157\156", 
"\41\162\145\163\145\164\157\156\162\145\166\151\163\151\157\156", "\164\162\145\145\155\145\156\165", "\41\164\162\145\145\155\145\156\165", 
"\164\162\165\163\164\145\144", "\41\164\162\165\163\164\145\144", "\165\156\151\161\165\145", 
"\41\165\156\151\161\165\145", "\144\145\146\145\162\162\145\144", "\145\170\145\143\165\164\145", 
"\151\155\155\145\144\151\141\164\145", "\156\145\167\162\157\167", "\150\145\151\147\150\164", 
"\155\141\170\154\145\156\147\164\150", "\163\151\172\145", null, "\141\162\147\165\155\145\156\164", 
"\141\144\144\162\145\163\163", "\141\154\164", "\141\160\160\154\151\143\141\164\151\157\156", 
"\143\150\141\156\156\145\154", null, "\144\145\146\151\156\151\164\151\157\156", 
"\144\151\155\145\156\163\151\157\156", "\145\144\151\164", "\145\155\141\151\154\141\144\144\162\145\163\163", 
"\146\141\170", "\146\151\154\145", "\146\157\162\155\141\164", 
"\146\165\154\154\156\141\155\145", "\147\162\157\165\160", "\150\162\145\146", "\151\156\160\165\164", 
"\154\141\142\145\154", null, "\155\151\155\145", "\160\141\143\153\141\147\145", 
"\160\141\162\145\156\164", "\160\141\164\164\145\162\156", "\160\150\157\156\145", 
"\160\162\151\156\164", "\162\157\154\145", "\162\165\154\145", "\163\151\164\145", 
"\163\165\146\146\151\170", "\163\171\155\142\157\154\151\143\156\141\155\145", null, 
"\165\163\145\163\160\141\143\153\141\147\145", "\165\165\151\144", "\166\141\165\154\164", "\166\145\162\163\151\157\156", 
"\166\151\145\167", "\143\157\144\145", "\143\157\155\155\145\156\164", 
"\143\157\156\164\145\156\164", "\144\145\146\141\165\154\164", 
"\144\145\163\143\162\151\160\164\151\157\156", null, null, null, null, null, null, null, "\160\162\157\160\145\162\164\171", 
"\164\157", "\166\141\154\165\145", "\153\151\156\144", "\142\151\156\141\162\171", 
"\142\157\157\154\145\141\156", "\144\141\164\145", "\151\156\164\145\147\145\162", "\162\145\141\154", 
"\163\164\162\151\156\147", "\145\153\154", "\145\170\164\145\162\156\141\154", "\152\141\166\141", 
"\155\161\154", "\157\162\147\141\156\151\172\141\164\151\157\156", 
"\160\162\157\152\145\143\164", "\162\157\154\145", "\164\162\151\147\147\145\162", null, 
"\141\143\164\151\157\156", "\143\150\145\143\153", "\157\166\145\162\162\151\144\145", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\151\156\143\154\165\163\151\166\145", "\145\170\143\154\165\163\151\166\145", null, null, null, null, 
"\151\156\143\154\165\163\151\166\145", "\145\170\143\154\165\163\151\166\145", "\165\156\151\164", null, null, 
"\173", "\175", "\165\165\151\144", "\144\145\146\141\165\154\164", 
"\41\144\145\146\141\165\154\164", "\144\145\163\143\162\151\160\164\151\157\156", "\154\141\142\145\154", 
"\155\165\154\164\151\160\154\151\145\162", "\157\146\146\163\145\164", "\163\145\164\164\151\156\147", 
"\160\162\157\160\145\162\164\171", "\166\141\154\165\145", "\164\157", "\163\171\163\164\145\155", null, null, 
null, null, null, null, null, "\164\157", "\165\156\151\164", null, null, 
"\146\157\162", "\162\145\154\141\164\151\157\156\163\150\151\160", "\164\171\160\145", 
"\167\151\164\150", "\151\156\164\145\162\146\141\143\145", "\141\143\143\145\163\163", 
"\141\154\154", "\173", "\175", null, "\141\144\155\151\156", "\141\154\154", "\173", "\175", 
null, "\160\162\157\144\165\143\164", "\173", "\175", null, "\164\171\160\145", 
"\173", "\175", "\141\160\160\154\151\143\141\164\151\157\156", "\146\165\154\154", 
"\142\165\163\151\156\145\163\163", "\163\171\163\164\145\155", "\146\151\145\154\144", "\173", "\175", 
"\156\141\155\145", "\154\141\142\145\154", "\163\145\154\145\143\164", 
"\142\165\163\151\156\145\163\163\157\142\152\145\143\164", "\162\145\154\141\164\151\157\156\163\150\151\160", "\162\141\156\147\145", 
"\150\162\145\146", "\141\154\164", "\165\163\145\162", "\163\145\164\164\151\156\147", null, null, 
null, null, "\143\157\154\165\155\156", "\173", "\175", "\156\141\155\145", 
"\154\141\142\145\154", "\163\145\154\145\143\164", 
"\142\165\163\151\156\145\163\163\157\142\152\145\143\164", "\162\145\154\141\164\151\157\156\163\150\151\160", "\162\141\156\147\145", 
"\150\162\145\146", "\141\154\164", "\150\151\144\144\145\156", "\41\150\151\144\144\145\156", 
"\165\163\145\162", "\163\157\162\164\164\171\160\145", "\163\145\164\164\151\156\147", null, null, 
null, null, "\141\154\160\150\141", "\156\165\155\145\162\151\143", 
"\157\164\150\145\162", "\156\157\156\145", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getEndLine();
      beginColumn = endColumn = input_stream.getEndColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 38;
int defaultLexState = 38;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
     case 10:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
     case 11:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_11();
       break;
     case 12:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_12();
       break;
     case 13:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_13();
       break;
     case 14:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_14();
       break;
     case 15:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_15();
       break;
     case 16:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_16();
       break;
     case 17:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_17();
       break;
     case 18:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_18();
       break;
     case 19:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_19();
       break;
     case 20:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 166;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_20();
       break;
     case 21:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_21();
       break;
     case 22:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_22();
       break;
     case 23:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_23();
       break;
     case 24:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_24();
       break;
     case 25:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_25();
       break;
     case 26:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_26();
       break;
     case 27:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_27();
       break;
     case 28:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_28();
       break;
     case 29:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_29();
       break;
     case 30:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_30();
       break;
     case 31:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_31();
       break;
     case 32:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_32();
       break;
     case 33:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_33();
       break;
     case 34:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_34();
       break;
     case 35:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_35();
       break;
     case 36:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_36();
       break;
     case 37:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_37();
       break;
     case 38:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_38();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MxParserTokenManager_mxJPO(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public MxParserTokenManager_mxJPO (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
	
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 147; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {
  
    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 39 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "COLUMN_SORTTYPE_EXPECTED",
   "COLUMN_SETTING_STRING_EXPECTED",
   "COLUMN_STRING_EXPECTED",
   "COLUMN_EXPECTED",
   "COLUMN_OPENEXPECTED",
   "FIELD_SETTING_EXPECTED",
   "FIELD_STRING_EXPECTED",
   "FIELD_EXPECTED",
   "TYPE_EXPECTED",
   "PRODUCT_EXPECTED",
   "PRODUCT_OPEN_EXPECTED",
   "ADMIN_EXPECTED",
   "ADMIN_OPEN_EXPECTED",
   "ACCESS_EXPECTED",
   "ACCESS_OPENEXPECTED",
   "WITH_EXPECTED",
   "FOR_EXPECTED",
   "UNITDEF_SYSTEMUNIT_EXPECTED",
   "UNITDEF_SYSTEMDEF_EXPECTED",
   "UNITDEF_SYSTEMNAME_EXPECTED",
   "UNITDEF_DOUBLE_EXPECTED",
   "UNITDEF_STRINGSTRING_EXPECTED",
   "UNITDEF_STRING_EXPECTED",
   "UNITDEF_EXPECTED",
   "UNITNAME_EXPECTED",
   "BETW4_EXPECTED",
   "BETW3_EXPECTED",
   "BETW2_EXPECTED",
   "BETW1_EXPECTED",
   "TRIGKIND_EXPECTED",
   "TRIGEVENT_EXPECTED",
   "KIND_EXPECTED",
   "NATURALNUMBER_EXPECTED",
   "MULTILINESTRING_EXPECTED",
   "TYPE_OPEN_EXPECTED",
   "FIELD_OPEN_EXPECTED",
   "STRING_EXPECTED",
   "STRING_STRING_EXPECTED",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 32, 32, 
   37, 37, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 
   36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 33, 33, 33, 33, 33, 36, 36, 38, 38, 38, 38, 38, 36, 
   37, 36, 31, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 29, 36, 36, 36, 36, 36, 36, 36, 
   36, 36, 36, 36, 36, 36, 36, 28, 27, 27, -1, -1, 26, 26, 25, 25, -1, -1, 38, 38, 24, 23, 38, -1, 38, 
   22, -1, -1, 22, 22, 20, 20, 21, 22, 22, 21, 19, 23, 23, 22, 22, 23, 18, 18, -1, 17, 23, 23, 16, 36, 
   36, 15, 36, 14, 38, 13, 38, -1, 12, 38, 11, 38, -1, 10, 9, 38, -1, 34, 8, 38, -1, -1, -1, -1, 35, 
   7, 38, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 7, 6, 6, 4, 3, 38, 2, 2, 2, 2, 2, 2, 
   2, 2, -1, -1, 2, 0, 1, 3, 3, 2, 2, 3, 3, 3, 3, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffff9e7fL, 0xffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[147];
    private final int[] jjstateSet = new int[2 * 147];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected int curChar;
}
