/* MxParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. MxParserTokenManager.java */
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.zparser;
import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.Set;
import java.util.HashSet;
import org.mxupdate.update.BusObject_mxJPO;
import org.mxupdate.update.datamodel.AttributeCI_mxJPO;
import org.mxupdate.update.datamodel.Dimension_mxJPO;
import org.mxupdate.update.datamodel.Expression_mxJPO;
import org.mxupdate.update.datamodel.Format_mxJPO;
import org.mxupdate.update.datamodel.Interface_mxJPO;
import org.mxupdate.update.datamodel.PathType_mxJPO;
import org.mxupdate.update.datamodel.Policy_mxJPO;
import org.mxupdate.update.datamodel.Relationship_mxJPO;
import org.mxupdate.update.datamodel.Rule_mxJPO;
import org.mxupdate.update.datamodel.Type_mxJPO;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO.Access;
import org.mxupdate.update.datamodel.helper.LocalAttributeList_mxJPO.LocalAttribute;
import org.mxupdate.update.datamodel.helper.LocalPathTypeList_mxJPO.LocalPathType;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.program.Page_mxJPO;
import org.mxupdate.update.program.ProgramCI_mxJPO;
import org.mxupdate.update.system.IndexCI_mxJPO;
import org.mxupdate.update.system.PackageCI_mxJPO;
import org.mxupdate.update.system.UniqueKeyCI_mxJPO;
import org.mxupdate.update.user.Association_mxJPO;
import org.mxupdate.update.user.Group_mxJPO;
import org.mxupdate.update.user.PersonCI_mxJPO;
import org.mxupdate.update.user.PersonCI_mxJPO.TypeItem;
import org.mxupdate.update.user.Role_mxJPO;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.ExpressionType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.SortType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.Setting;
import org.mxupdate.update.userinterface.Channel_mxJPO;
import org.mxupdate.update.userinterface.Command_mxJPO;
import org.mxupdate.update.userinterface.Form_mxJPO;
import org.mxupdate.update.userinterface.Inquiry_mxJPO;
import org.mxupdate.update.userinterface.Menu_mxJPO;
import org.mxupdate.update.userinterface.Portal_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO.Column;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.AbstractRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.ChannelRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.CommandRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.MenuRef;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AbstractParser_mxJPO.ParseException;
import org.mxupdate.update.util.AbstractParser_mxJPO.SimpleCharStream;
import org.mxupdate.update.util.AbstractParser_mxJPO.Token;
import org.mxupdate.update.util.AbstractParser_mxJPO.TokenMgrError;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/** Token Manager. */
@SuppressWarnings("unused")class MxParserTokenManager_mxJPO implements MxParserConstants_mxJPO {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_33(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_33(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_33(jjStopStringLiteralDfa_33(pos, active0, active1, active2, active3), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_33(){
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 198);
      default :
         return jjMoveNfa_33(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_33(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 197)
                        kind = 197;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 196)
                     kind = 196;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 197)
                     kind = 197;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 317);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_13(){
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 292);
      default :
         return jjMoveNfa_13(0, 0);
   }
}
private int jjMoveNfa_13(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 291)
                        kind = 291;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 290)
                     kind = 290;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 291)
                     kind = 291;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 291)
                     kind = 291;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 291)
                     kind = 291;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 335)
                        kind = 335;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 334)
                     kind = 334;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 335)
                     kind = 335;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 335)
                     kind = 335;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 335)
                     kind = 335;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_19(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_19(int pos, long active0){
   return jjMoveNfa_19(jjStopStringLiteralDfa_19(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_19(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_19(0, 0);
   }
}
private int jjMoveNfa_19(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 271)
                        kind = 271;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 270)
                     kind = 270;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 271)
                     kind = 271;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 271)
                     kind = 271;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 271)
                     kind = 271;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_31(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_31(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_31(jjStopStringLiteralDfa_31(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_31(){
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa1_31(0x1001800L);
      case 99:
         return jjMoveStringLiteralDfa1_31(0x6000000L);
      case 100:
         return jjMoveStringLiteralDfa1_31(0x2000L);
      case 101:
         return jjMoveStringLiteralDfa1_31(0x60000L);
      case 105:
         return jjMoveStringLiteralDfa1_31(0x4000L);
      case 106:
         return jjMoveStringLiteralDfa1_31(0x80000L);
      case 109:
         return jjMoveStringLiteralDfa1_31(0x100000L);
      case 111:
         return jjMoveStringLiteralDfa1_31(0x200000L);
      case 112:
         return jjMoveStringLiteralDfa1_31(0x400000L);
      case 114:
         return jjMoveStringLiteralDfa1_31(0x808000L);
      case 115:
         return jjMoveStringLiteralDfa1_31(0x10000L);
      default :
         return jjMoveNfa_31(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_31(long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_31(active3, 0x1082000L);
      case 101:
         return jjMoveStringLiteralDfa2_31(active3, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa2_31(active3, 0x800L);
      case 107:
         return jjMoveStringLiteralDfa2_31(active3, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa2_31(active3, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa2_31(active3, 0x6801000L);
      case 113:
         return jjMoveStringLiteralDfa2_31(active3, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa2_31(active3, 0x600000L);
      case 116:
         return jjMoveStringLiteralDfa2_31(active3, 0x10000L);
      case 120:
         return jjMoveStringLiteralDfa2_31(active3, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_31(0, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa2_31(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_31(0, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_31(active3, 0x8000L);
      case 103:
         return jjMoveStringLiteralDfa3_31(active3, 0x200000L);
      case 108:
         if ((active3 & 0x20000L) != 0L)
            return jjStopAtPos(2, 209);
         else if ((active3 & 0x100000L) != 0L)
            return jjStopAtPos(2, 212);
         return jjMoveStringLiteralDfa3_31(active3, 0x800000L);
      case 109:
         return jjMoveStringLiteralDfa3_31(active3, 0x6000000L);
      case 110:
         return jjMoveStringLiteralDfa3_31(active3, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa3_31(active3, 0x401000L);
      case 114:
         return jjMoveStringLiteralDfa3_31(active3, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa3_31(active3, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa3_31(active3, 0x46000L);
      case 118:
         return jjMoveStringLiteralDfa3_31(active3, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_31(1, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa3_31(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_31(1, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(2, 0L, 0L, 0L, active3);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active3 & 0x80000L) != 0L)
            return jjStopAtPos(3, 211);
         return jjMoveStringLiteralDfa4_31(active3, 0x200800L);
      case 101:
         if ((active3 & 0x2000L) != 0L)
            return jjStopAtPos(3, 205);
         else if ((active3 & 0x800000L) != 0L)
            return jjStopAtPos(3, 215);
         return jjMoveStringLiteralDfa4_31(active3, 0x44000L);
      case 105:
         return jjMoveStringLiteralDfa4_31(active3, 0x1010000L);
      case 106:
         return jjMoveStringLiteralDfa4_31(active3, 0x400000L);
      case 108:
         if ((active3 & 0x8000L) != 0L)
            return jjStopAtPos(3, 207);
         return jjMoveStringLiteralDfa4_31(active3, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa4_31(active3, 0x6000000L);
      default :
         break;
   }
   return jjStartNfa_31(2, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa4_31(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_31(2, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(3, 0L, 0L, 0L, active3);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         if ((active3 & 0x1000000L) != 0L)
            return jjStopAtPos(4, 216);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_31(active3, 0x401000L);
      case 103:
         return jjMoveStringLiteralDfa5_31(active3, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa5_31(active3, 0x210000L);
      case 111:
         return jjMoveStringLiteralDfa5_31(active3, 0x6000000L);
      case 114:
         return jjMoveStringLiteralDfa5_31(active3, 0x40800L);
      default :
         break;
   }
   return jjStartNfa_31(3, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa5_31(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_31(3, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(4, 0L, 0L, 0L, active3);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_31(active3, 0x1000L);
      case 99:
         return jjMoveStringLiteralDfa6_31(active3, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa6_31(active3, 0x4000L);
      case 103:
         if ((active3 & 0x10000L) != 0L)
            return jjStopAtPos(5, 208);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_31(active3, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa6_31(active3, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa6_31(active3, 0x6000000L);
      case 121:
         if ((active3 & 0x800L) != 0L)
            return jjStopAtPos(5, 203);
         break;
      default :
         break;
   }
   return jjStartNfa_31(4, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa6_31(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_31(4, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(5, 0L, 0L, 0L, active3);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_31(active3, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa7_31(active3, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa7_31(active3, 0x2000000L);
      case 110:
         if ((active3 & 0x1000L) != 0L)
            return jjStopAtPos(6, 204);
         break;
      case 114:
         if ((active3 & 0x4000L) != 0L)
            return jjStopAtPos(6, 206);
         break;
      case 116:
         if ((active3 & 0x400000L) != 0L)
            return jjStopAtPos(6, 214);
         break;
      case 122:
         return jjMoveStringLiteralDfa7_31(active3, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_31(5, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa7_31(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_31(5, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(6, 0L, 0L, 0L, active3);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_31(active3, 0x200000L);
      case 100:
         if ((active3 & 0x4000000L) != 0L)
            return jjStopAtPos(7, 218);
         break;
      case 108:
         if ((active3 & 0x40000L) != 0L)
            return jjStopAtPos(7, 210);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_31(active3, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_31(6, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa8_31(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_31(6, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(7, 0L, 0L, 0L, active3);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_31(active3, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa9_31(active3, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_31(7, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa9_31(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_31(7, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(8, 0L, 0L, 0L, active3);
      return 9;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa10_31(active3, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa10_31(active3, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_31(8, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa10_31(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_31(8, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(9, 0L, 0L, 0L, active3);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa11_31(active3, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa11_31(active3, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_31(9, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa11_31(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_31(9, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(10, 0L, 0L, 0L, active3);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_31(active3, 0x2000000L);
      case 110:
         if ((active3 & 0x200000L) != 0L)
            return jjStopAtPos(11, 213);
         break;
      default :
         break;
   }
   return jjStartNfa_31(10, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa12_31(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_31(10, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_31(11, 0L, 0L, 0L, active3);
      return 12;
   }
   switch(curChar)
   {
      case 108:
         if ((active3 & 0x2000000L) != 0L)
            return jjStopAtPos(12, 217);
         break;
      default :
         break;
   }
   return jjStartNfa_31(11, 0L, 0L, 0L, active3);
}
private int jjMoveNfa_31(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_5(0x100000000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_5(0x400000000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_5(0x200000000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_5(0x800000000000000L);
      case 125:
         return jjStopAtPos(0, 311);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, 0L, 0L, 0L, 0L, active4);
      return 1;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa2_5(active4, 0x100000000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_5(active4, 0x600000000000000L);
      case 121:
         return jjMoveStringLiteralDfa2_5(active4, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(0, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa2_5(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_5(0, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, 0L, 0L, 0L, 0L, active4);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa3_5(active4, 0x200000000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_5(active4, 0x100000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_5(active4, 0xc00000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(1, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa3_5(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_5(1, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(2, 0L, 0L, 0L, 0L, active4);
      return 3;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa4_5(active4, 0x400000000000000L);
      case 108:
         if ((active4 & 0x200000000000000L) != 0L)
            return jjStopAtPos(3, 313);
         return jjMoveStringLiteralDfa4_5(active4, 0x100000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_5(active4, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(2, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa4_5(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_5(2, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(3, 0L, 0L, 0L, 0L, active4);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_5(active4, 0x800000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_5(active4, 0x100000000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_5(active4, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(3, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa5_5(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_5(3, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(4, 0L, 0L, 0L, 0L, active4);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_5(active4, 0x100000000000000L);
      case 101:
         return jjMoveStringLiteralDfa6_5(active4, 0x400000000000000L);
      case 109:
         if ((active4 & 0x800000000000000L) != 0L)
            return jjStopAtPos(5, 315);
         break;
      default :
         break;
   }
   return jjStartNfa_5(4, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa6_5(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_5(4, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(5, 0L, 0L, 0L, 0L, active4);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_5(active4, 0x100000000000000L);
      case 115:
         return jjMoveStringLiteralDfa7_5(active4, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(5, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa7_5(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_5(5, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(6, 0L, 0L, 0L, 0L, active4);
      return 7;
   }
   switch(curChar)
   {
      case 115:
         if ((active4 & 0x400000000000000L) != 0L)
            return jjStopAtPos(7, 314);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_5(active4, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(6, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa8_5(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_5(6, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(7, 0L, 0L, 0L, 0L, active4);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_5(active4, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(7, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa9_5(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_5(7, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(8, 0L, 0L, 0L, 0L, active4);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_5(active4, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(8, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa10_5(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_5(8, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(9, 0L, 0L, 0L, 0L, active4);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active4 & 0x100000000000000L) != 0L)
            return jjStopAtPos(10, 312);
         break;
      default :
         break;
   }
   return jjStartNfa_5(9, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_35(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_35(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_35(jjStopStringLiteralDfa_35(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_35(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 310);
      default :
         return jjMoveNfa_35(0, 0);
   }
}
private int jjMoveNfa_35(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 192)
                     kind = 192;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_32(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_32(int pos, long active0){
   return jjMoveNfa_32(jjStopStringLiteralDfa_32(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_32(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_32(0, 0);
   }
}
private int jjMoveNfa_32(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 199)
                        kind = 199;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 199)
                        kind = 199;
                  }
                  else if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if (curChar == 48 && kind > 199)
                     kind = 199;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 199)
                     kind = 199;
                  { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 199)
                     kind = 199;
                  { jjCheckNAdd(5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_22(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_22(int pos, long active0){
   return jjMoveNfa_22(jjStopStringLiteralDfa_22(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_22(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_22(0, 0);
   }
}
private int jjMoveNfa_22(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 266)
                        kind = 266;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 265)
                     kind = 265;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 266)
                     kind = 266;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 266)
                     kind = 266;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 266)
                     kind = 266;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_27(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_27(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_27(jjStopStringLiteralDfa_27(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_27(){
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa1_27(0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_27(0x1000000000000L);
      default :
         return jjMoveNfa_27(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_27(long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_27(active3, 0x1000000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_27(active3, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_27(0, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa2_27(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_27(0, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_27(active3, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_27(1, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa3_27(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_27(1, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(2, 0L, 0L, 0L, active3);
      return 3;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa4_27(active3, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_27(2, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa4_27(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_27(2, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(3, 0L, 0L, 0L, active3);
      return 4;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa5_27(active3, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_27(3, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa5_27(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_27(3, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(4, 0L, 0L, 0L, active3);
      return 5;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa6_27(active3, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_27(4, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa6_27(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_27(4, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(5, 0L, 0L, 0L, active3);
      return 6;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa7_27(active3, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_27(5, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa7_27(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_27(5, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(6, 0L, 0L, 0L, active3);
      return 7;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa8_27(active3, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_27(6, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa8_27(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_27(6, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_27(7, 0L, 0L, 0L, active3);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active3 & 0x1000000000000L) != 0L)
            return jjStopAtPos(8, 240);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStopAtPos(8, 241);
         break;
      default :
         break;
   }
   return jjStartNfa_27(7, 0L, 0L, 0L, active3);
}
private int jjMoveNfa_27(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_7(){
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 306);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_21(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_21(int pos, long active0){
   return jjMoveNfa_21(jjStopStringLiteralDfa_21(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_21(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_21(0, 0);
   }
}
private int jjMoveNfa_21(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 268)
                        kind = 268;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 267)
                     kind = 267;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 268)
                     kind = 268;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 268)
                     kind = 268;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 268)
                     kind = 268;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_16(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      case 0:
         if ((active4 & 0x4000000L) != 0L)
            return 37;
         if ((active4 & 0x400000L) != 0L)
            return 13;
         if ((active4 & 0x1000000L) != 0L)
            return 29;
         return -1;
      case 1:
         if ((active4 & 0x4000000L) != 0L)
            return 36;
         if ((active4 & 0x400000L) != 0L)
            return 12;
         if ((active4 & 0x1000000L) != 0L)
            return 28;
         return -1;
      case 2:
         if ((active4 & 0x4000000L) != 0L)
            return 31;
         if ((active4 & 0x400000L) != 0L)
            return 11;
         if ((active4 & 0x1000000L) != 0L)
            return 27;
         return -1;
      case 3:
         if ((active4 & 0x400000L) != 0L)
            return 10;
         if ((active4 & 0x1000000L) != 0L)
            return 26;
         if ((active4 & 0x4000000L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active4 & 0x1000000L) != 0L)
            return 25;
         if ((active4 & 0x400000L) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active4 & 0x1000000L) != 0L)
            return 24;
         if ((active4 & 0x400000L) != 0L)
            return 8;
         return -1;
      case 6:
         if ((active4 & 0x1000000L) != 0L)
            return 23;
         if ((active4 & 0x400000L) != 0L)
            return 3;
         return -1;
      case 7:
         if ((active4 & 0x1000000L) != 0L)
            return 22;
         if ((active4 & 0x400000L) != 0L)
            return 4;
         return -1;
      case 8:
         if ((active4 & 0x1000000L) != 0L)
            return 21;
         return -1;
      case 9:
         if ((active4 & 0x1000000L) != 0L)
            return 20;
         return -1;
      case 10:
         if ((active4 & 0x1000000L) != 0L)
            return 15;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_16(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_16(jjStopStringLiteralDfa_16(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_16(){
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa1_16(0x400000L);
      case 114:
         return jjMoveStringLiteralDfa1_16(0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa1_16(0x4000000L);
      default :
         return jjMoveNfa_16(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_16(long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(0, 0L, 0L, 0L, 0L, active4);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_16(active4, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa2_16(active4, 0x1000000L);
      case 121:
         return jjMoveStringLiteralDfa2_16(active4, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_16(0, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa2_16(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_16(0, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(1, 0L, 0L, 0L, 0L, active4);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa3_16(active4, 0x1000000L);
      case 112:
         return jjMoveStringLiteralDfa3_16(active4, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa3_16(active4, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_16(1, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa3_16(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_16(1, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(2, 0L, 0L, 0L, 0L, active4);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_16(active4, 0x1000000L);
      case 101:
         if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_16(3, 282, 32);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_16(active4, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_16(2, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa4_16(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_16(2, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(3, 0L, 0L, 0L, 0L, active4);
      return 4;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa5_16(active4, 0x1400000L);
      default :
         break;
   }
   return jjStartNfa_16(3, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa5_16(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_16(3, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(4, 0L, 0L, 0L, 0L, active4);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_16(active4, 0x1000000L);
      case 121:
         return jjMoveStringLiteralDfa6_16(active4, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_16(4, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa6_16(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_16(4, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(5, 0L, 0L, 0L, 0L, active4);
      return 6;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa7_16(active4, 0x1000000L);
      case 112:
         return jjMoveStringLiteralDfa7_16(active4, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_16(5, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa7_16(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_16(5, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(6, 0L, 0L, 0L, 0L, active4);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_16(7, 278, 4);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_16(active4, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_16(6, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa8_16(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_16(6, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(7, 0L, 0L, 0L, 0L, active4);
      return 8;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa9_16(active4, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_16(7, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa9_16(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_16(7, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(8, 0L, 0L, 0L, 0L, active4);
      return 9;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa10_16(active4, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_16(8, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa10_16(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_16(8, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(9, 0L, 0L, 0L, 0L, active4);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_16(active4, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_16(9, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa11_16(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_16(9, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(10, 0L, 0L, 0L, 0L, active4);
      return 11;
   }
   switch(curChar)
   {
      case 112:
         if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_16(11, 280, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_16(10, 0L, 0L, 0L, 0L, active4);
}
private int jjStartNfaWithStates_16(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_16(state, pos + 1);
}
private int jjMoveNfa_16(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 39;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 4:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(9, 10); }
                  break;
               case 16:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(11, 12); }
                  break;
               case 32:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(13, 14); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 3:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 108 && kind > 277)
                     kind = 277;
                  break;
               case 6:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 9:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if (curChar == 108 && kind > 279)
                     kind = 279;
                  break;
               case 18:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 21:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 33:
                  if (curChar == 108 && kind > 281)
                     kind = 281;
                  break;
               case 34:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 37:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 39 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_10(){
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 298);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 299)
                        kind = 299;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 299)
                     kind = 299;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 299)
                     kind = 299;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 299)
                     kind = 299;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_30(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_30(int pos, long active0){
   return jjMoveNfa_30(jjStopStringLiteralDfa_30(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_30(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_30(0, 0);
   }
}
private int jjMoveNfa_30(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 220)
                        kind = 220;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 220)
                     kind = 220;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 220)
                     kind = 220;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_20(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_20(int pos, long active0){
   return jjMoveNfa_20(jjStopStringLiteralDfa_20(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_20(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_20(0, 0);
   }
}
private int jjMoveNfa_20(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 269)
                        kind = 269;
                     { jjCheckNAddStates(15, 17); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 269)
                        kind = 269;
                     { jjCheckNAddTwoStates(6, 7); }
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 269)
                        kind = 269;
                     { jjCheckNAddStates(15, 17); }
                  }
                  else if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if (curChar != 45)
                     break;
                  if (kind > 269)
                     kind = 269;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 269)
                     kind = 269;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 5:
                  if (curChar != 46)
                     break;
                  if (kind > 269)
                     kind = 269;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 269)
                     kind = 269;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 8:
                  if (curChar != 45)
                     break;
                  if (kind > 269)
                     kind = 269;
                  { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 269)
                     kind = 269;
                  { jjCheckNAdd(9); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if (curChar != 69)
                     break;
                  if (kind > 269)
                     kind = 269;
                  { jjAddStates(18, 19); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_26(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_26(int pos, long active0){
   return jjMoveNfa_26(jjStopStringLiteralDfa_26(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_26(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_26(0, 0);
   }
}
private int jjMoveNfa_26(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 243)
                        kind = 243;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 242)
                     kind = 242;
                  break;
               case 10:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 243)
                     kind = 243;
                  { jjCheckNAdd(10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 243)
                     kind = 243;
                  { jjCheckNAdd(10); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(20, 22); }
                  break;
               case 8:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 243)
                     kind = 243;
                  { jjCheckNAdd(10); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_17(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_17(int pos, long active0){
   return jjMoveNfa_17(jjStopStringLiteralDfa_17(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_17(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_17(0, 0);
   }
}
private int jjMoveNfa_17(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 275)
                        kind = 275;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 274)
                     kind = 274;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 275)
                     kind = 275;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 275)
                     kind = 275;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xa0000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active5){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, 0L, 0L, 0L, 0L, 0L, active5);
      return 1;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa2_0(active5, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active5, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active5, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active5, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(0, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa2_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(0, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, 0L, 0L, 0L, 0L, 0L, active5);
      return 2;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa3_0(active5, 0x40000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active5, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active5, 0x80000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active5, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(1, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa3_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(1, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, 0L, 0L, 0L, 0L, active5);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active5 & 0x80000L) != 0L)
            return jjStopAtPos(3, 339);
         return jjMoveStringLiteralDfa4_0(active5, 0x60000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active5, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa4_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(2, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, 0L, 0L, 0L, 0L, 0L, active5);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         if ((active5 & 0x10000L) != 0L)
            return jjStopAtPos(4, 336);
         break;
      case 114:
         if ((active5 & 0x40000L) != 0L)
            return jjStopAtPos(4, 338);
         return jjMoveStringLiteralDfa5_0(active5, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(3, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa5_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(3, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, 0L, 0L, 0L, 0L, active5);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_0(active5, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa6_0(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_0(4, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, 0L, 0L, 0L, 0L, active5);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         if ((active5 & 0x20000L) != 0L)
            return jjStopAtPos(6, 337);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_41(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x2L) != 0L || (active2 & 0x18000000000000L) != 0L)
         {
            jjmatchedKind = 193;
            return 5;
         }
         if ((active0 & 0xaa0000000000000L) != 0L || (active1 & 0xf0000000000L) != 0L || (active2 & 0x7c000000000L) != 0L)
         {
            jjmatchedKind = 193;
            return 25;
         }
         if ((active0 & 0xaa0000000L) != 0L || (active1 & 0x200000003000000L) != 0L || (active2 & 0x76000000L) != 0L)
         {
            jjmatchedKind = 193;
            return 43;
         }
         if ((active1 & 0x400300000000000L) != 0L || (active2 & 0x7f80000000000L) != 0L)
         {
            jjmatchedKind = 193;
            return 32;
         }
         if ((active0 & 0xa00L) != 0L || (active1 & 0x3f00L) != 0L || (active2 & 0x3800000000001b0L) != 0L)
         {
            jjmatchedKind = 193;
            return 39;
         }
         if ((active0 & 0xa0L) != 0L || (active1 & 0xf0000000000000e0L) != 0L || (active2 & 0x3L) != 0L)
         {
            jjmatchedKind = 193;
            return 72;
         }
         if ((active1 & 0x60000L) != 0L || (active2 & 0x10000000000f8000L) != 0L)
         {
            jjmatchedKind = 193;
            return 63;
         }
         if ((active0 & 0x8000000L) != 0L || (active1 & 0x300000L) != 0L || (active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 193;
            return 17;
         }
         if ((active0 & 0xa000000000000000L) != 0L || (active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 193;
            return 7;
         }
         if ((active0 & 0x555ffff557fff540L) != 0L || (active1 & 0x10000fffcc9c01dL) != 0L || (active2 & 0x2c60003f81b07e0cL) != 0L)
         {
            jjmatchedKind = 193;
            return 53;
         }
         return -1;
      case 1:
         if ((active2 & 0x14000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 42;
         }
         if ((active1 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 67;
         }
         if ((active1 & 0x400000000000L) != 0L)
            return 90;
         if ((active2 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 4;
         }
         if ((active2 & 0x180000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 31;
         }
         if ((active0 & 0xa80000000000000L) != 0L || (active1 & 0xf0000000000L) != 0L || (active2 & 0x18000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 24;
         }
         if ((active1 & 0x1800L) != 0L || (active2 & 0x380000000000080L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 38;
         }
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 79;
         }
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 70;
         }
         if ((active1 & 0x38000000L) != 0L)
            return 53;
         if ((active0 & 0xf57fffffffffffe0L) != 0L || (active1 & 0xb70030ffc7fbe7ffL) != 0L || (active2 & 0x3c77e67fe3fbff3eL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 53;
         }
         if ((active2 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 62;
         }
         return -1;
      case 2:
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 37;
         }
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 91;
         }
         if ((active1 & 0x80000008c0000080L) != 0L || (active2 & 0x808000L) != 0L)
            return 53;
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 78;
         }
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 64;
         }
         if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 3;
         }
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0x37003ff737fbff7fL) != 0L || (active2 & 0x3ef7fffff77b7fbeL) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 53;
         }
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 61;
         }
         return -1;
      case 3:
         if ((active1 & 0x40000L) != 0L)
            return 92;
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x400000011000000L) != 0L || (active2 & 0xd04600a0222000L) != 0L)
            return 53;
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 3;
            return 60;
         }
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 3;
            return 36;
         }
         if ((active0 & 0xffffff7fffffffe0L) != 0L || (active1 & 0x73003ff726fbff7fL) != 0L || (active2 & 0x3e2fb9ff57595fbfL) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 3;
            return 53;
         }
         return -1;
      case 4:
         if ((active0 & 0xffdffe7fffff7de0L) != 0L || (active1 & 0x73003ff52639fb7fL) != 0L || (active2 & 0x1f0e398f56081f9fL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 4;
            }
            return 53;
         }
         if ((active0 & 0x20010000008200L) != 0L || (active1 & 0x200c20400L) != 0L || (active2 & 0x2021807001514020L) != 0L)
            return 53;
         if ((active2 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 4;
            }
            return 55;
         }
         return -1;
      case 5:
         if ((active0 & 0x20002830880L) != 0L || (active1 & 0x2100188004002002L) != 0L || (active2 & 0x1002080210000004L) != 0L)
            return 53;
         if ((active0 & 0xfffffc7ffd7c7760L) != 0L || (active1 & 0x520027752239db7dL) != 0L || (active2 & 0x2f0c318d46085f9bL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 5;
            }
            return 53;
         }
         if ((active2 & 0x40000L) != 0L)
            return 93;
         return -1;
      case 6:
         if ((active0 & 0x80002400052c1100L) != 0L || (active1 & 0x400005340001080cL) != 0L || (active2 & 0x700000904000b10L) != 0L)
            return 53;
         if ((active0 & 0x7fffd87ff8506660L) != 0L || (active1 & 0x120022412238f371L) != 0L || (active2 & 0x280c31844208548bL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 6;
            }
            return 53;
         }
         return -1;
      case 7:
         if ((active0 & 0x57ff987ff0206640L) != 0L || (active1 & 0x200024120389100L) != 0L || (active2 & 0x280c21804200568bL) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 7;
            }
            return 53;
         }
         if ((active0 & 0x2800400008500020L) != 0L || (active1 & 0x1000200002006271L) != 0L || (active2 & 0x100400080000L) != 0L)
            return 53;
         return -1;
      case 8:
         if ((active0 & 0x5008000210000040L) != 0L || (active1 & 0x200024000300000L) != 0L || (active2 & 0x200000001002L) != 0L)
            return 53;
         if ((active0 & 0x7f7987de0606600L) != 0L || (active1 & 0x120089100L) != 0L || (active2 & 0x280c018042004689L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 8;
            return 53;
         }
         return -1;
      case 9:
         if ((active0 & 0x30000c00000000L) != 0L || (active1 & 0x20009000L) != 0L || (active2 & 0x480L) != 0L)
            return 53;
         if ((active0 & 0x7c79871e0606600L) != 0L || (active1 & 0x100080100L) != 0L || (active2 & 0x280c018042004209L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 9;
            return 53;
         }
         return -1;
      case 10:
         if ((active0 & 0x40001000000000L) != 0L || (active1 & 0x80100L) != 0L || (active2 & 0x2808000000000001L) != 0L)
            return 53;
         if ((active0 & 0x7879861e0606600L) != 0L || (active1 & 0x100000000L) != 0L || (active2 & 0x4018042004208L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 10;
            return 53;
         }
         return -1;
      case 11:
         if ((active0 & 0x80000000002000L) != 0L || (active1 & 0x100000000L) != 0L || (active2 & 0x4010000004000L) != 0L)
            return 53;
         if ((active0 & 0x7079861e0604600L) != 0L || (active2 & 0x8042000208L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 11;
            return 53;
         }
         return -1;
      case 12:
         if ((active0 & 0x607986140600600L) != 0L || (active2 & 0x8000000008L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 12;
            return 53;
         }
         if ((active0 & 0x1000000a0004000L) != 0L || (active2 & 0x42000200L) != 0L)
            return 53;
         return -1;
      case 13:
         if ((active0 & 0x140000000L) != 0L || (active2 & 0x8000000008L) != 0L)
            return 53;
         if ((active0 & 0x607986000600600L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 13;
            return 53;
         }
         return -1;
      case 14:
         if ((active0 & 0x202000000000200L) != 0L)
            return 53;
         if ((active0 & 0x405986000600400L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 14;
            return 53;
         }
         return -1;
      case 15:
         if ((active0 & 0x404000000000400L) != 0L)
            return 53;
         if ((active0 & 0x1986000600000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 15;
            return 53;
         }
         return -1;
      case 16:
         if ((active0 & 0x1906000600000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 16;
            return 53;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 53;
         return -1;
      case 17:
         if ((active0 & 0x100000000000L) != 0L)
            return 53;
         if ((active0 & 0x1806000600000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 17;
            return 53;
         }
         return -1;
      case 18:
         if ((active0 & 0x802000000000L) != 0L)
            return 53;
         if ((active0 & 0x1004000600000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 18;
            return 53;
         }
         return -1;
      case 19:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 19;
            return 53;
         }
         if ((active0 & 0x1004000200000L) != 0L)
            return 53;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_41(int pos, long active0, long active1, long active2){
   return jjMoveNfa_41(jjStopStringLiteralDfa_41(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_41(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_41(0x5555555555555540L, 0x15L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_41(0xa0L, 0xf0000000000000e0L, 0x3L);
      case 98:
         return jjMoveStringLiteralDfa1_41(0x0L, 0x0L, 0xcL);
      case 99:
         return jjMoveStringLiteralDfa1_41(0xa00L, 0x3f00L, 0x3800000000001b0L);
      case 100:
         return jjMoveStringLiteralDfa1_41(0x2000L, 0xc000L, 0xc00000000001e00L);
      case 101:
         return jjMoveStringLiteralDfa1_41(0x2a8000L, 0x10000L, 0x6000L);
      case 102:
         return jjMoveStringLiteralDfa1_41(0x0L, 0x60000L, 0x10000000000f8000L);
      case 103:
         return jjMoveStringLiteralDfa1_41(0x800000L, 0x80000L, 0x100000L);
      case 104:
         return jjMoveStringLiteralDfa1_41(0x2000000L, 0x100000000000000L, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa1_41(0x8000000L, 0x300000L, 0x400000L);
      case 107:
         return jjMoveStringLiteralDfa1_41(0x0L, 0x0L, 0x800000L);
      case 108:
         return jjMoveStringLiteralDfa1_41(0x0L, 0xc00000L, 0x2000000001000000L);
      case 109:
         return jjMoveStringLiteralDfa1_41(0xaa0000000L, 0x200000003000000L, 0x76000000L);
      case 110:
         return jjMoveStringLiteralDfa1_41(0x2000000000L, 0x3c000000L, 0x80000000L);
      case 111:
         return jjMoveStringLiteralDfa1_41(0x0L, 0x3c0000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_41(0xaaa8000000000L, 0xfc00000000L, 0x3f00000000L);
      case 114:
         return jjMoveStringLiteralDfa1_41(0xaa0000000000000L, 0xf0000000000L, 0x7c000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_41(0x0L, 0x400300000000000L, 0x7f80000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_41(0xa000000000000000L, 0x400000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_41(0x0L, 0x2L, 0x18000000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_41(0x0L, 0x8L, 0x60000000000000L);
      case 123:
         return jjStopAtPos(0, 113);
      case 125:
         return jjStopAtPos(0, 114);
      default :
         return jjMoveNfa_41(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_41(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_41(active0, 0x20000020000140L, active1, 0x200000403000300L, active2, 0x20004f83008000L);
      case 98:
         return jjMoveStringLiteralDfa2_41(active0, 0x20L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_41(active0, 0x8001480L, active1, 0x2000000000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_41(active0, 0x4000L, active1, 0x4000000000000000L, active2, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa2_41(active0, 0xa80002000550000L, active1, 0x1000f008400c008L, active2, 0xc00198014800e00L);
      case 103:
         return jjMoveStringLiteralDfa2_41(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_41(active0, 0x4000200L, active1, 0L, active2, 0x1000000030L);
      case 105:
         return jjMoveStringLiteralDfa2_41(active0, 0x8092000000L, active1, 0x400100000000000L, active2, 0x1040600060031000L);
      case 108:
         return jjMoveStringLiteralDfa2_41(active0, 0x800000L, active1, 0x8000000000020420L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_41(active0, 0x1540008000L, active1, 0x100000L, active2, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa2_41(active0, 0x40002a0000L, active1, 0x402000c2L, active2, 0x400000L);
      case 111:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_41(1, 110, 90);
         return jjMoveStringLiteralDfa2_41(active0, 0x20000002000L, active1, 0x30c81800L, active2, 0x2380020000040080L);
      case 112:
         return jjMoveStringLiteralDfa2_41(active0, 0x15550000000000L, active1, 0x800000000L, active2, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa2_41(active0, 0xb542a80000000000L, active1, 0x1000007100040000L, active2, 0x2000300004L);
      case 115:
         return jjMoveStringLiteralDfa2_41(active0, 0L, active1, 0L, active2, 0x8000000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_41(active0, 0x4000000000000000L, active1, 0x1L, active2, 0x1800000000002L);
      case 117:
         return jjMoveStringLiteralDfa2_41(active0, 0x8000a00000800L, active1, 0x208000002004L, active2, 0x12040000080108L);
      case 118:
         return jjMoveStringLiteralDfa2_41(active0, 0L, active1, 0x10L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_41(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_41(active0, 0L, active1, 0x10000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_41(active0, 0L, active1, 0L, active2, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_41(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_41(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_41(active0, 0x40000040028000L, active1, 0L, active2, 0x800004004014L);
      case 98:
         return jjMoveStringLiteralDfa3_41(active0, 0x8000000000040L, active1, 0x8000000000L, active2, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa3_41(active0, 0x10000100L, active1, 0x600040L, active2, 0x2000000100000000L);
      case 100:
         return jjMoveStringLiteralDfa3_41(active0, 0x2000000L, active1, 0x4000000000000000L, active2, 0x80000000000000L);
      case 101:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_41(2, 94, 53);
         return jjMoveStringLiteralDfa3_41(active0, 0x3500086000000200L, active1, 0x10010L, active2, 0x48000000210020L);
      case 102:
         return jjMoveStringLiteralDfa3_41(active0, 0x280000L, active1, 0x4000L, active2, 0x402000000000600L);
      case 103:
         return jjMoveStringLiteralDfa3_41(active0, 0L, active1, 0x1000000100800000L, active2, 0x208000000000L);
      case 104:
         return jjMoveStringLiteralDfa3_41(active0, 0x400L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_41(active0, 0x10104000000L, active1, 0x100001000000002L, active2, 0x10002000002000L);
      case 106:
         return jjMoveStringLiteralDfa3_41(active0, 0x20000000L, active1, 0L, active2, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa3_41(active0, 0xa01000000L, active1, 0x10000080020L, active2, 0x10000f00000a0000L);
      case 109:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_41(2, 95, 53);
         return jjMoveStringLiteralDfa3_41(active0, 0x10000L, active1, 0x100000L, active2, 0x1040000a0001000L);
      case 110:
         return jjMoveStringLiteralDfa3_41(active0, 0x20000080540000L, active1, 0x100211001804L, active2, 0x200004040000080L);
      case 111:
         return jjMoveStringLiteralDfa3_41(active0, 0x2a60008804000L, active1, 0x6000060400L, active2, 0x1001000100000L);
      case 112:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_41(2, 99, 53);
         return jjMoveStringLiteralDfa3_41(active0, 0x8000000000L, active1, 0x220000000000L, active2, 0x400001L);
      case 113:
         return jjMoveStringLiteralDfa3_41(active0, 0L, active1, 0L, active2, 0x100000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_41(active0, 0x4005500000000000L, active1, 0x400000109L, active2, 0x200040900L);
      case 115:
         return jjMoveStringLiteralDfa3_41(active0, 0x280000000000820L, active1, 0x4000000a000L, active2, 0x800000000000008L);
      case 116:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_41(2, 127, 53);
         return jjMoveStringLiteralDfa3_41(active0, 0x80L, active1, 0x2000000022000200L, active2, 0x400c10000002L);
      case 117:
         return jjMoveStringLiteralDfa3_41(active0, 0x8010001400001000L, active1, 0L, active2, 0x20000000000000L);
      case 118:
         return jjMoveStringLiteralDfa3_41(active0, 0x800000000000000L, active1, 0x80000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_41(active0, 0x2000L, active1, 0x4000000L, active2, 0L);
      case 120:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_41(2, 143, 53);
         return jjMoveStringLiteralDfa3_41(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_41(2, 71, 53);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_41(2, 151, 53);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_41(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_41(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_41(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_41(active0, 0x50000L, active1, 0x10100420000L, active2, 0x2400010000000200L);
      case 98:
         return jjMoveStringLiteralDfa4_41(active0, 0x10000000820000L, active1, 0L, active2, 0x4000000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_41(active0, 0x200L, active1, 0x18000L, active2, 0x800000000000020L);
      case 100:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_41(3, 180, 53);
         return jjMoveStringLiteralDfa4_41(active0, 0x2006000000L, active1, 0x80100L, active2, 0L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_41(3, 39, 53);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_41(3, 92, 53);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_41(3, 122, 53);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_41(3, 145, 53);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_41(3, 157, 53);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_41(3, 159, 53);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_41(3, 169, 53);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_41(3, 170, 53);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_41(3, 174, 53);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_41(3, 183, 53);
         return jjMoveStringLiteralDfa4_41(active0, 0x6280104000000400L, active1, 0x40200104240L, active2, 0x80201001000L);
      case 102:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_41(3, 149, 53);
         return jjMoveStringLiteralDfa4_41(active0, 0x500000L, active1, 0L, active2, 0x2000000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_41(active0, 0x20000000000000L, active1, 0x100100000000000L, active2, 0x4000000000L);
      case 104:
         return jjMoveStringLiteralDfa4_41(active0, 0L, active1, 0L, active2, 0x410000000L);
      case 105:
         return jjMoveStringLiteralDfa4_41(active0, 0x800000000008080L, active1, 0x2000000000800004L, active2, 0x8000004c08L);
      case 106:
         return jjMoveStringLiteralDfa4_41(active0, 0x40000000L, active1, 0x2000000000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_41(active0, 0L, active1, 0L, active2, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa4_41(active0, 0x8021400000000L, active1, 0x200028000200000L, active2, 0x20000000090001L);
      case 109:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_41(3, 82, 92);
         return jjMoveStringLiteralDfa4_41(active0, 0x200000000000L, active1, 0L, active2, 0x100000000040000L);
      case 110:
         return jjMoveStringLiteralDfa4_41(active0, 0x40000108002000L, active1, 0x400L, active2, 0x203004000094L);
      case 111:
         return jjMoveStringLiteralDfa4_41(active0, 0x54400b1280000L, active1, 0x80000000000L, active2, 0x42000000L);
      case 112:
         return jjMoveStringLiteralDfa4_41(active0, 0x2810000000000L, active1, 0x200020000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_41(active0, 0L, active1, 0x2L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_41(active0, 0L, active1, 0x4000000004000010L, active2, 0x1000000000102L);
      case 115:
         return jjMoveStringLiteralDfa4_41(active0, 0x8500000000001040L, active1, 0x28L, active2, 0x8000000000000L);
      case 116:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_41(3, 141, 53);
         return jjMoveStringLiteralDfa4_41(active0, 0xa00000920L, active1, 0x4400003800L, active2, 0x1200800800000000L);
      case 117:
         return jjMoveStringLiteralDfa4_41(active0, 0L, active1, 0x1000000002000001L, active2, 0x100000500000L);
      case 118:
         return jjMoveStringLiteralDfa4_41(active0, 0x1000080000000000L, active1, 0x1000000000L, active2, 0L);
      case 119:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_41(3, 182, 53);
         return jjMoveStringLiteralDfa4_41(active0, 0x4000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_41(3, 88, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_41(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_41(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_41(active0, 0x2800000800000L, active1, 0x1000000000L, active2, 0x200100040000L);
      case 98:
         return jjMoveStringLiteralDfa5_41(active0, 0x1040000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_41(active0, 0x400L, active1, 0L, active2, 0x80000000004L);
      case 100:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_41(4, 144, 53);
         return jjMoveStringLiteralDfa5_41(active0, 0x4004000000L, active1, 0x100000L, active2, 0L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_41(4, 40, 53);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_41(4, 74, 53);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_41(4, 164, 53);
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_41(4, 175, 53);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_41(4, 176, 53);
         return jjMoveStringLiteralDfa5_41(active0, 0x45200a0002000000L, active1, 0x4200006000008800L, active2, 0x1300100800000180L);
      case 103:
         return jjMoveStringLiteralDfa5_41(active0, 0x40000000000000L, active1, 0x200L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_41(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_41(active0, 0x1008000a00010100L, active1, 0x28000000108L, active2, 0x2000004000003L);
      case 107:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_41(active0, 0x200L, active1, 0x80000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_41(4, 152, 53);
         return jjMoveStringLiteralDfa5_41(active0, 0x10040000022000L, active1, 0x300000000000L, active2, 0x2000000000004000L);
      case 109:
         return jjMoveStringLiteralDfa5_41(active0, 0x2000400008000000L, active1, 0x1000000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_41(4, 87, 53);
         return jjMoveStringLiteralDfa5_41(active0, 0x10004000L, active1, 0x500000000L, active2, 0x200081418L);
      case 111:
         return jjMoveStringLiteralDfa5_41(active0, 0x200140500800L, active1, 0x2000000004002000L, active2, 0x4000010000000L);
      case 112:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_41(4, 148, 53);
         return jjMoveStringLiteralDfa5_41(active0, 0x5000000000000L, active1, 0x80000L, active2, 0x8000000000000L);
      case 113:
         return jjMoveStringLiteralDfa5_41(active0, 0L, active1, 0x4L, active2, 0L);
      case 114:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_41(4, 97, 53);
         return jjMoveStringLiteralDfa5_41(active0, 0xa0280020L, active1, 0x40022005000L, active2, 0x800000042000000L);
      case 115:
         return jjMoveStringLiteralDfa5_41(active0, 0x800002000000000L, active1, 0x51L, active2, 0x8000000000L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_41(4, 81, 53);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_41(4, 150, 53);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_41(4, 165, 53);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_41(4, 181, 53);
         return jjMoveStringLiteralDfa5_41(active0, 0x8280001400001040L, active1, 0x10000000020L, active2, 0x10400000000L);
      case 117:
         return jjMoveStringLiteralDfa5_41(active0, 0L, active1, 0x210002L, active2, 0x400000000000200L);
      case 118:
         return jjMoveStringLiteralDfa5_41(active0, 0x100000000080L, active1, 0L, active2, 0x800L);
      default :
         break;
   }
   return jjStartNfa_41(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_41(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_41(active0, 0x5000009000020L, active1, 0x81020L, active2, 0x8000000084000L);
      case 98:
         return jjMoveStringLiteralDfa6_41(active0, 0x2000000000L, active1, 0L, active2, 0x2L);
      case 99:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_41(5, 103, 53);
         return jjMoveStringLiteralDfa6_41(active0, 0x280000L, active1, 0x26000000000L, active2, 0x81L);
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_41(5, 41, 53);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_41(5, 156, 53);
         break;
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_41(5, 7, 53);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_41(5, 17, 53);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_41(5, 65, 53);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_41(5, 107, 53);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_41(5, 108, 53);
         return jjMoveStringLiteralDfa6_41(active0, 0xa040140004000000L, active1, 0x1000010400000000L, active2, 0x818L);
      case 102:
         return jjMoveStringLiteralDfa6_41(active0, 0L, active1, 0L, active2, 0x2000000000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_41(active0, 0x2800000000000L, active1, 0L, active2, 0x100000000L);
      case 104:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_41(5, 130, 53);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_41(active0, 0x810001400000000L, active1, 0x200122100010L, active2, 0x800010000000400L);
      case 107:
         return jjMoveStringLiteralDfa6_41(active0, 0x400L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_41(5, 16, 53);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_41(5, 23, 53);
         return jjMoveStringLiteralDfa6_41(active0, 0x200044000L, active1, 0L, active2, 0x404000000000200L);
      case 109:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_41(active0, 0x4000000010000000L, active1, 0x2000L, active2, 0L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_41(5, 25, 53);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_41(5, 125, 53);
         return jjMoveStringLiteralDfa6_41(active0, 0x80000000000L, active1, 0x200000000008100L, active2, 0x300100004000100L);
      case 111:
         return jjMoveStringLiteralDfa6_41(active0, 0x280400000003200L, active1, 0x208L, active2, 0L);
      case 114:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_41(5, 188, 53);
         return jjMoveStringLiteralDfa6_41(active0, 0x1e0500040L, active1, 0x4000L, active2, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa6_41(active0, 0x1008004000000000L, active1, 0x4000000000200000L, active2, 0x42001000L);
      case 116:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_41(5, 120, 53);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_41(5, 146, 93);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_41(5, 161, 53);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_41(5, 171, 53);
         return jjMoveStringLiteralDfa6_41(active0, 0x500200000000000L, active1, 0x1000010041L, active2, 0x208000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_41(active0, 0L, active1, 0x4L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_41(active0, 0x20000800000100L, active1, 0x40000000000L, active2, 0L);
      case 119:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_41(5, 90, 53);
         break;
      case 120:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_41(5, 177, 53);
         return jjMoveStringLiteralDfa6_41(active0, 0L, active1, 0x800L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa6_41(active0, 0L, active1, 0L, active2, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_41(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_41(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_41(active0, 0x22800810002040L, active1, 0x20000100100L, active2, 0x1L);
      case 98:
         return jjMoveStringLiteralDfa7_41(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_41(active0, 0x500020L, active1, 0x1000L, active2, 0x8100000000000L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_41(6, 42, 53);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_41(6, 63, 53);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_41(6, 104, 53);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_41(6, 139, 53);
         return jjMoveStringLiteralDfa7_41(active0, 0L, active1, 0x8000L, active2, 0x4000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_41(6, 8, 53);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_41(6, 18, 53);
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_41(6, 45, 53);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_41(6, 66, 53);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_41(6, 80, 53);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_41(6, 100, 53);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_41(6, 106, 53);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_41(6, 160, 53);
         return jjMoveStringLiteralDfa7_41(active0, 0x40000000a0200000L, active1, 0x200000006001L, active2, 0x8042000000L);
      case 103:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_41(6, 154, 53);
         return jjMoveStringLiteralDfa7_41(active0, 0x5000000000000L, active1, 0x200000000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_41(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_41(active0, 0x1000000208000000L, active1, 0x200000L, active2, 0x2004000000001000L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_41(6, 24, 53);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_41(6, 132, 53);
         return jjMoveStringLiteralDfa7_41(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 109:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_41(6, 12, 53);
         return jjMoveStringLiteralDfa7_41(active0, 0L, active1, 0L, active2, 0x80000L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_41(6, 26, 53);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_41(6, 67, 53);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_41(6, 163, 53);
         return jjMoveStringLiteralDfa7_41(active0, 0x2280100000000000L, active1, 0x1000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_41(active0, 0xd00000000004400L, active1, 0x50L, active2, 0x10000000000L);
      case 112:
         return jjMoveStringLiteralDfa7_41(active0, 0L, active1, 0L, active2, 0x800000400000000L);
      case 114:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_41(6, 98, 53);
         return jjMoveStringLiteralDfa7_41(active0, 0x140000000L, active1, 0x80200L, active2, 0L);
      case 115:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_41(6, 126, 53);
         return jjMoveStringLiteralDfa7_41(active0, 0x10000000000000L, active1, 0L, active2, 0x8L);
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_41(6, 75, 53);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_41(6, 101, 53);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_41(6, 136, 53);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_41(6, 184, 53);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_41(6, 185, 53);
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_41(active0, 0x480000000000L, active1, 0x4002000020L, active2, 0x680L);
      case 117:
         return jjMoveStringLiteralDfa7_41(active0, 0x2000000200L, active1, 0L, active2, 0x200000000002L);
      case 118:
         return jjMoveStringLiteralDfa7_41(active0, 0x40001000000000L, active1, 0x20000000L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa7_41(active0, 0L, active1, 0x100000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_41(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_41(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_41(active0, 0x45001000004000L, active1, 0x120008000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_41(active0, 0x80000000000040L, active1, 0L, active2, 0x4000000000000L);
      case 100:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_41(7, 64, 53);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_41(7, 78, 53);
         return jjMoveStringLiteralDfa8_41(active0, 0x80000002000L, active1, 0L, active2, 0x4000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_41(7, 46, 53);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_41(7, 69, 53);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_41(7, 147, 53);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_41(7, 162, 53);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_41(7, 172, 53);
         return jjMoveStringLiteralDfa8_41(active0, 0x8000140400000L, active1, 0x4000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa8_41(active0, 0L, active1, 0L, active2, 0x200L);
      case 104:
         return jjMoveStringLiteralDfa8_41(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_41(active0, 0x410000000L, active1, 0L, active2, 0x480L);
      case 107:
         return jjMoveStringLiteralDfa8_41(active0, 0L, active1, 0L, active2, 0x8000000000000L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_41(7, 27, 53);
         return jjMoveStringLiteralDfa8_41(active0, 0x20000800000000L, active1, 0x100L, active2, 0x2000000000000000L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_41(7, 59, 53);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_41(7, 68, 53);
         return jjMoveStringLiteralDfa8_41(active0, 0x4500000200000000L, active1, 0L, active2, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa8_41(active0, 0x1000000000000000L, active1, 0L, active2, 0x1000L);
      case 113:
         return jjMoveStringLiteralDfa8_41(active0, 0L, active1, 0L, active2, 0x42000000L);
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_41(7, 70, 53);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_41(7, 77, 53);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_41(7, 109, 53);
         return jjMoveStringLiteralDfa8_41(active0, 0x200000000200000L, active1, 0L, active2, 0x208000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_41(active0, 0x2000000000L, active1, 0L, active2, 0x8L);
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_41(7, 5, 53);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_41(7, 124, 53);
         return jjMoveStringLiteralDfa8_41(active0, 0x2900000000200L, active1, 0x200020000181000L, active2, 0x800000000000003L);
      case 117:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_41(7, 61, 53);
         return jjMoveStringLiteralDfa8_41(active0, 0x4000000400L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_41(active0, 0xa0000000L, active1, 0x200000L, active2, 0L);
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_41(7, 73, 53);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_41(7, 89, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_41(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_41(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_41(active0, 0x2000L, active1, 0L, active2, 0x8000000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_41(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_41(8, 51, 53);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_41(8, 102, 53);
         return jjMoveStringLiteralDfa9_41(active0, 0x100000004000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_41(8, 33, 53);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_41(8, 84, 53);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_41(8, 85, 53);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_41(8, 105, 53);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_41(8, 129, 53);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_41(8, 173, 53);
         return jjMoveStringLiteralDfa9_41(active0, 0x212800000200000L, active1, 0L, active2, 0x8000000000L);
      case 104:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_41(8, 121, 53);
         return jjMoveStringLiteralDfa9_41(active0, 0x200L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_41(active0, 0x20a0000000L, active1, 0x100L, active2, 0x800000000000001L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_41(8, 28, 53);
         return jjMoveStringLiteralDfa9_41(active0, 0xc0001000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_41(8, 60, 53);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_41(8, 140, 53);
         return jjMoveStringLiteralDfa9_41(active0, 0x400000000L, active1, 0x88000L, active2, 0x4000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_41(active0, 0L, active1, 0x1000L, active2, 0x688L);
      case 114:
         return jjMoveStringLiteralDfa9_41(active0, 0x400000000400000L, active1, 0L, active2, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa9_41(active0, 0x4000000000L, active1, 0L, active2, 0x10000000000L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_41(8, 6, 53);
         return jjMoveStringLiteralDfa9_41(active0, 0x5000000000400L, active1, 0x120000000L, active2, 0x2000000000000000L);
      case 117:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_41(8, 62, 53);
         return jjMoveStringLiteralDfa9_41(active0, 0x20080800000000L, active1, 0L, active2, 0x42000000L);
      case 118:
         return jjMoveStringLiteralDfa9_41(active0, 0x140000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_41(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_41(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_41(active0, 0x4000L, active1, 0L, active2, 0x4000000000000L);
      case 98:
         return jjMoveStringLiteralDfa10_41(active0, 0x2000L, active1, 0L, active2, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa10_41(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_41(9, 52, 53);
         return jjMoveStringLiteralDfa10_41(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_41(9, 34, 53);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_41(9, 35, 53);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_41(9, 53, 53);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_41(9, 93, 53);
         return jjMoveStringLiteralDfa10_41(active0, 0x405000000400000L, active1, 0x80000L, active2, 0x2000000042004000L);
      case 103:
         return jjMoveStringLiteralDfa10_41(active0, 0L, active1, 0L, active2, 0x8000000000000L);
      case 104:
         return jjMoveStringLiteralDfa10_41(active0, 0x400L, active1, 0L, active2, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_41(active0, 0x4140000200L, active1, 0x100000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_41(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_41(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_41(9, 135, 53);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_41(9, 138, 53);
         return jjMoveStringLiteralDfa10_41(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_41(active0, 0x80000000000000L, active1, 0L, active2, 0x800000000000001L);
      case 112:
         return jjMoveStringLiteralDfa10_41(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_41(9, 76, 53);
         return jjMoveStringLiteralDfa10_41(active0, 0L, active1, 0L, active2, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa10_41(active0, 0xa0200000L, active1, 0L, active2, 0L);
      case 116:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_41(9, 79, 53);
         return jjMoveStringLiteralDfa10_41(active0, 0L, active1, 0x100L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_41(active0, 0x40101000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa10_41(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_41(8, active0, active1, active2);
}
private int jjMoveStringLiteralDfa10_41(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa11_41(active0, 0x4000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_41(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_41(10, 36, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_41(10, 54, 53);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_41(10, 179, 53);
         return jjMoveStringLiteralDfa11_41(active0, 0x2000200000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_41(active0, 0x2000000a0000400L, active1, 0L, active2, 0x10000000000L);
      case 106:
         return jjMoveStringLiteralDfa11_41(active0, 0L, active1, 0L, active2, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa11_41(active0, 0x80000002000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_41(active0, 0x4000000000000L, active1, 0L, active2, 0x4000000000200L);
      case 110:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_41(10, 128, 53);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_41(10, 187, 53);
         return jjMoveStringLiteralDfa11_41(active0, 0x80004000000000L, active1, 0L, active2, 0x8042000000L);
      case 111:
         return jjMoveStringLiteralDfa11_41(active0, 0x102800000000000L, active1, 0x100000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_41(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_41(10, 83, 53);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_41(10, 189, 53);
         break;
      case 115:
         return jjMoveStringLiteralDfa11_41(active0, 0x140400200L, active1, 0L, active2, 0x4000L);
      case 118:
         return jjMoveStringLiteralDfa11_41(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_41(10, 72, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_41(9, active0, active1, active2);
}
private int jjMoveStringLiteralDfa11_41(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_41(active0, 0L, active1, 0L, active2, 0x8000000200L);
      case 99:
         return jjMoveStringLiteralDfa12_41(active0, 0L, active1, 0L, active2, 0x42000000L);
      case 100:
         return jjMoveStringLiteralDfa12_41(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_41(11, 13, 53);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_41(11, 55, 53);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_41(11, 178, 53);
         return jjMoveStringLiteralDfa12_41(active0, 0x4000400000L, active1, 0L, active2, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa12_41(active0, 0x400080140000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_41(active0, 0x100000004000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_41(11, 96, 53);
         return jjMoveStringLiteralDfa12_41(active0, 0x100800000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_41(active0, 0x50000a0000000L, active1, 0L, active2, 0L);
      case 112:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_41(11, 168, 53);
         break;
      case 114:
         return jjMoveStringLiteralDfa12_41(active0, 0x200000L, active1, 0L, active2, 0L);
      case 115:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_41(11, 142, 53);
         return jjMoveStringLiteralDfa12_41(active0, 0x200002000000400L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_41(active0, 0x200L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_41(10, active0, active1, active2);
}
private int jjMoveStringLiteralDfa12_41(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(11, active0, 0L, active2);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_41(active0, 0x80000000000L, active2, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa13_41(active0, 0x4000000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_41(12, 14, 53);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_41(12, 56, 53);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_41(12, 153, 53);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_41(12, 158, 53);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_41(active0, 0x202100000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa13_41(active0, 0L, active2, 0x8000000000L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_41(12, 29, 53);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_41(12, 31, 53);
         return jjMoveStringLiteralDfa13_41(active0, 0x1800000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_41(active0, 0x140000200L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_41(active0, 0x400000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_41(active0, 0x400006000000000L, active2, 0L);
      case 116:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_41(12, 137, 53);
         return jjMoveStringLiteralDfa13_41(active0, 0x400L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa13_41(active0, 0x200000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_41(11, active0, 0L, active2);
}
private int jjMoveStringLiteralDfa13_41(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(11, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(12, active0, 0L, active2);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_41(active0, 0x80000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa14_41(active0, 0x100000000000L, active2, 0L);
      case 101:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_41(13, 167, 53);
         return jjMoveStringLiteralDfa14_41(active0, 0x800000200000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa14_41(active0, 0x2000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_41(active0, 0x404000000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_41(13, 30, 53);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_41(13, 32, 53);
         return jjMoveStringLiteralDfa14_41(active0, 0x1000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_41(active0, 0x200002000000400L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa14_41(active0, 0x200L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_41(active0, 0x4000000000L, active2, 0L);
      case 116:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_41(13, 131, 53);
         break;
      case 118:
         return jjMoveStringLiteralDfa14_41(active0, 0x400000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_41(12, active0, 0L, active2);
}
private int jjMoveStringLiteralDfa14_41(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_41(12, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_41(active0, 0x100000200000L);
      case 98:
         return jjMoveStringLiteralDfa15_41(active0, 0x2000000000L);
      case 99:
         return jjMoveStringLiteralDfa15_41(active0, 0x800000000000L);
      case 101:
         return jjMoveStringLiteralDfa15_41(active0, 0x1000000400000L);
      case 102:
         return jjMoveStringLiteralDfa15_41(active0, 0x4000000000000L);
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_41(14, 57, 53);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_41(active0, 0x400004000000000L);
      case 114:
         return jjMoveStringLiteralDfa15_41(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa15_41(active0, 0x80000000000L);
      case 121:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_41(14, 9, 53);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_41(14, 49, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_41(13, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_41(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_41(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_41(active0, 0x400000L);
      case 98:
         return jjMoveStringLiteralDfa16_41(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa16_41(active0, 0x1000000200000L);
      case 101:
         return jjMoveStringLiteralDfa16_41(active0, 0x80000000000L);
      case 106:
         return jjMoveStringLiteralDfa16_41(active0, 0x2000000000L);
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_41(15, 58, 53);
         break;
      case 116:
         return jjMoveStringLiteralDfa16_41(active0, 0x900000000000L);
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_41(15, 10, 53);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_41(15, 50, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_41(14, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_41(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_41(14, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(15, active0, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa17_41(active0, 0x600000L);
      case 101:
         return jjMoveStringLiteralDfa17_41(active0, 0x102000000000L);
      case 105:
         return jjMoveStringLiteralDfa17_41(active0, 0x800000000000L);
      case 106:
         return jjMoveStringLiteralDfa17_41(active0, 0x4000000000L);
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_41(16, 43, 53);
         break;
      case 116:
         return jjMoveStringLiteralDfa17_41(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_41(15, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_41(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_41(15, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(16, active0, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_41(active0, 0x2000400000L);
      case 101:
         return jjMoveStringLiteralDfa18_41(active0, 0x4000200000L);
      case 105:
         return jjMoveStringLiteralDfa18_41(active0, 0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa18_41(active0, 0x800000000000L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_41(17, 44, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_41(16, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_41(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_41(16, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(17, active0, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa19_41(active0, 0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa19_41(active0, 0x400000L);
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_41(18, 47, 53);
         break;
      case 111:
         return jjMoveStringLiteralDfa19_41(active0, 0x1000000000000L);
      case 115:
         return jjMoveStringLiteralDfa19_41(active0, 0x200000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_41(18, 37, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_41(17, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa19_41(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_41(17, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(18, active0, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_41(19, 48, 53);
         break;
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_41(19, 21, 53);
         return jjMoveStringLiteralDfa20_41(active0, 0x400000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_41(19, 38, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_41(18, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa20_41(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_41(18, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_41(19, active0, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_41(20, 22, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_41(19, active0, 0L, 0L);
}
private int jjStartNfaWithStates_41(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_41(state, pos + 1);
}
private int jjMoveNfa_41(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 90;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 72:
               case 53:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 24:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 63:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 92:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  else if ((0x100000600L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 61:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 7:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 5:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 93:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  else if ((0x100000600L & l) != 0L)
                     { jjCheckNAddTwoStates(56, 59); }
                  break;
               case 60:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 39:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 37:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 43:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 78:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 32:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 17:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 67:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 91:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(88, 44); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(85, 40); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(82, 33); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 6); }
                  break;
               case 64:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 62:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 90:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  else if ((0x100000600L & l) != 0L)
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 4:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 55:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 70:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(23, 25); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 38:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 36:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 42:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 79:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 25:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 31:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 8:
                  if ((0x100000600L & l) != 0L)
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 12:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(26, 27); }
                  break;
               case 20:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 45:
               case 49:
                  if (curChar == 34)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 46:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 47:
                  if (curChar == 34 && kind > 192)
                     kind = 192;
                  break;
               case 56:
                  if ((0x100000600L & l) != 0L)
                     { jjCheckNAddTwoStates(56, 59); }
                  break;
               case 65:
                  if ((0x100000600L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 71:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 6); }
                  break;
               case 74:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(30, 31); }
                  break;
               case 82:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(82, 33); }
                  break;
               case 85:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(85, 40); }
                  break;
               case 88:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(88, 44); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 87;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 79;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 84;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 24:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 63:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 67;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 92:
               case 53:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 61:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 7:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 5:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 93:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 60:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 39:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 37:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 43:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 78:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 32:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 17:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 67:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 91:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 64:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 62:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 90:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 4:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 55:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 3:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 114)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  break;
               case 70:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 88;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 0:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 97)
                     { jjAddStates(32, 36); }
                  else if (curChar == 102)
                     { jjAddStates(37, 38); }
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 38:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 36:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 42:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 79:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 25:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 31:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 6:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if (curChar == 123 && kind > 116)
                     kind = 116;
                  break;
               case 10:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if (curChar == 123 && kind > 118)
                     kind = 118;
                  break;
               case 14:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if (curChar == 123 && kind > 119)
                     kind = 119;
                  break;
               case 22:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 23:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 26:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 103 && kind > 123)
                     kind = 123;
                  break;
               case 28:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 33:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 100 && kind > 134)
                     kind = 134;
                  break;
               case 35:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 40:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 117 && kind > 155)
                     kind = 155;
                  break;
               case 44:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 48:
                  if (curChar == 92)
                     { jjAddStates(39, 42); }
                  break;
               case 50:
                  if (curChar == 92)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 51:
                  if (curChar == 123)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 52:
                  if (curChar == 125)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 54:
                  if (curChar == 102)
                     { jjAddStates(37, 38); }
                  break;
               case 57:
                  if (curChar == 108 && kind > 111)
                     kind = 111;
                  break;
               case 58:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 66:
                  if (curChar == 123 && kind > 115)
                     kind = 115;
                  break;
               case 68:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 97)
                     { jjAddStates(32, 36); }
                  break;
               case 73:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 75:
                  if (curChar == 123 && kind > 117)
                     kind = 117;
                  break;
               case 76:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 77:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 80:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 83:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 84:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 86:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 87:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 89:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 72:
               case 53:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 24:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 63:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 92:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 61:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 7:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 93:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 60:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 37:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 43:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 78:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 17:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 67:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 91:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 64:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 62:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 90:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 4:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 55:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 70:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 38:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 42:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 79:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 25:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 46:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(23, 25); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 90 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_11(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_11(0x10000000000L);
      case 123:
         return jjStopAtPos(0, 297);
      default :
         return jjMoveNfa_11(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_11(long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(0, 0L, 0L, 0L, 0L, active4);
      return 1;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa2_11(active4, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_11(0, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa2_11(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_11(0, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(1, 0L, 0L, 0L, 0L, active4);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         if ((active4 & 0x10000000000L) != 0L)
            return jjStopAtPos(2, 296);
         break;
      default :
         break;
   }
   return jjStartNfa_11(1, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_36(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_36(int pos, long active0){
   return jjMoveNfa_36(jjStopStringLiteralDfa_36(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_36(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_36(0, 0);
   }
}
private int jjMoveNfa_36(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 192)
                     kind = 192;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x100L);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x40L);
      case 98:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x4L);
      case 104:
         return jjMoveStringLiteralDfa1_3(0x0L, 0xa0L);
      case 108:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x1L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x8000000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x18L);
      case 115:
         return jjMoveStringLiteralDfa1_3(0x0L, 0xc02L);
      case 117:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x200L);
      case 125:
         return jjStopAtPos(0, 318);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active4, long active5){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, 0L, 0L, 0L, active4, active5);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_3(active4, 0x8000000000000000L, active5, 0x11L);
      case 101:
         return jjMoveStringLiteralDfa2_3(active4, 0L, active5, 0x80aL);
      case 104:
         return jjMoveStringLiteralDfa2_3(active4, 0L, active5, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa2_3(active4, 0L, active5, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active4, 0L, active5, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa2_3(active4, 0L, active5, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa2_3(active4, 0L, active5, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa2_3(active4, 0L, active5, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active4, 0L, active5, 0x4L);
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa2_3(long old4, long active4, long old5, long active5){
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_3(0, 0L, 0L, 0L, 0L, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, 0L, 0L, 0L, active4, active5);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_3(active4, 0L, active5, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa3_3(active4, 0L, active5, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa3_3(active4, 0L, active5, 0x220L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active4, 0L, active5, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa3_3(active4, 0L, active5, 0xaL);
      case 109:
         return jjMoveStringLiteralDfa3_3(active4, 0x8000000000000000L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_3(active4, 0L, active5, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa3_3(active4, 0L, active5, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active4, 0L, active5, 0x4L);
      case 116:
         if ((active5 & 0x40L) != 0L)
            return jjStopAtPos(2, 326);
         return jjMoveStringLiteralDfa3_3(active4, 0L, active5, 0x800L);
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa3_3(long old4, long active4, long old5, long active5){
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_3(1, 0L, 0L, 0L, 0L, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, 0L, 0L, 0L, 0L, active4, active5);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_3(active4, 0L, active5, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa4_3(active4, 0L, active5, 0x180L);
      case 101:
         if ((active4 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(3, 319);
         return jjMoveStringLiteralDfa4_3(active4, 0L, active5, 0x3L);
      case 102:
         if ((active5 & 0x20L) != 0L)
            return jjStopAtPos(3, 325);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_3(active4, 0L, active5, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa4_3(active4, 0L, active5, 0x4L);
      case 114:
         if ((active5 & 0x200L) != 0L)
            return jjStopAtPos(3, 329);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_3(active4, 0L, active5, 0xc00L);
      default :
         break;
   }
   return jjStartNfa_3(2, 0L, 0L, 0L, 0L, active4, active5);
}
private int jjMoveStringLiteralDfa4_3(long old4, long active4, long old5, long active5){
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_3(2, 0L, 0L, 0L, 0L, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, 0L, 0L, 0L, 0L, 0L, active5);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_3(active5, 0x2L);
      case 100:
         return jjMoveStringLiteralDfa5_3(active5, 0x100L);
      case 101:
         if ((active5 & 0x10L) != 0L)
            return jjStopAtPos(4, 324);
         return jjMoveStringLiteralDfa5_3(active5, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa5_3(active5, 0x800L);
      case 108:
         if ((active5 & 0x1L) != 0L)
            return jjStopAtPos(4, 320);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_3(active5, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa5_3(active5, 0x408L);
      default :
         break;
   }
   return jjStartNfa_3(3, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa5_3(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_3(3, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, 0L, 0L, 0L, 0L, 0L, active5);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa6_3(active5, 0x104L);
      case 105:
         return jjMoveStringLiteralDfa6_3(active5, 0x8L);
      case 110:
         if ((active5 & 0x80L) != 0L)
            return jjStopAtPos(5, 327);
         return jjMoveStringLiteralDfa6_3(active5, 0x800L);
      case 116:
         if ((active5 & 0x2L) != 0L)
            return jjStopAtPos(5, 321);
         break;
      case 121:
         return jjMoveStringLiteralDfa6_3(active5, 0x400L);
      default :
         break;
   }
   return jjStartNfa_3(4, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa6_3(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_3(4, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, 0L, 0L, 0L, 0L, 0L, active5);
      return 6;
   }
   switch(curChar)
   {
      case 103:
         if ((active5 & 0x800L) != 0L)
            return jjStopAtPos(6, 331);
         break;
      case 110:
         if ((active5 & 0x100L) != 0L)
            return jjStopAtPos(6, 328);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_3(active5, 0x8L);
      case 112:
         return jjMoveStringLiteralDfa7_3(active5, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa7_3(active5, 0x4L);
      default :
         break;
   }
   return jjStartNfa_3(5, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa7_3(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_3(5, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, 0L, 0L, 0L, 0L, 0L, active5);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active5 & 0x400L) != 0L)
            return jjStopAtPos(7, 330);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_3(active5, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa8_3(active5, 0x4L);
      default :
         break;
   }
   return jjStartNfa_3(6, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa8_3(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_3(6, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, 0L, 0L, 0L, 0L, 0L, active5);
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_3(active5, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa9_3(active5, 0x8L);
      default :
         break;
   }
   return jjStartNfa_3(7, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa9_3(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_3(7, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, 0L, 0L, 0L, 0L, 0L, active5);
      return 9;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa10_3(active5, 0x4L);
      case 104:
         return jjMoveStringLiteralDfa10_3(active5, 0x8L);
      default :
         break;
   }
   return jjStartNfa_3(8, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa10_3(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_3(8, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(9, 0L, 0L, 0L, 0L, 0L, active5);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_3(active5, 0x8L);
      case 106:
         return jjMoveStringLiteralDfa11_3(active5, 0x4L);
      default :
         break;
   }
   return jjStartNfa_3(9, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa11_3(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_3(9, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(10, 0L, 0L, 0L, 0L, 0L, active5);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_3(active5, 0x4L);
      case 112:
         if ((active5 & 0x8L) != 0L)
            return jjStopAtPos(11, 323);
         break;
      default :
         break;
   }
   return jjStartNfa_3(10, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa12_3(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_3(10, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(11, 0L, 0L, 0L, 0L, 0L, active5);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_3(active5, 0x4L);
      default :
         break;
   }
   return jjStartNfa_3(11, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveStringLiteralDfa13_3(long old5, long active5){
   if (((active5 &= old5)) == 0L)
      return jjStartNfa_3(11, 0L, 0L, 0L, 0L, 0L, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(12, 0L, 0L, 0L, 0L, 0L, active5);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         if ((active5 & 0x4L) != 0L)
            return jjStopAtPos(13, 322);
         break;
      default :
         break;
   }
   return jjStartNfa_3(12, 0L, 0L, 0L, 0L, 0L, active5);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_24(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_24(int pos, long active0){
   return jjMoveNfa_24(jjStopStringLiteralDfa_24(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_24(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_24(0, 0);
   }
}
private int jjMoveNfa_24(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 250)
                        kind = 250;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 249)
                     kind = 249;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 250)
                     kind = 250;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 250)
                     kind = 250;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 250)
                     kind = 250;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_34(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_34(int pos, long active0){
   return jjMoveNfa_34(jjStopStringLiteralDfa_34(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_34(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_34(0, 0);
   }
}
private int jjMoveNfa_34(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 195)
                        kind = 195;
                     { jjCheckNAdd(14); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000600L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 194)
                     kind = 194;
                  break;
               case 14:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAdd(14); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 14:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAdd(14); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(43, 49); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 11:
                  if (curChar == 110)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 12:
                  if (curChar == 116)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 13:
                  if (curChar == 117)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 14:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAdd(14); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_29(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_29(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_29(jjStopStringLiteralDfa_29(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_29(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_29(0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa1_29(0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa1_29(0x80000000L);
      default :
         return jjMoveNfa_29(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_29(long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa2_29(active3, 0x20000000L);
      case 104:
         return jjMoveStringLiteralDfa2_29(active3, 0x40000000L);
      case 118:
         return jjMoveStringLiteralDfa2_29(active3, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_29(0, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa2_29(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_29(0, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa3_29(active3, 0xc0000000L);
      case 116:
         return jjMoveStringLiteralDfa3_29(active3, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_29(1, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa3_29(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_29(1, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(2, 0L, 0L, 0L, active3);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_29(active3, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa4_29(active3, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa4_29(active3, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_29(2, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa4_29(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_29(2, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(3, 0L, 0L, 0L, active3);
      return 4;
   }
   switch(curChar)
   {
      case 107:
         if ((active3 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 222);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_29(active3, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa5_29(active3, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_29(3, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa5_29(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_29(3, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(4, 0L, 0L, 0L, active3);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_29(active3, 0x80000000L);
      case 110:
         if ((active3 & 0x20000000L) != 0L)
            return jjStopAtPos(5, 221);
         break;
      default :
         break;
   }
   return jjStartNfa_29(4, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa6_29(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_29(4, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(5, 0L, 0L, 0L, active3);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa7_29(active3, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_29(5, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa7_29(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_29(5, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_29(6, 0L, 0L, 0L, active3);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active3 & 0x80000000L) != 0L)
            return jjStopAtPos(7, 223);
         break;
      default :
         break;
   }
   return jjStartNfa_29(6, 0L, 0L, 0L, active3);
}
private int jjMoveNfa_29(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_25(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_25(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_25(jjStopStringLiteralDfa_25(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_25(){
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa1_25(0x80000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_25(0x40000000000000L);
      default :
         return jjMoveNfa_25(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_25(long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_25(active3, 0x40000000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_25(active3, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_25(0, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa2_25(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_25(0, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_25(active3, 0xc0000000000000L);
      default :
         break;
   }
   return jjStartNfa_25(1, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa3_25(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_25(1, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(2, 0L, 0L, 0L, active3);
      return 3;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa4_25(active3, 0xc0000000000000L);
      default :
         break;
   }
   return jjStartNfa_25(2, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa4_25(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_25(2, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(3, 0L, 0L, 0L, active3);
      return 4;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa5_25(active3, 0xc0000000000000L);
      default :
         break;
   }
   return jjStartNfa_25(3, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa5_25(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_25(3, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(4, 0L, 0L, 0L, active3);
      return 5;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa6_25(active3, 0xc0000000000000L);
      default :
         break;
   }
   return jjStartNfa_25(4, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa6_25(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_25(4, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(5, 0L, 0L, 0L, active3);
      return 6;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa7_25(active3, 0xc0000000000000L);
      default :
         break;
   }
   return jjStartNfa_25(5, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa7_25(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_25(5, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(6, 0L, 0L, 0L, active3);
      return 7;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa8_25(active3, 0xc0000000000000L);
      default :
         break;
   }
   return jjStartNfa_25(6, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa8_25(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_25(6, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_25(7, 0L, 0L, 0L, active3);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active3 & 0x40000000000000L) != 0L)
            return jjStopAtPos(8, 246);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStopAtPos(8, 247);
         break;
      default :
         break;
   }
   return jjStartNfa_25(7, 0L, 0L, 0L, active3);
}
private int jjMoveNfa_25(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 333)
                        kind = 333;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 332)
                     kind = 332;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 333)
                     kind = 333;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 333)
                     kind = 333;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 333)
                     kind = 333;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_15(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_15(int pos, long active0){
   return jjMoveNfa_15(jjStopStringLiteralDfa_15(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_15(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_15(0, 0);
   }
}
private int jjMoveNfa_15(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7c00f87a00000000L & l) != 0L)
                  {
                     if (kind > 285)
                        kind = 285;
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x7c00f87a00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 34 && kind > 284)
                     kind = 284;
                  break;
               case 6:
                  if ((0x7c00f87a00000000L & l) != 0L && kind > 285)
                     kind = 285;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xf8000001d0000001L & l) != 0L && kind > 285)
                     kind = 285;
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xf8000001d0000001L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 285)
                     kind = 285;
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_8(){
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 303);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 304)
                        kind = 304;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 304)
                     kind = 304;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 304)
                     kind = 304;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 304)
                     kind = 304;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_38(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_38(int pos, long active0){
   return jjMoveNfa_38(jjStopStringLiteralDfa_38(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_38(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_38(0, 0);
   }
}
private int jjMoveNfa_38(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 192)
                     kind = 192;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_37(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_37(int pos, long active0){
   return jjMoveNfa_37(jjStopStringLiteralDfa_37(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_37(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_37(0, 0);
   }
}
private int jjMoveNfa_37(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 24;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAddTwoStates(22, 23); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(50, 55); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 3:
                  if (curChar == 34)
                     { jjCheckNAddStates(50, 55); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 192)
                     kind = 192;
                  break;
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 11:
                  if ((0xfffffffb00000600L & l) != 0L)
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 12:
                  if (curChar == 34 && kind > 194)
                     kind = 194;
                  break;
               case 14:
                  if (curChar == 34)
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 21:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 22:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(22); }
                  break;
               case 23:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAdd(23); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 13:
                  if (curChar == 92)
                     { jjAddStates(59, 65); }
                  break;
               case 15:
                  if (curChar == 92)
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 16:
                  if (curChar == 123)
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 17:
                  if (curChar == 125)
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 18:
                  if (curChar == 110)
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 19:
                  if (curChar == 116)
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 20:
                  if (curChar == 117)
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 22:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(22); }
                  break;
               case 23:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAdd(23); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               case 11:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(56, 58); }
                  break;
               case 22:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(22); }
                  break;
               case 23:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAdd(23); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_39(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_39(int pos, long active0){
   return jjMoveNfa_39(jjStopStringLiteralDfa_39(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_39(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_39(0, 0);
   }
}
private int jjMoveNfa_39(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     { jjCheckNAdd(11); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 190)
                     kind = 190;
                  break;
               case 11:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(5, 8); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 191)
                     kind = 191;
                  { jjCheckNAdd(11); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_42(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xaa0000000000000L) != 0L || (active1 & 0xf0000000000L) != 0L || (active2 & 0x7c000000000L) != 0L)
            return 80;
         if ((active0 & 0xaa0000000L) != 0L || (active1 & 0x200000003000000L) != 0L || (active2 & 0x76000000L) != 0L)
            return 35;
         if ((active0 & 0x8000000L) != 0L || (active1 & 0x300000L) != 0L || (active2 & 0x400000L) != 0L)
            return 17;
         if ((active0 & 0xa0L) != 0L || (active1 & 0xf0000000000000e0L) != 0L || (active2 & 0x3L) != 0L || (active4 & 0x108000000000L) != 0L)
            return 55;
         if ((active0 & 0xa00L) != 0L || (active1 & 0x3f00L) != 0L || (active2 & 0x3800000000001b0L) != 0L || (active4 & 0x1000000000000000L) != 0L)
            return 31;
         if ((active0 & 0xa000000000000000L) != 0L || (active1 & 0x400000000000L) != 0L || (active3 & 0x8000000L) != 0L || (active4 & 0x20000000000000L) != 0L)
            return 7;
         if ((active1 & 0x60000L) != 0L || (active2 & 0x10000000000f8000L) != 0L || (active4 & 0x100000L) != 0L)
            return 46;
         if ((active1 & 0x400300000000000L) != 0L || (active2 & 0x7f80000000000L) != 0L)
            return 24;
         if ((active1 & 0x2L) != 0L || (active2 & 0x18000000000000L) != 0L || (active3 & 0x100000000000000L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active2 & 0x8000000000000L) != 0L)
            return 4;
         if ((active2 & 0x20000000000L) != 0L)
            return 193;
         if ((active1 & 0x40000L) != 0L)
            return 50;
         if ((active2 & 0x14000000L) != 0L)
            return 34;
         if ((active2 & 0x1L) != 0L)
            return 62;
         if ((active1 & 0x4000000000000000L) != 0L || (active4 & 0x100000000000L) != 0L)
            return 53;
         if ((active2 & 0x40000L) != 0L || (active4 & 0x100000L) != 0L)
            return 45;
         if ((active1 & 0x1800L) != 0L || (active2 & 0x380000000000080L) != 0L || (active4 & 0x1000000000000000L) != 0L)
            return 30;
         if ((active1 & 0x400000000000L) != 0L)
            return 8;
         if ((active0 & 0x20000000000000L) != 0L || (active2 & 0x4000000000L) != 0L)
            return 85;
         if ((active2 & 0x180000000000L) != 0L)
            return 23;
         if ((active0 & 0xa80000000000000L) != 0L || (active1 & 0xf0000000000L) != 0L || (active2 & 0x18000000000L) != 0L)
            return 79;
         return -1;
      case 2:
         if ((active2 & 0x1L) != 0L)
            return 61;
         if ((active1 & 0x4000000000000000L) != 0L)
            return 195;
         if ((active0 & 0x20000000000000L) != 0L || (active2 & 0x4000000000L) != 0L)
            return 84;
         if ((active1 & 0x40000L) != 0L)
            return 47;
         if ((active2 & 0x8000000000000L) != 0L)
            return 3;
         if ((active2 & 0x100000000000000L) != 0L)
            return 29;
         if ((active2 & 0x40000L) != 0L || (active4 & 0x100000L) != 0L)
            return 44;
         return -1;
      case 3:
         if ((active1 & 0x40000L) != 0L)
            return 48;
         if ((active2 & 0x100000000000000L) != 0L)
            return 28;
         if ((active2 & 0x40000L) != 0L)
            return 43;
         if ((active0 & 0x20000000000000L) != 0L || (active2 & 0x4000000000L) != 0L)
            return 81;
         return -1;
      case 4:
         if ((active2 & 0x40000L) != 0L)
            return 38;
         if ((active0 & 0x20000000000000L) != 0L || (active2 & 0x4000000000L) != 0L)
            return 196;
         return -1;
      case 5:
         if ((active2 & 0x40000L) != 0L)
            return 39;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_42(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_42(jjStopStringLiteralDfa_42(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_42(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_42(0x5555555555555540L, 0x15L, 0x0L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_42(0xa0L, 0xf0000000000000e0L, 0x3L, 0x0L, 0x108000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_42(0x0L, 0x0L, 0xcL, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_42(0xa00L, 0x3f00L, 0x3800000000001b0L, 0x0L, 0x1000000000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_42(0x2000L, 0xc000L, 0xc00000000001e00L, 0x0L, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa1_42(0x2a8000L, 0x10000L, 0x6000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_42(0x0L, 0x60000L, 0x10000000000f8000L, 0x0L, 0x100000L);
      case 103:
         return jjMoveStringLiteralDfa1_42(0x800000L, 0x80000L, 0x100000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_42(0x2000000L, 0x100000000000000L, 0x200000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_42(0x8000000L, 0x300000L, 0x400000L, 0x0L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_42(0x0L, 0x0L, 0x800000L, 0x400L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_42(0x0L, 0xc00000L, 0x2000000001000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_42(0xaa0000000L, 0x200000003000000L, 0x76000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_42(0x2000000000L, 0x3c000000L, 0x80000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_42(0x0L, 0x3c0000000L, 0x0L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_42(0xaaa8000000000L, 0xfc00000000L, 0x3f00000000L, 0x100L, 0x2000000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_42(0xaa0000000000000L, 0xf0000000000L, 0x7c000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_42(0x0L, 0x400300000000000L, 0x7f80000000000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_42(0xa000000000000000L, 0x400000000000L, 0x0L, 0x8000000L, 0x20000000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_42(0x0L, 0x2L, 0x18000000000000L, 0x100000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_42(0x0L, 0x8L, 0x60000000000000L, 0x200L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_42(0x0L, 0x0L, 0x0L, 0x0L, 0x2000000000L);
      case 123:
         return jjStopAtPos(0, 113);
      case 125:
         return jjStopAtPos(0, 114);
      default :
         return jjMoveNfa_42(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_42(long active0, long active1, long active2, long active3, long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_42(active0, 0x20000020000140L, active1, 0x200000403000300L, active2, 0x20004f83008000L, active3, 0x200L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_42(active0, 0x20L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_42(active0, 0x8001480L, active1, 0x2000000000000000L, active2, 0L, active3, 0L, active4, 0x8000000000L);
      case 100:
         return jjMoveStringLiteralDfa2_42(active0, 0x4000L, active1, 0x4000000000000000L, active2, 0x2000L, active3, 0L, active4, 0x100000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_42(active0, 0xa80002000550000L, active1, 0x1000f008400c008L, active2, 0xc00198014800e00L, active3, 0L, active4, 0x8000000L);
      case 103:
         return jjMoveStringLiteralDfa2_42(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_42(active0, 0x4000200L, active1, 0L, active2, 0x1000000030L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_42(active0, 0x8092000000L, active1, 0x400100000000000L, active2, 0x1040600060031000L, active3, 0x400L, active4, 0x2000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_42(active0, 0x800000L, active1, 0x8000000000020420L, active2, 0L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_42(active0, 0x1540008000L, active1, 0x100000L, active2, 0x4000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_42(active0, 0x40002a0000L, active1, 0x402000c2L, active2, 0x400000L, active3, 0x100000000000000L, active4, 0L);
      case 111:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_42(1, 110, 8);
         return jjMoveStringLiteralDfa2_42(active0, 0x20000002000L, active1, 0x30c81800L, active2, 0x2380020000040080L, active3, 0L, active4, 0x1000000000100000L);
      case 112:
         return jjMoveStringLiteralDfa2_42(active0, 0x15550000000000L, active1, 0x800000000L, active2, 0x1L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_42(active0, 0xb542a80000000000L, active1, 0x1000007100040000L, active2, 0x2000300004L, active3, 0x8000100L, active4, 0x2000000000000L);
      case 115:
         return jjMoveStringLiteralDfa2_42(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_42(active0, 0x4000000000000000L, active1, 0x1L, active2, 0x1800000000002L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_42(active0, 0x8000a00000800L, active1, 0x208000002004L, active2, 0x12040000080108L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_42(active0, 0L, active1, 0x10L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_42(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_42(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_42(active0, 0L, active1, 0L, active2, 0x4000000000000L, active3, 0L, active4, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_42(0, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa2_42(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_42(0, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_42(active0, 0x40000040028000L, active1, 0L, active2, 0x800004004014L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_42(active0, 0x8000000000040L, active1, 0x8000000000L, active2, 0x1000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_42(active0, 0x10000100L, active1, 0x600040L, active2, 0x2000000100000000L, active3, 0L, active4, 0x8000000000L);
      case 100:
         return jjMoveStringLiteralDfa3_42(active0, 0x2000000L, active1, 0x4000000000000000L, active2, 0x80000000000000L, active3, 0L, active4, 0L);
      case 101:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         return jjMoveStringLiteralDfa3_42(active0, 0x3500086000000200L, active1, 0x10010L, active2, 0x48000000210020L, active3, 0L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_42(active0, 0x280000L, active1, 0x4000L, active2, 0x402000000000600L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_42(active0, 0L, active1, 0x1000000100800000L, active2, 0x208000000000L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_42(active0, 0x400L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_42(active0, 0x10104000000L, active1, 0x100001000000002L, active2, 0x10002000002000L, active3, 0x100000008000000L, active4, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_42(active0, 0x20000000L, active1, 0L, active2, 0x2000000L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_42(active0, 0xa01000000L, active1, 0x10000080020L, active2, 0x10000f00000a0000L, active3, 0x200L, active4, 0x1000000008000000L);
      case 109:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 95);
         return jjMoveStringLiteralDfa3_42(active0, 0x10000L, active1, 0x100000L, active2, 0x1040000a0001000L, active3, 0L, active4, 0x100000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_42(active0, 0x20000080540000L, active1, 0x100211001804L, active2, 0x200004040000080L, active3, 0x400L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_42(active0, 0x2a60008804000L, active1, 0x6000060400L, active2, 0x1001000100000L, active3, 0x100L, active4, 0x2000000000000L);
      case 112:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 99);
         return jjMoveStringLiteralDfa3_42(active0, 0x8000000000L, active1, 0x220000000000L, active2, 0x400001L, active3, 0L, active4, 0x20000000000000L);
      case 113:
         return jjMoveStringLiteralDfa3_42(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 276;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_42(active0, 0x4005500000000000L, active1, 0x400000109L, active2, 0x200040900L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_42(active0, 0x280000000000820L, active1, 0x4000000a000L, active2, 0x800000000000008L, active3, 0L, active4, 0L);
      case 116:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(2, 127);
         return jjMoveStringLiteralDfa3_42(active0, 0x80L, active1, 0x2000000022000200L, active2, 0x400c10000002L, active3, 0L, active4, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_42(active0, 0x8010001400001000L, active1, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_42(active0, 0x800000000000000L, active1, 0x80000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_42(active0, 0x2000L, active1, 0x4000000L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(2, 143);
         return jjMoveStringLiteralDfa3_42(active0, 0L, active1, 0x200000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(2, 71);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(2, 151);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_42(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_42(1, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa3_42(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_42(1, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_42(active0, 0x50000L, active1, 0x10100420000L, active2, 0x2400010000000200L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_42(active0, 0x10000000820000L, active1, 0L, active2, 0x4000000000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_42(active0, 0x200L, active1, 0x18000L, active2, 0x800000000000020L, active3, 0L, active4, 0L);
      case 100:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStopAtPos(3, 180);
         else if ((active3 & 0x400L) != 0L)
            return jjStopAtPos(3, 202);
         return jjMoveStringLiteralDfa4_42(active0, 0x2006000000L, active1, 0x80100L, active2, 0L, active3, 0L, active4, 0x2000000000000L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(3, 39);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 92);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(3, 122);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(3, 145);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 157);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 159);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(3, 169);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 170);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(3, 174);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStopAtPos(3, 183);
         else if ((active4 & 0x20000000000000L) != 0L)
            return jjStopAtPos(3, 309);
         return jjMoveStringLiteralDfa4_42(active0, 0x6280104000000400L, active1, 0x40200104240L, active2, 0x80201001000L, active3, 0L, active4, 0x8000000000L);
      case 102:
         if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(3, 149);
         return jjMoveStringLiteralDfa4_42(active0, 0x500000L, active1, 0L, active2, 0x2000000000000L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_42(active0, 0x20000000000000L, active1, 0x100100000000000L, active2, 0x4000000000L, active3, 0x8000000L, active4, 0L);
      case 104:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 293);
         return jjMoveStringLiteralDfa4_42(active0, 0L, active1, 0L, active2, 0x410000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_42(active0, 0x800000000008080L, active1, 0x2000000000800004L, active2, 0x8000004c08L, active3, 0L, active4, 0x100008000000L);
      case 106:
         return jjMoveStringLiteralDfa4_42(active0, 0x40000000L, active1, 0x2000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_42(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_42(active0, 0x8021400000000L, active1, 0x200028000200000L, active2, 0x20000000090001L, active3, 0L, active4, 0L);
      case 109:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_42(3, 82, 48);
         return jjMoveStringLiteralDfa4_42(active0, 0x200000000000L, active1, 0L, active2, 0x100000000040000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_42(active0, 0x40000108002000L, active1, 0x400L, active2, 0x203004000094L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_42(active0, 0x54400b1280000L, active1, 0x80000000000L, active2, 0x42000000L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_42(active0, 0x2810000000000L, active1, 0x200020000000L, active2, 0L, active3, 0x100L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_42(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_42(active0, 0L, active1, 0x4000000004000010L, active2, 0x1000000000102L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_42(active0, 0x8500000000001040L, active1, 0x28L, active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 116:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(3, 141);
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStopAtPos(3, 248);
         return jjMoveStringLiteralDfa4_42(active0, 0xa00000920L, active1, 0x4400003800L, active2, 0x1200800800000000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_42(active0, 0L, active1, 0x1000000002000001L, active2, 0x100000500000L, active3, 0x200L, active4, 0x1000000000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_42(active0, 0x1000080000000000L, active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStopAtPos(3, 182);
         return jjMoveStringLiteralDfa4_42(active0, 0x4000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 88);
         break;
      default :
         break;
   }
   return jjStartNfa_42(2, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa4_42(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_42(2, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(3, active0, active1, active2, active3, active4);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_42(active0, 0x2800000800000L, active1, 0x1000000000L, active2, 0x200100040000L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_42(active0, 0x1040000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_42(active0, 0x400L, active1, 0L, active2, 0x80000000004L, active3, 0L, active4, 0L);
      case 100:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(4, 144);
         return jjMoveStringLiteralDfa5_42(active0, 0x4004000000L, active1, 0x100000L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(4, 40);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(4, 74);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(4, 164);
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(4, 175);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(4, 176);
         else if ((active3 & 0x200L) != 0L)
            return jjStopAtPos(4, 201);
         return jjMoveStringLiteralDfa5_42(active0, 0x45200a0002000000L, active1, 0x4200006000008800L, active2, 0x1300100800000180L, active3, 0x100L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_42(active0, 0x40000000000000L, active1, 0x200L, active2, 0L, active3, 0x8000000L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_42(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_42(active0, 0x1008000a00010100L, active1, 0x28000000108L, active2, 0x2000004000003L, active3, 0L, active4, 0L);
      case 107:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_42(active0, 0x200L, active1, 0x80000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(4, 152);
         return jjMoveStringLiteralDfa5_42(active0, 0x10040000022000L, active1, 0x300000000000L, active2, 0x2000000000004000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_42(active0, 0x2000400008000000L, active1, 0x1000000000000000L, active2, 0L, active3, 0L, active4, 0x1000000008000000L);
      case 110:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(4, 87);
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStopAtPos(4, 300);
         return jjMoveStringLiteralDfa5_42(active0, 0x10004000L, active1, 0x500000000L, active2, 0x200081418L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_42(active0, 0x200140500800L, active1, 0x2000000004002000L, active2, 0x4000010000000L, active3, 0L, active4, 0L);
      case 112:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(4, 148);
         return jjMoveStringLiteralDfa5_42(active0, 0x5000000000000L, active1, 0x80000L, active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa5_42(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(4, 97);
         return jjMoveStringLiteralDfa5_42(active0, 0xa0280020L, active1, 0x40022005000L, active2, 0x800000042000000L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_42(active0, 0x800002000000000L, active1, 0x51L, active2, 0x8000000000L, active3, 0L, active4, 0x8000000000L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(4, 81);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(4, 150);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 165);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStopAtPos(4, 181);
         return jjMoveStringLiteralDfa5_42(active0, 0x8280001400001040L, active1, 0x10000000020L, active2, 0x10400000000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_42(active0, 0L, active1, 0x210002L, active2, 0x400000000000200L, active3, 0L, active4, 0x2000000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_42(active0, 0x100000000080L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_42(3, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa5_42(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_42(3, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(4, active0, active1, active2, active3, active4);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_42(active0, 0x5000009000020L, active1, 0x81020L, active2, 0x8000000084000L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_42(active0, 0x2000000000L, active1, 0L, active2, 0x2L, active3, 0L, active4, 0L);
      case 99:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(5, 103);
         return jjMoveStringLiteralDfa6_42(active0, 0x280000L, active1, 0x26000000000L, active2, 0x81L, active3, 0L, active4, 0x2000000000000L);
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(5, 41);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 156);
         break;
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(5, 17);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(5, 65);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(5, 108);
         return jjMoveStringLiteralDfa6_42(active0, 0xa040140004000000L, active1, 0x1000010400000000L, active2, 0x818L, active3, 0x8000000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_42(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_42(active0, 0x2800000000000L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 104:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(5, 130);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_42(active0, 0x810001400000000L, active1, 0x200122100010L, active2, 0x800010000000400L, active3, 0L, active4, 0x8000000L);
      case 107:
         return jjMoveStringLiteralDfa6_42(active0, 0x400L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(5, 16);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         return jjMoveStringLiteralDfa6_42(active0, 0x200044000L, active1, 0L, active2, 0x404000000000200L, active3, 0L, active4, 0L);
      case 109:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_42(active0, 0x4000000010000000L, active1, 0x2000L, active2, 0L, active3, 0L, active4, 0L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(5, 125);
         else if ((active4 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(5, 316);
         return jjMoveStringLiteralDfa6_42(active0, 0x80000000000L, active1, 0x200000000008100L, active2, 0x300100004000100L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_42(active0, 0x280400000003200L, active1, 0x208L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(5, 188);
         return jjMoveStringLiteralDfa6_42(active0, 0x1e0500040L, active1, 0x4000L, active2, 0x800000000L, active3, 0x100L, active4, 0L);
      case 115:
         if ((active4 & 0x8000000000L) != 0L)
            return jjStopAtPos(5, 295);
         return jjMoveStringLiteralDfa6_42(active0, 0x1008004000000000L, active1, 0x4000000000200000L, active2, 0x42001000L, active3, 0L, active4, 0L);
      case 116:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(5, 120);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_42(5, 146, 39);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(5, 161);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 171);
         return jjMoveStringLiteralDfa6_42(active0, 0x500200000000000L, active1, 0x1000010041L, active2, 0x208000000000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_42(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_42(active0, 0x20000800000100L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 90);
         break;
      case 120:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(5, 177);
         return jjMoveStringLiteralDfa6_42(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa6_42(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_42(4, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa6_42(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_42(4, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(5, active0, active1, active2, active3, active4);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_42(active0, 0x22800810002040L, active1, 0x20000100100L, active2, 0x1L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_42(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_42(active0, 0x500020L, active1, 0x1000L, active2, 0x8100000000000L, active3, 0L, active4, 0L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(6, 63);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 104);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(6, 139);
         return jjMoveStringLiteralDfa7_42(active0, 0L, active1, 0x8000L, active2, 0x4000L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(6, 8);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(6, 18);
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(6, 45);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(6, 66);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(6, 80);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 100);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 106);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(6, 160);
         return jjMoveStringLiteralDfa7_42(active0, 0x40000000a0200000L, active1, 0x200000006001L, active2, 0x8042000000L, active3, 0L, active4, 0L);
      case 103:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 154);
         return jjMoveStringLiteralDfa7_42(active0, 0x5000000000000L, active1, 0x200000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_42(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_42(active0, 0x1000000208000000L, active1, 0x200000L, active2, 0x2004000000001000L, active3, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 24);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(6, 132);
         return jjMoveStringLiteralDfa7_42(active0, 0x400000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 109:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(6, 12);
         return jjMoveStringLiteralDfa7_42(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0L, active4, 0L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(6, 67);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(6, 163);
         return jjMoveStringLiteralDfa7_42(active0, 0x2280100000000000L, active1, 0x1000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_42(active0, 0xd00000000004400L, active1, 0x50L, active2, 0x10000000000L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_42(active0, 0L, active1, 0L, active2, 0x800000400000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(6, 98);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 219);
         return jjMoveStringLiteralDfa7_42(active0, 0x140000000L, active1, 0x80200L, active2, 0L, active3, 0L, active4, 0L);
      case 115:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(6, 126);
         return jjMoveStringLiteralDfa7_42(active0, 0x10000000000000L, active1, 0L, active2, 0x8L, active3, 0L, active4, 0L);
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(6, 75);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 101);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(6, 136);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStopAtPos(6, 184);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStopAtPos(6, 185);
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x2000000000000L) != 0L)
            return jjStopAtPos(6, 305);
         return jjMoveStringLiteralDfa7_42(active0, 0x480000000000L, active1, 0x4002000020L, active2, 0x680L, active3, 0x100L, active4, 0x8000000L);
      case 117:
         return jjMoveStringLiteralDfa7_42(active0, 0x2000000200L, active1, 0L, active2, 0x200000000002L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_42(active0, 0x40001000000000L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      case 122:
         return jjMoveStringLiteralDfa7_42(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_42(5, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa7_42(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_42(5, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(6, active0, active1, active2, active3, active4);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_42(active0, 0x45001000004000L, active1, 0x120008000L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_42(active0, 0x80000000000040L, active1, 0L, active2, 0x4000000000000L, active3, 0L, active4, 0L);
      case 100:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(7, 64);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(7, 78);
         return jjMoveStringLiteralDfa8_42(active0, 0x80000002000L, active1, 0L, active2, 0x4000L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(7, 46);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(7, 69);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(7, 147);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(7, 162);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(7, 172);
         return jjMoveStringLiteralDfa8_42(active0, 0x8000140400000L, active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0x8000000L);
      case 102:
         return jjMoveStringLiteralDfa8_42(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_42(active0, 0x10000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_42(active0, 0x410000000L, active1, 0L, active2, 0x480L, active3, 0L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa8_42(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(7, 27);
         return jjMoveStringLiteralDfa8_42(active0, 0x20000800000000L, active1, 0x100L, active2, 0x2000000000000000L, active3, 0L, active4, 0L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(7, 59);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(7, 68);
         return jjMoveStringLiteralDfa8_42(active0, 0x4500000200000000L, active1, 0L, active2, 0x10000000000L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_42(active0, 0x1000000000000000L, active1, 0L, active2, 0x1000L, active3, 0L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa8_42(active0, 0L, active1, 0L, active2, 0x42000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(7, 70);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(7, 77);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(7, 109);
         return jjMoveStringLiteralDfa8_42(active0, 0x200000000200000L, active1, 0L, active2, 0x208000000000L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_42(active0, 0x2000000000L, active1, 0L, active2, 0x8L, active3, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(7, 5);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(7, 124);
         return jjMoveStringLiteralDfa8_42(active0, 0x2900000000200L, active1, 0x200020000181000L, active2, 0x800000000000003L, active3, 0L, active4, 0L);
      case 117:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(7, 61);
         return jjMoveStringLiteralDfa8_42(active0, 0x4000000400L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_42(active0, 0xa0000000L, active1, 0x200000L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(7, 73);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(7, 89);
         else if ((active3 & 0x100L) != 0L)
            return jjStopAtPos(7, 200);
         break;
      default :
         break;
   }
   return jjStartNfa_42(6, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa8_42(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_42(6, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(7, active0, active1, active2, 0L, active4);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_42(active0, 0x2000L, active1, 0L, active2, 0x8000000000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_42(active0, 0x100000000000000L, active1, 0L, active2, 0L, active4, 0L);
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(8, 51);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(8, 102);
         return jjMoveStringLiteralDfa9_42(active0, 0x100000004000L, active1, 0L, active2, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(8, 33);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(8, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(8, 85);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(8, 105);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(8, 129);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(8, 173);
         return jjMoveStringLiteralDfa9_42(active0, 0x212800000200000L, active1, 0L, active2, 0x8000000000L, active4, 0L);
      case 104:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(8, 121);
         return jjMoveStringLiteralDfa9_42(active0, 0x200L, active1, 0L, active2, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_42(active0, 0x20a0000000L, active1, 0x100L, active2, 0x800000000000001L, active4, 0L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(8, 28);
         return jjMoveStringLiteralDfa9_42(active0, 0xc0001000000000L, active1, 0L, active2, 0L, active4, 0L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(8, 60);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(8, 140);
         return jjMoveStringLiteralDfa9_42(active0, 0x400000000L, active1, 0x88000L, active2, 0x4000000000000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_42(active0, 0L, active1, 0x1000L, active2, 0x688L, active4, 0L);
      case 114:
         if ((active4 & 0x8000000L) != 0L)
            return jjStopAtPos(8, 283);
         return jjMoveStringLiteralDfa9_42(active0, 0x400000000400000L, active1, 0L, active2, 0x4000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_42(active0, 0x4000000000L, active1, 0L, active2, 0x10000000000L, active4, 0L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(8, 6);
         return jjMoveStringLiteralDfa9_42(active0, 0x5000000000400L, active1, 0x120000000L, active2, 0x2000000000000000L, active4, 0L);
      case 117:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(8, 62);
         return jjMoveStringLiteralDfa9_42(active0, 0x20080800000000L, active1, 0L, active2, 0x42000000L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_42(active0, 0x140000000L, active1, 0L, active2, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_42(7, active0, active1, active2, 0L, active4);
}
private int jjMoveStringLiteralDfa9_42(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4)) == 0L)
      return jjStartNfa_42(7, old0, old1, old2, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(8, active0, active1, active2, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_42(active0, 0x4000L, active1, 0L, active2, 0x4000000000000L);
      case 98:
         return jjMoveStringLiteralDfa10_42(active0, 0x2000L, active1, 0L, active2, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa10_42(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(9, 52);
         return jjMoveStringLiteralDfa10_42(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(9, 34);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(9, 35);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(9, 53);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(9, 93);
         return jjMoveStringLiteralDfa10_42(active0, 0x405000000400000L, active1, 0x80000L, active2, 0x2000000042004000L);
      case 103:
         return jjMoveStringLiteralDfa10_42(active0, 0L, active1, 0L, active2, 0x8000000000000L);
      case 104:
         return jjMoveStringLiteralDfa10_42(active0, 0x400L, active1, 0L, active2, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_42(active0, 0x4140000200L, active1, 0x100000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_42(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_42(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(9, 135);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(9, 138);
         return jjMoveStringLiteralDfa10_42(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_42(active0, 0x80000000000000L, active1, 0L, active2, 0x800000000000001L);
      case 112:
         return jjMoveStringLiteralDfa10_42(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(9, 76);
         return jjMoveStringLiteralDfa10_42(active0, 0L, active1, 0L, active2, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa10_42(active0, 0xa0200000L, active1, 0L, active2, 0L);
      case 116:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(9, 79);
         return jjMoveStringLiteralDfa10_42(active0, 0L, active1, 0x100L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_42(active0, 0x40101000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa10_42(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_42(8, active0, active1, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_42(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_42(8, old0, old1, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(9, active0, active1, active2, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa11_42(active0, 0x4000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_42(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(10, 36);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(10, 54);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStopAtPos(10, 179);
         return jjMoveStringLiteralDfa11_42(active0, 0x2000200000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_42(active0, 0x2000000a0000400L, active1, 0L, active2, 0x10000000000L);
      case 106:
         return jjMoveStringLiteralDfa11_42(active0, 0L, active1, 0L, active2, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa11_42(active0, 0x80000002000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_42(active0, 0x4000000000000L, active1, 0L, active2, 0x4000000000200L);
      case 110:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(10, 128);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStopAtPos(10, 187);
         return jjMoveStringLiteralDfa11_42(active0, 0x80004000000000L, active1, 0L, active2, 0x8042000000L);
      case 111:
         return jjMoveStringLiteralDfa11_42(active0, 0x102800000000000L, active1, 0x100000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_42(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(10, 83);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(10, 189);
         break;
      case 115:
         return jjMoveStringLiteralDfa11_42(active0, 0x140400200L, active1, 0L, active2, 0x4000L);
      case 118:
         return jjMoveStringLiteralDfa11_42(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(10, 72);
         break;
      default :
         break;
   }
   return jjStartNfa_42(9, active0, active1, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_42(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_42(9, old0, old1, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(10, active0, active1, active2, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_42(active0, 0L, active1, 0L, active2, 0x8000000200L);
      case 99:
         return jjMoveStringLiteralDfa12_42(active0, 0L, active1, 0L, active2, 0x42000000L);
      case 100:
         return jjMoveStringLiteralDfa12_42(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(11, 13);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(11, 55);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStopAtPos(11, 178);
         return jjMoveStringLiteralDfa12_42(active0, 0x4000400000L, active1, 0L, active2, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa12_42(active0, 0x400080140000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_42(active0, 0x100000004000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(11, 96);
         return jjMoveStringLiteralDfa12_42(active0, 0x100800000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_42(active0, 0x50000a0000000L, active1, 0L, active2, 0L);
      case 112:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(11, 168);
         break;
      case 114:
         return jjMoveStringLiteralDfa12_42(active0, 0x200000L, active1, 0L, active2, 0L);
      case 115:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(11, 142);
         return jjMoveStringLiteralDfa12_42(active0, 0x200002000000400L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_42(active0, 0x200L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_42(10, active0, active1, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_42(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_42(10, old0, old1, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(11, active0, 0L, active2, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_42(active0, 0x80000000000L, active2, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa13_42(active0, 0x4000000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(12, 14);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(12, 56);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(12, 153);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(12, 158);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_42(active0, 0x202100000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa13_42(active0, 0L, active2, 0x8000000000L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(12, 29);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(12, 31);
         return jjMoveStringLiteralDfa13_42(active0, 0x1800000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_42(active0, 0x140000200L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_42(active0, 0x400000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_42(active0, 0x400006000000000L, active2, 0L);
      case 116:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(12, 137);
         return jjMoveStringLiteralDfa13_42(active0, 0x400L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa13_42(active0, 0x200000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_42(11, active0, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_42(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_42(11, old0, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(12, active0, 0L, active2, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_42(active0, 0x80000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa14_42(active0, 0x100000000000L, active2, 0L);
      case 101:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(13, 167);
         return jjMoveStringLiteralDfa14_42(active0, 0x800000200000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa14_42(active0, 0x2000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_42(active0, 0x404000000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(13, 30);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(13, 32);
         return jjMoveStringLiteralDfa14_42(active0, 0x1000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_42(active0, 0x200002000000400L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa14_42(active0, 0x200L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_42(active0, 0x4000000000L, active2, 0L);
      case 116:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(13, 131);
         break;
      case 118:
         return jjMoveStringLiteralDfa14_42(active0, 0x400000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_42(12, active0, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_42(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_42(12, old0, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(13, active0, 0L, 0L, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_42(active0, 0x100000200000L);
      case 98:
         return jjMoveStringLiteralDfa15_42(active0, 0x2000000000L);
      case 99:
         return jjMoveStringLiteralDfa15_42(active0, 0x800000000000L);
      case 101:
         return jjMoveStringLiteralDfa15_42(active0, 0x1000000400000L);
      case 102:
         return jjMoveStringLiteralDfa15_42(active0, 0x4000000000000L);
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(14, 57);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_42(active0, 0x400004000000000L);
      case 114:
         return jjMoveStringLiteralDfa15_42(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa15_42(active0, 0x80000000000L);
      case 121:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(14, 9);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(14, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_42(13, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_42(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_42(13, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(14, active0, 0L, 0L, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_42(active0, 0x400000L);
      case 98:
         return jjMoveStringLiteralDfa16_42(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa16_42(active0, 0x1000000200000L);
      case 101:
         return jjMoveStringLiteralDfa16_42(active0, 0x80000000000L);
      case 106:
         return jjMoveStringLiteralDfa16_42(active0, 0x2000000000L);
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(15, 58);
         break;
      case 116:
         return jjMoveStringLiteralDfa16_42(active0, 0x900000000000L);
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(15, 10);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(15, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_42(14, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_42(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_42(14, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(15, active0, 0L, 0L, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa17_42(active0, 0x600000L);
      case 101:
         return jjMoveStringLiteralDfa17_42(active0, 0x102000000000L);
      case 105:
         return jjMoveStringLiteralDfa17_42(active0, 0x800000000000L);
      case 106:
         return jjMoveStringLiteralDfa17_42(active0, 0x4000000000L);
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(16, 43);
         break;
      case 116:
         return jjMoveStringLiteralDfa17_42(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_42(15, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_42(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_42(15, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(16, active0, 0L, 0L, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_42(active0, 0x2000400000L);
      case 101:
         return jjMoveStringLiteralDfa18_42(active0, 0x4000200000L);
      case 105:
         return jjMoveStringLiteralDfa18_42(active0, 0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa18_42(active0, 0x800000000000L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(17, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_42(16, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_42(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_42(16, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(17, active0, 0L, 0L, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa19_42(active0, 0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa19_42(active0, 0x400000L);
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(18, 47);
         break;
      case 111:
         return jjMoveStringLiteralDfa19_42(active0, 0x1000000000000L);
      case 115:
         return jjMoveStringLiteralDfa19_42(active0, 0x200000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(18, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_42(17, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa19_42(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_42(17, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(18, active0, 0L, 0L, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(19, 48);
         break;
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(19, 21);
         return jjMoveStringLiteralDfa20_42(active0, 0x400000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(19, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_42(18, active0, 0L, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa20_42(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_42(18, old0, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_42(19, active0, 0L, 0L, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(20, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_42(19, active0, 0L, 0L, 0L, 0L);
}
private int jjStartNfaWithStates_42(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_42(state, pos + 1);
}
private int jjMoveNfa_42(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 195;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 195:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 36); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 32); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 25); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 6); }
                  break;
               case 196:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(178, 185); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(166, 173); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(154, 161); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(143, 149); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(132, 138); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(122, 127); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(115, 117); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(108, 110); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(101, 103); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(94, 96); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(88, 89); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(82, 83); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 8:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(18, 19); }
                  break;
               case 12:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(26, 27); }
                  break;
               case 39:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(66, 67); }
                  break;
               case 48:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(68, 69); }
                  break;
               case 54:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 6); }
                  break;
               case 57:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(70, 71); }
                  break;
               case 65:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 25); }
                  break;
               case 68:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 32); }
                  break;
               case 71:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 36); }
                  break;
               case 75:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(72, 73); }
                  break;
               case 82:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(82, 83); }
                  break;
               case 83:
                  if (curChar == 61 && kind > 224)
                     kind = 224;
                  break;
               case 88:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(88, 89); }
                  break;
               case 89:
                  if (curChar == 62 && kind > 225)
                     kind = 225;
                  break;
               case 94:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(94, 96); }
                  break;
               case 95:
                  if (curChar == 61 && kind > 226)
                     kind = 226;
                  break;
               case 96:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 101:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(101, 103); }
                  break;
               case 102:
                  if (curChar == 32 && kind > 227)
                     kind = 227;
                  break;
               case 103:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 108:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(108, 110); }
                  break;
               case 109:
                  if (curChar == 61 && kind > 228)
                     kind = 228;
                  break;
               case 110:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 115:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(115, 117); }
                  break;
               case 116:
                  if (curChar == 61 && kind > 229)
                     kind = 229;
                  break;
               case 117:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 122:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(122, 127); }
                  break;
               case 132:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(132, 138); }
                  break;
               case 138:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 143:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(143, 149); }
                  break;
               case 154:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(154, 161); }
                  break;
               case 161:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 166:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(166, 173); }
                  break;
               case 178:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(178, 185); }
                  break;
               case 190:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(74, 75); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 85:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 186;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 174;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 162;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 150;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 139;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 128;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 118;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 111;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 104;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 97;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 90;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 0:
                  if (curChar == 114)
                     { jjAddStates(76, 89); }
                  else if (curChar == 97)
                     { jjAddStates(90, 94); }
                  else if (curChar == 102)
                     { jjAddStates(95, 96); }
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 80:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 193;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 187;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 175;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 163;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 151;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 140;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 129;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 119;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 112;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 105;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 98;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 91;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 81:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 178;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 166;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 154;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 143;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 132;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 122;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 115;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 108;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 101;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 94;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 88;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 53:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 71;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 68;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 65;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 84:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 177;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 165;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 153;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 142;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 131;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 121;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 114;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 107;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 100;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 93;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 87;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 55:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 70;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 62;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 67;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 64;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 3:
                  if (curChar == 114 && kind > 112)
                     kind = 112;
                  break;
               case 4:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if (curChar == 123 && kind > 116)
                     kind = 116;
                  break;
               case 10:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if (curChar == 123 && kind > 118)
                     kind = 118;
                  break;
               case 14:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 103 && kind > 123)
                     kind = 123;
                  break;
               case 20:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 100 && kind > 134)
                     kind = 134;
                  break;
               case 27:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 117 && kind > 155)
                     kind = 155;
                  break;
               case 34:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 102)
                     { jjAddStates(95, 96); }
                  break;
               case 38:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if (curChar == 108 && kind > 111)
                     kind = 111;
                  break;
               case 41:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 44:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 49:
                  if (curChar == 123 && kind > 115)
                     kind = 115;
                  break;
               case 50:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 51:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 97)
                     { jjAddStates(90, 94); }
                  break;
               case 56:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 58:
                  if (curChar == 123 && kind > 117)
                     kind = 117;
                  break;
               case 59:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 60:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 66:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 67:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 69:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 70:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 72:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 73:
                  if (curChar == 114)
                     { jjAddStates(76, 89); }
                  break;
               case 74:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 76:
                  if (curChar == 123 && kind > 119)
                     kind = 119;
                  break;
               case 77:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 78:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 86:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 91:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 97:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 98:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 104:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 105:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 111:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 112:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 118:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 119:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 123:
                  if (curChar == 104 && kind > 230)
                     kind = 230;
                  break;
               case 124:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 129:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 133:
                  if (curChar == 104 && kind > 231)
                     kind = 231;
                  break;
               case 134:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 139:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 140:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 144:
                  if (curChar == 104 && kind > 232)
                     kind = 232;
                  break;
               case 145:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 151:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 155:
                  if (curChar == 104 && kind > 233)
                     kind = 233;
                  break;
               case 156:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 162:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 163:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 167:
                  if (curChar == 109 && kind > 234)
                     kind = 234;
                  break;
               case 168:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 175:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 179:
                  if (curChar == 110 && kind > 235)
                     kind = 235;
                  break;
               case 180:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 187:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 191:
                  if (curChar == 123 && kind > 289)
                     kind = 289;
                  break;
               case 192:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 193:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 195 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 307);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 308)
                        kind = 308;
                     { jjCheckNAdd(3); }
                  }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 308)
                     kind = 308;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 308)
                     kind = 308;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 308)
                     kind = 308;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_23(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_23(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_23(jjStopStringLiteralDfa_23(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_23(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_23(0x8000000000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_23(0x4000000000000000L, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa1_23(0x0L, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa1_23(0x0L, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa1_23(0x0L, 0x8L);
      case 112:
         return jjMoveStringLiteralDfa1_23(0x0L, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa1_23(0x0L, 0x110L);
      case 116:
         return jjMoveStringLiteralDfa1_23(0x0L, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa1_23(0x2000000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_23(0x0L, 0x40L);
      case 123:
         return jjStopAtPos(0, 251);
      case 125:
         return jjStopAtPos(0, 252);
      default :
         return jjMoveNfa_23(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_23(long active3, long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(0, 0L, 0L, 0L, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_23(active3, 0L, active4, 0x42L);
      case 100:
         return jjMoveStringLiteralDfa2_23(active3, 0x8000000000000000L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_23(active3, 0x4000000000000000L, active4, 0x11L);
      case 102:
         return jjMoveStringLiteralDfa2_23(active3, 0L, active4, 0x8L);
      case 111:
         if ((active4 & 0x80L) != 0L)
            return jjStopAtPos(1, 263);
         break;
      case 114:
         return jjMoveStringLiteralDfa2_23(active3, 0L, active4, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa2_23(active3, 0x2000000000000000L, active4, 0x4L);
      case 121:
         return jjMoveStringLiteralDfa2_23(active3, 0L, active4, 0x100L);
      default :
         break;
   }
   return jjStartNfa_23(0, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa2_23(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_23(0, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(1, 0L, 0L, 0L, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_23(active3, 0L, active4, 0x2L);
      case 101:
         return jjMoveStringLiteralDfa3_23(active3, 0x8000000000000000L, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_23(active3, 0x4000000000000000L, active4, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa3_23(active3, 0x2000000000000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_23(active3, 0L, active4, 0x44L);
      case 111:
         return jjMoveStringLiteralDfa3_23(active3, 0L, active4, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa3_23(active3, 0L, active4, 0x101L);
      case 116:
         return jjMoveStringLiteralDfa3_23(active3, 0L, active4, 0x10L);
      default :
         break;
   }
   return jjStartNfa_23(1, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa3_23(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_23(1, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(2, 0L, 0L, 0L, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_23(active3, 0x4000000000000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_23(active3, 0L, active4, 0x1L);
      case 100:
         if ((active3 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(3, 253);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_23(active3, 0L, active4, 0x2L);
      case 102:
         return jjMoveStringLiteralDfa4_23(active3, 0x8000000000000000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_23(active3, 0L, active4, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa4_23(active3, 0L, active4, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa4_23(active3, 0L, active4, 0x114L);
      case 117:
         return jjMoveStringLiteralDfa4_23(active3, 0L, active4, 0x40L);
      default :
         break;
   }
   return jjStartNfa_23(2, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa4_23(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_23(2, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(3, 0L, 0L, 0L, active3, active4);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_23(active3, 0x8000000000000000L, active4, 0L);
      case 101:
         if ((active4 & 0x40L) != 0L)
            return jjStopAtPos(4, 262);
         return jjMoveStringLiteralDfa5_23(active3, 0L, active4, 0x128L);
      case 105:
         return jjMoveStringLiteralDfa5_23(active3, 0L, active4, 0x14L);
      case 108:
         if ((active4 & 0x2L) != 0L)
            return jjStopAtPos(4, 257);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_23(active3, 0L, active4, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa5_23(active3, 0x4000000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_23(3, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa5_23(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_23(3, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(4, 0L, 0L, 0L, active3, active4);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_23(active3, 0L, active4, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa6_23(active3, 0x4000000000000000L, active4, 0L);
      case 109:
         if ((active4 & 0x100L) != 0L)
            return jjStopAtPos(5, 264);
         break;
      case 110:
         return jjMoveStringLiteralDfa6_23(active3, 0L, active4, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa6_23(active3, 0L, active4, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa6_23(active3, 0L, active4, 0x20L);
      case 116:
         if ((active4 & 0x8L) != 0L)
            return jjStopAtPos(5, 259);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_23(active3, 0x8000000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_23(4, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa6_23(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_23(4, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(5, 0L, 0L, 0L, active3, active4);
      return 6;
   }
   switch(curChar)
   {
      case 103:
         if ((active4 & 0x10L) != 0L)
            return jjStopAtPos(6, 260);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_23(active3, 0x8000000000000000L, active4, 0x4L);
      case 112:
         return jjMoveStringLiteralDfa7_23(active3, 0L, active4, 0x1L);
      case 116:
         if ((active3 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(6, 254);
         return jjMoveStringLiteralDfa7_23(active3, 0L, active4, 0x20L);
      default :
         break;
   }
   return jjStartNfa_23(5, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa7_23(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_23(5, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(6, 0L, 0L, 0L, active3, active4);
      return 7;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa8_23(active3, 0L, active4, 0x4L);
      case 116:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(7, 255);
         return jjMoveStringLiteralDfa8_23(active3, 0L, active4, 0x1L);
      case 121:
         if ((active4 & 0x20L) != 0L)
            return jjStopAtPos(7, 261);
         break;
      default :
         break;
   }
   return jjStartNfa_23(6, 0L, 0L, 0L, active3, active4);
}
private int jjMoveStringLiteralDfa8_23(long old3, long active3, long old4, long active4){
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_23(6, 0L, 0L, 0L, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(7, 0L, 0L, 0L, 0L, active4);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_23(active4, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa9_23(active4, 0x1L);
      default :
         break;
   }
   return jjStartNfa_23(7, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa9_23(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_23(7, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(8, 0L, 0L, 0L, 0L, active4);
      return 9;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa10_23(active4, 0x1L);
      case 114:
         if ((active4 & 0x4L) != 0L)
            return jjStopAtPos(9, 258);
         break;
      default :
         break;
   }
   return jjStartNfa_23(8, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa10_23(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_23(8, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_23(9, 0L, 0L, 0L, 0L, active4);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active4 & 0x1L) != 0L)
            return jjStopAtPos(10, 256);
         break;
      default :
         break;
   }
   return jjStartNfa_23(9, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveNfa_23(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_40(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x2L) != 0L || (active2 & 0x18000000000000L) != 0L)
         {
            jjmatchedKind = 193;
            return 5;
         }
         if ((active0 & 0xaa0000000000000L) != 0L || (active1 & 0xf0000000000L) != 0L || (active2 & 0x7c000000000L) != 0L)
         {
            jjmatchedKind = 193;
            return 25;
         }
         if ((active0 & 0xaa0000000L) != 0L || (active1 & 0x200000003000000L) != 0L || (active2 & 0x76000000L) != 0L)
         {
            jjmatchedKind = 193;
            return 43;
         }
         if ((active1 & 0x400300000000000L) != 0L || (active2 & 0x7f80000000000L) != 0L)
         {
            jjmatchedKind = 193;
            return 32;
         }
         if ((active0 & 0xa00L) != 0L || (active1 & 0x3f00L) != 0L || (active2 & 0x3800000000001b0L) != 0L)
         {
            jjmatchedKind = 193;
            return 39;
         }
         if ((active0 & 0xa0L) != 0L || (active1 & 0xf0000000000000e0L) != 0L || (active2 & 0x3L) != 0L)
         {
            jjmatchedKind = 193;
            return 72;
         }
         if ((active1 & 0x60000L) != 0L || (active2 & 0x10000000000f8000L) != 0L)
         {
            jjmatchedKind = 193;
            return 63;
         }
         if ((active0 & 0x8000000L) != 0L || (active1 & 0x300000L) != 0L || (active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 193;
            return 17;
         }
         if ((active0 & 0xa000000000000000L) != 0L || (active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 193;
            return 7;
         }
         if ((active0 & 0x555ffff557fff540L) != 0L || (active1 & 0x10000fffcc9c01dL) != 0L || (active2 & 0x2c60003f81b07e0cL) != 0L)
         {
            jjmatchedKind = 193;
            return 53;
         }
         return -1;
      case 1:
         if ((active2 & 0x14000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 42;
         }
         if ((active1 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 67;
         }
         if ((active1 & 0x400000000000L) != 0L)
            return 90;
         if ((active2 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 4;
         }
         if ((active2 & 0x180000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 31;
         }
         if ((active0 & 0xa80000000000000L) != 0L || (active1 & 0xf0000000000L) != 0L || (active2 & 0x18000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 24;
         }
         if ((active1 & 0x1800L) != 0L || (active2 & 0x380000000000080L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 38;
         }
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 79;
         }
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 70;
         }
         if ((active1 & 0x38000000L) != 0L)
            return 53;
         if ((active0 & 0xf57fffffffffffe0L) != 0L || (active1 & 0xb70030ffc7fbe7ffL) != 0L || (active2 & 0x3c77e67fe3fbff3eL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 53;
         }
         if ((active2 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 1;
            }
            return 62;
         }
         return -1;
      case 2:
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 37;
         }
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 91;
         }
         if ((active1 & 0x80000008c0000080L) != 0L || (active2 & 0x808000L) != 0L)
            return 53;
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 78;
         }
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 64;
         }
         if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 3;
         }
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0x37003ff737fbff7fL) != 0L || (active2 & 0x3ef7fffff77b7fbeL) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 53;
         }
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 2;
            return 61;
         }
         return -1;
      case 3:
         if ((active1 & 0x40000L) != 0L)
            return 92;
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x400000011000000L) != 0L || (active2 & 0xd04600a0222000L) != 0L)
            return 53;
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 3;
            return 60;
         }
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 3;
            return 36;
         }
         if ((active0 & 0xffffff7fffffffe0L) != 0L || (active1 & 0x73003ff726fbff7fL) != 0L || (active2 & 0x3e2fb9ff57595fbfL) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 3;
            return 53;
         }
         return -1;
      case 4:
         if ((active0 & 0xffdffe7fffff7de0L) != 0L || (active1 & 0x73003ff52639fb7fL) != 0L || (active2 & 0x1f0e398f56081f9fL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 4;
            }
            return 53;
         }
         if ((active0 & 0x20010000008200L) != 0L || (active1 & 0x200c20400L) != 0L || (active2 & 0x2021807001514020L) != 0L)
            return 53;
         if ((active2 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 4;
            }
            return 55;
         }
         return -1;
      case 5:
         if ((active0 & 0x20002830880L) != 0L || (active1 & 0x2100188004002002L) != 0L || (active2 & 0x1002080210000004L) != 0L)
            return 53;
         if ((active0 & 0xfffffc7ffd7c7760L) != 0L || (active1 & 0x520027752239db7dL) != 0L || (active2 & 0x2f0c318d46085f9bL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 5;
            }
            return 53;
         }
         if ((active2 & 0x40000L) != 0L)
            return 93;
         return -1;
      case 6:
         if ((active0 & 0x80002400052c1100L) != 0L || (active1 & 0x400005340001080cL) != 0L || (active2 & 0x700000904000b10L) != 0L)
            return 53;
         if ((active0 & 0x7fffd87ff8506660L) != 0L || (active1 & 0x120022412238f371L) != 0L || (active2 & 0x280c31844208548bL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 6;
            }
            return 53;
         }
         return -1;
      case 7:
         if ((active0 & 0x57ff987ff0206640L) != 0L || (active1 & 0x200024120389100L) != 0L || (active2 & 0x280c21804200568bL) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 193;
               jjmatchedPos = 7;
            }
            return 53;
         }
         if ((active0 & 0x2800400008500020L) != 0L || (active1 & 0x1000200002006271L) != 0L || (active2 & 0x100400080000L) != 0L)
            return 53;
         return -1;
      case 8:
         if ((active0 & 0x5008000210000040L) != 0L || (active1 & 0x200024000300000L) != 0L || (active2 & 0x200000001002L) != 0L)
            return 53;
         if ((active0 & 0x7f7987de0606600L) != 0L || (active1 & 0x120089100L) != 0L || (active2 & 0x280c018042004689L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 8;
            return 53;
         }
         return -1;
      case 9:
         if ((active0 & 0x30000c00000000L) != 0L || (active1 & 0x20009000L) != 0L || (active2 & 0x480L) != 0L)
            return 53;
         if ((active0 & 0x7c79871e0606600L) != 0L || (active1 & 0x100080100L) != 0L || (active2 & 0x280c018042004209L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 9;
            return 53;
         }
         return -1;
      case 10:
         if ((active0 & 0x40001000000000L) != 0L || (active1 & 0x80100L) != 0L || (active2 & 0x2808000000000001L) != 0L)
            return 53;
         if ((active0 & 0x7879861e0606600L) != 0L || (active1 & 0x100000000L) != 0L || (active2 & 0x4018042004208L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 10;
            return 53;
         }
         return -1;
      case 11:
         if ((active0 & 0x80000000002000L) != 0L || (active1 & 0x100000000L) != 0L || (active2 & 0x4010000004000L) != 0L)
            return 53;
         if ((active0 & 0x7079861e0604600L) != 0L || (active2 & 0x8042000208L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 11;
            return 53;
         }
         return -1;
      case 12:
         if ((active0 & 0x607986140600600L) != 0L || (active2 & 0x8000000008L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 12;
            return 53;
         }
         if ((active0 & 0x1000000a0004000L) != 0L || (active2 & 0x42000200L) != 0L)
            return 53;
         return -1;
      case 13:
         if ((active0 & 0x140000000L) != 0L || (active2 & 0x8000000008L) != 0L)
            return 53;
         if ((active0 & 0x607986000600600L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 13;
            return 53;
         }
         return -1;
      case 14:
         if ((active0 & 0x202000000000200L) != 0L)
            return 53;
         if ((active0 & 0x405986000600400L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 14;
            return 53;
         }
         return -1;
      case 15:
         if ((active0 & 0x404000000000400L) != 0L)
            return 53;
         if ((active0 & 0x1986000600000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 15;
            return 53;
         }
         return -1;
      case 16:
         if ((active0 & 0x1906000600000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 16;
            return 53;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 53;
         return -1;
      case 17:
         if ((active0 & 0x100000000000L) != 0L)
            return 53;
         if ((active0 & 0x1806000600000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 17;
            return 53;
         }
         return -1;
      case 18:
         if ((active0 & 0x802000000000L) != 0L)
            return 53;
         if ((active0 & 0x1004000600000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 18;
            return 53;
         }
         return -1;
      case 19:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 19;
            return 53;
         }
         if ((active0 & 0x1004000200000L) != 0L)
            return 53;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_40(int pos, long active0, long active1, long active2){
   return jjMoveNfa_40(jjStopStringLiteralDfa_40(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_40(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_40(0x5555555555555540L, 0x15L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_40(0xa0L, 0xf0000000000000e0L, 0x3L);
      case 98:
         return jjMoveStringLiteralDfa1_40(0x0L, 0x0L, 0xcL);
      case 99:
         return jjMoveStringLiteralDfa1_40(0xa00L, 0x3f00L, 0x3800000000001b0L);
      case 100:
         return jjMoveStringLiteralDfa1_40(0x2000L, 0xc000L, 0xc00000000001e00L);
      case 101:
         return jjMoveStringLiteralDfa1_40(0x2a8000L, 0x10000L, 0x6000L);
      case 102:
         return jjMoveStringLiteralDfa1_40(0x0L, 0x60000L, 0x10000000000f8000L);
      case 103:
         return jjMoveStringLiteralDfa1_40(0x800000L, 0x80000L, 0x100000L);
      case 104:
         return jjMoveStringLiteralDfa1_40(0x2000000L, 0x100000000000000L, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa1_40(0x8000000L, 0x300000L, 0x400000L);
      case 107:
         return jjMoveStringLiteralDfa1_40(0x0L, 0x0L, 0x800000L);
      case 108:
         return jjMoveStringLiteralDfa1_40(0x0L, 0xc00000L, 0x2000000001000000L);
      case 109:
         return jjMoveStringLiteralDfa1_40(0xaa0000000L, 0x200000003000000L, 0x76000000L);
      case 110:
         return jjMoveStringLiteralDfa1_40(0x2000000000L, 0x3c000000L, 0x80000000L);
      case 111:
         return jjMoveStringLiteralDfa1_40(0x0L, 0x3c0000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_40(0xaaa8000000000L, 0xfc00000000L, 0x3f00000000L);
      case 114:
         return jjMoveStringLiteralDfa1_40(0xaa0000000000000L, 0xf0000000000L, 0x7c000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_40(0x0L, 0x400300000000000L, 0x7f80000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_40(0xa000000000000000L, 0x400000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_40(0x0L, 0x2L, 0x18000000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_40(0x0L, 0x8L, 0x60000000000000L);
      case 123:
         return jjStopAtPos(0, 113);
      case 125:
         return jjStopAtPos(0, 114);
      default :
         return jjMoveNfa_40(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_40(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_40(active0, 0x20000020000140L, active1, 0x200000403000300L, active2, 0x20004f83008000L);
      case 98:
         return jjMoveStringLiteralDfa2_40(active0, 0x20L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_40(active0, 0x8001480L, active1, 0x2000000000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_40(active0, 0x4000L, active1, 0x4000000000000000L, active2, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa2_40(active0, 0xa80002000550000L, active1, 0x1000f008400c008L, active2, 0xc00198014800e00L);
      case 103:
         return jjMoveStringLiteralDfa2_40(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_40(active0, 0x4000200L, active1, 0L, active2, 0x1000000030L);
      case 105:
         return jjMoveStringLiteralDfa2_40(active0, 0x8092000000L, active1, 0x400100000000000L, active2, 0x1040600060031000L);
      case 108:
         return jjMoveStringLiteralDfa2_40(active0, 0x800000L, active1, 0x8000000000020420L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_40(active0, 0x1540008000L, active1, 0x100000L, active2, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa2_40(active0, 0x40002a0000L, active1, 0x402000c2L, active2, 0x400000L);
      case 111:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_40(1, 110, 90);
         return jjMoveStringLiteralDfa2_40(active0, 0x20000002000L, active1, 0x30c81800L, active2, 0x2380020000040080L);
      case 112:
         return jjMoveStringLiteralDfa2_40(active0, 0x15550000000000L, active1, 0x800000000L, active2, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa2_40(active0, 0xb542a80000000000L, active1, 0x1000007100040000L, active2, 0x2000300004L);
      case 115:
         return jjMoveStringLiteralDfa2_40(active0, 0L, active1, 0L, active2, 0x8000000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_40(active0, 0x4000000000000000L, active1, 0x1L, active2, 0x1800000000002L);
      case 117:
         return jjMoveStringLiteralDfa2_40(active0, 0x8000a00000800L, active1, 0x208000002004L, active2, 0x12040000080108L);
      case 118:
         return jjMoveStringLiteralDfa2_40(active0, 0L, active1, 0x10L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_40(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_40(active0, 0L, active1, 0x10000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_40(active0, 0L, active1, 0L, active2, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_40(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_40(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_40(active0, 0x40000040028000L, active1, 0L, active2, 0x800004004014L);
      case 98:
         return jjMoveStringLiteralDfa3_40(active0, 0x8000000000040L, active1, 0x8000000000L, active2, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa3_40(active0, 0x10000100L, active1, 0x600040L, active2, 0x2000000100000000L);
      case 100:
         return jjMoveStringLiteralDfa3_40(active0, 0x2000000L, active1, 0x4000000000000000L, active2, 0x80000000000000L);
      case 101:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_40(2, 94, 53);
         return jjMoveStringLiteralDfa3_40(active0, 0x3500086000000200L, active1, 0x10010L, active2, 0x48000000210020L);
      case 102:
         return jjMoveStringLiteralDfa3_40(active0, 0x280000L, active1, 0x4000L, active2, 0x402000000000600L);
      case 103:
         return jjMoveStringLiteralDfa3_40(active0, 0L, active1, 0x1000000100800000L, active2, 0x208000000000L);
      case 104:
         return jjMoveStringLiteralDfa3_40(active0, 0x400L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_40(active0, 0x10104000000L, active1, 0x100001000000002L, active2, 0x10002000002000L);
      case 106:
         return jjMoveStringLiteralDfa3_40(active0, 0x20000000L, active1, 0L, active2, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa3_40(active0, 0xa01000000L, active1, 0x10000080020L, active2, 0x10000f00000a0000L);
      case 109:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_40(2, 95, 53);
         return jjMoveStringLiteralDfa3_40(active0, 0x10000L, active1, 0x100000L, active2, 0x1040000a0001000L);
      case 110:
         return jjMoveStringLiteralDfa3_40(active0, 0x20000080540000L, active1, 0x100211001804L, active2, 0x200004040000080L);
      case 111:
         return jjMoveStringLiteralDfa3_40(active0, 0x2a60008804000L, active1, 0x6000060400L, active2, 0x1001000100000L);
      case 112:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_40(2, 99, 53);
         return jjMoveStringLiteralDfa3_40(active0, 0x8000000000L, active1, 0x220000000000L, active2, 0x400001L);
      case 113:
         return jjMoveStringLiteralDfa3_40(active0, 0L, active1, 0L, active2, 0x100000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_40(active0, 0x4005500000000000L, active1, 0x400000109L, active2, 0x200040900L);
      case 115:
         return jjMoveStringLiteralDfa3_40(active0, 0x280000000000820L, active1, 0x4000000a000L, active2, 0x800000000000008L);
      case 116:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_40(2, 127, 53);
         return jjMoveStringLiteralDfa3_40(active0, 0x80L, active1, 0x2000000022000200L, active2, 0x400c10000002L);
      case 117:
         return jjMoveStringLiteralDfa3_40(active0, 0x8010001400001000L, active1, 0L, active2, 0x20000000000000L);
      case 118:
         return jjMoveStringLiteralDfa3_40(active0, 0x800000000000000L, active1, 0x80000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_40(active0, 0x2000L, active1, 0x4000000L, active2, 0L);
      case 120:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_40(2, 143, 53);
         return jjMoveStringLiteralDfa3_40(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_40(2, 71, 53);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_40(2, 151, 53);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_40(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_40(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_40(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_40(active0, 0x50000L, active1, 0x10100420000L, active2, 0x2400010000000200L);
      case 98:
         return jjMoveStringLiteralDfa4_40(active0, 0x10000000820000L, active1, 0L, active2, 0x4000000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_40(active0, 0x200L, active1, 0x18000L, active2, 0x800000000000020L);
      case 100:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_40(3, 180, 53);
         return jjMoveStringLiteralDfa4_40(active0, 0x2006000000L, active1, 0x80100L, active2, 0L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_40(3, 39, 53);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_40(3, 92, 53);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_40(3, 122, 53);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_40(3, 145, 53);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_40(3, 157, 53);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_40(3, 159, 53);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_40(3, 169, 53);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_40(3, 170, 53);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_40(3, 174, 53);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_40(3, 183, 53);
         return jjMoveStringLiteralDfa4_40(active0, 0x6280104000000400L, active1, 0x40200104240L, active2, 0x80201001000L);
      case 102:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_40(3, 149, 53);
         return jjMoveStringLiteralDfa4_40(active0, 0x500000L, active1, 0L, active2, 0x2000000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_40(active0, 0x20000000000000L, active1, 0x100100000000000L, active2, 0x4000000000L);
      case 104:
         return jjMoveStringLiteralDfa4_40(active0, 0L, active1, 0L, active2, 0x410000000L);
      case 105:
         return jjMoveStringLiteralDfa4_40(active0, 0x800000000008080L, active1, 0x2000000000800004L, active2, 0x8000004c08L);
      case 106:
         return jjMoveStringLiteralDfa4_40(active0, 0x40000000L, active1, 0x2000000000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_40(active0, 0L, active1, 0L, active2, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa4_40(active0, 0x8021400000000L, active1, 0x200028000200000L, active2, 0x20000000090001L);
      case 109:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_40(3, 82, 92);
         return jjMoveStringLiteralDfa4_40(active0, 0x200000000000L, active1, 0L, active2, 0x100000000040000L);
      case 110:
         return jjMoveStringLiteralDfa4_40(active0, 0x40000108002000L, active1, 0x400L, active2, 0x203004000094L);
      case 111:
         return jjMoveStringLiteralDfa4_40(active0, 0x54400b1280000L, active1, 0x80000000000L, active2, 0x42000000L);
      case 112:
         return jjMoveStringLiteralDfa4_40(active0, 0x2810000000000L, active1, 0x200020000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_40(active0, 0L, active1, 0x2L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_40(active0, 0L, active1, 0x4000000004000010L, active2, 0x1000000000102L);
      case 115:
         return jjMoveStringLiteralDfa4_40(active0, 0x8500000000001040L, active1, 0x28L, active2, 0x8000000000000L);
      case 116:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_40(3, 141, 53);
         return jjMoveStringLiteralDfa4_40(active0, 0xa00000920L, active1, 0x4400003800L, active2, 0x1200800800000000L);
      case 117:
         return jjMoveStringLiteralDfa4_40(active0, 0L, active1, 0x1000000002000001L, active2, 0x100000500000L);
      case 118:
         return jjMoveStringLiteralDfa4_40(active0, 0x1000080000000000L, active1, 0x1000000000L, active2, 0L);
      case 119:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_40(3, 182, 53);
         return jjMoveStringLiteralDfa4_40(active0, 0x4000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_40(3, 88, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_40(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_40(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_40(active0, 0x2800000800000L, active1, 0x1000000000L, active2, 0x200100040000L);
      case 98:
         return jjMoveStringLiteralDfa5_40(active0, 0x1040000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_40(active0, 0x400L, active1, 0L, active2, 0x80000000004L);
      case 100:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_40(4, 144, 53);
         return jjMoveStringLiteralDfa5_40(active0, 0x4004000000L, active1, 0x100000L, active2, 0L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_40(4, 40, 53);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_40(4, 74, 53);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_40(4, 164, 53);
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_40(4, 175, 53);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_40(4, 176, 53);
         return jjMoveStringLiteralDfa5_40(active0, 0x45200a0002000000L, active1, 0x4200006000008800L, active2, 0x1300100800000180L);
      case 103:
         return jjMoveStringLiteralDfa5_40(active0, 0x40000000000000L, active1, 0x200L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_40(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_40(active0, 0x1008000a00010100L, active1, 0x28000000108L, active2, 0x2000004000003L);
      case 107:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_40(active0, 0x200L, active1, 0x80000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_40(4, 152, 53);
         return jjMoveStringLiteralDfa5_40(active0, 0x10040000022000L, active1, 0x300000000000L, active2, 0x2000000000004000L);
      case 109:
         return jjMoveStringLiteralDfa5_40(active0, 0x2000400008000000L, active1, 0x1000000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_40(4, 87, 53);
         return jjMoveStringLiteralDfa5_40(active0, 0x10004000L, active1, 0x500000000L, active2, 0x200081418L);
      case 111:
         return jjMoveStringLiteralDfa5_40(active0, 0x200140500800L, active1, 0x2000000004002000L, active2, 0x4000010000000L);
      case 112:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_40(4, 148, 53);
         return jjMoveStringLiteralDfa5_40(active0, 0x5000000000000L, active1, 0x80000L, active2, 0x8000000000000L);
      case 113:
         return jjMoveStringLiteralDfa5_40(active0, 0L, active1, 0x4L, active2, 0L);
      case 114:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_40(4, 97, 53);
         return jjMoveStringLiteralDfa5_40(active0, 0xa0280020L, active1, 0x40022005000L, active2, 0x800000042000000L);
      case 115:
         return jjMoveStringLiteralDfa5_40(active0, 0x800002000000000L, active1, 0x51L, active2, 0x8000000000L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_40(4, 81, 53);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_40(4, 150, 53);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_40(4, 165, 53);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_40(4, 181, 53);
         return jjMoveStringLiteralDfa5_40(active0, 0x8280001400001040L, active1, 0x10000000020L, active2, 0x10400000000L);
      case 117:
         return jjMoveStringLiteralDfa5_40(active0, 0L, active1, 0x210002L, active2, 0x400000000000200L);
      case 118:
         return jjMoveStringLiteralDfa5_40(active0, 0x100000000080L, active1, 0L, active2, 0x800L);
      default :
         break;
   }
   return jjStartNfa_40(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_40(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_40(active0, 0x5000009000020L, active1, 0x81020L, active2, 0x8000000084000L);
      case 98:
         return jjMoveStringLiteralDfa6_40(active0, 0x2000000000L, active1, 0L, active2, 0x2L);
      case 99:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_40(5, 103, 53);
         return jjMoveStringLiteralDfa6_40(active0, 0x280000L, active1, 0x26000000000L, active2, 0x81L);
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_40(5, 41, 53);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_40(5, 156, 53);
         break;
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_40(5, 7, 53);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_40(5, 17, 53);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_40(5, 65, 53);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_40(5, 107, 53);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_40(5, 108, 53);
         return jjMoveStringLiteralDfa6_40(active0, 0xa040140004000000L, active1, 0x1000010400000000L, active2, 0x818L);
      case 102:
         return jjMoveStringLiteralDfa6_40(active0, 0L, active1, 0L, active2, 0x2000000000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_40(active0, 0x2800000000000L, active1, 0L, active2, 0x100000000L);
      case 104:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_40(5, 130, 53);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_40(active0, 0x810001400000000L, active1, 0x200122100010L, active2, 0x800010000000400L);
      case 107:
         return jjMoveStringLiteralDfa6_40(active0, 0x400L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_40(5, 16, 53);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_40(5, 23, 53);
         return jjMoveStringLiteralDfa6_40(active0, 0x200044000L, active1, 0L, active2, 0x404000000000200L);
      case 109:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_40(active0, 0x4000000010000000L, active1, 0x2000L, active2, 0L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_40(5, 25, 53);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_40(5, 125, 53);
         return jjMoveStringLiteralDfa6_40(active0, 0x80000000000L, active1, 0x200000000008100L, active2, 0x300100004000100L);
      case 111:
         return jjMoveStringLiteralDfa6_40(active0, 0x280400000003200L, active1, 0x208L, active2, 0L);
      case 114:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_40(5, 188, 53);
         return jjMoveStringLiteralDfa6_40(active0, 0x1e0500040L, active1, 0x4000L, active2, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa6_40(active0, 0x1008004000000000L, active1, 0x4000000000200000L, active2, 0x42001000L);
      case 116:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_40(5, 120, 53);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_40(5, 146, 93);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_40(5, 161, 53);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_40(5, 171, 53);
         return jjMoveStringLiteralDfa6_40(active0, 0x500200000000000L, active1, 0x1000010041L, active2, 0x208000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_40(active0, 0L, active1, 0x4L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_40(active0, 0x20000800000100L, active1, 0x40000000000L, active2, 0L);
      case 119:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_40(5, 90, 53);
         break;
      case 120:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_40(5, 177, 53);
         return jjMoveStringLiteralDfa6_40(active0, 0L, active1, 0x800L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa6_40(active0, 0L, active1, 0L, active2, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_40(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_40(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_40(active0, 0x22800810002040L, active1, 0x20000100100L, active2, 0x1L);
      case 98:
         return jjMoveStringLiteralDfa7_40(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_40(active0, 0x500020L, active1, 0x1000L, active2, 0x8100000000000L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_40(6, 42, 53);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_40(6, 63, 53);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_40(6, 104, 53);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_40(6, 139, 53);
         return jjMoveStringLiteralDfa7_40(active0, 0L, active1, 0x8000L, active2, 0x4000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_40(6, 8, 53);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_40(6, 18, 53);
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_40(6, 45, 53);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_40(6, 66, 53);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_40(6, 80, 53);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_40(6, 100, 53);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_40(6, 106, 53);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_40(6, 160, 53);
         return jjMoveStringLiteralDfa7_40(active0, 0x40000000a0200000L, active1, 0x200000006001L, active2, 0x8042000000L);
      case 103:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_40(6, 154, 53);
         return jjMoveStringLiteralDfa7_40(active0, 0x5000000000000L, active1, 0x200000000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_40(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_40(active0, 0x1000000208000000L, active1, 0x200000L, active2, 0x2004000000001000L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_40(6, 24, 53);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_40(6, 132, 53);
         return jjMoveStringLiteralDfa7_40(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 109:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_40(6, 12, 53);
         return jjMoveStringLiteralDfa7_40(active0, 0L, active1, 0L, active2, 0x80000L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_40(6, 26, 53);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_40(6, 67, 53);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_40(6, 163, 53);
         return jjMoveStringLiteralDfa7_40(active0, 0x2280100000000000L, active1, 0x1000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_40(active0, 0xd00000000004400L, active1, 0x50L, active2, 0x10000000000L);
      case 112:
         return jjMoveStringLiteralDfa7_40(active0, 0L, active1, 0L, active2, 0x800000400000000L);
      case 114:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_40(6, 98, 53);
         return jjMoveStringLiteralDfa7_40(active0, 0x140000000L, active1, 0x80200L, active2, 0L);
      case 115:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_40(6, 126, 53);
         return jjMoveStringLiteralDfa7_40(active0, 0x10000000000000L, active1, 0L, active2, 0x8L);
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_40(6, 75, 53);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_40(6, 101, 53);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_40(6, 136, 53);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_40(6, 184, 53);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_40(6, 185, 53);
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_40(active0, 0x480000000000L, active1, 0x4002000020L, active2, 0x680L);
      case 117:
         return jjMoveStringLiteralDfa7_40(active0, 0x2000000200L, active1, 0L, active2, 0x200000000002L);
      case 118:
         return jjMoveStringLiteralDfa7_40(active0, 0x40001000000000L, active1, 0x20000000L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa7_40(active0, 0L, active1, 0x100000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_40(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_40(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_40(active0, 0x45001000004000L, active1, 0x120008000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_40(active0, 0x80000000000040L, active1, 0L, active2, 0x4000000000000L);
      case 100:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_40(7, 64, 53);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_40(7, 78, 53);
         return jjMoveStringLiteralDfa8_40(active0, 0x80000002000L, active1, 0L, active2, 0x4000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_40(7, 46, 53);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_40(7, 69, 53);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_40(7, 147, 53);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_40(7, 162, 53);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_40(7, 172, 53);
         return jjMoveStringLiteralDfa8_40(active0, 0x8000140400000L, active1, 0x4000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa8_40(active0, 0L, active1, 0L, active2, 0x200L);
      case 104:
         return jjMoveStringLiteralDfa8_40(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_40(active0, 0x410000000L, active1, 0L, active2, 0x480L);
      case 107:
         return jjMoveStringLiteralDfa8_40(active0, 0L, active1, 0L, active2, 0x8000000000000L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_40(7, 27, 53);
         return jjMoveStringLiteralDfa8_40(active0, 0x20000800000000L, active1, 0x100L, active2, 0x2000000000000000L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_40(7, 59, 53);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_40(7, 68, 53);
         return jjMoveStringLiteralDfa8_40(active0, 0x4500000200000000L, active1, 0L, active2, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa8_40(active0, 0x1000000000000000L, active1, 0L, active2, 0x1000L);
      case 113:
         return jjMoveStringLiteralDfa8_40(active0, 0L, active1, 0L, active2, 0x42000000L);
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_40(7, 70, 53);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_40(7, 77, 53);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_40(7, 109, 53);
         return jjMoveStringLiteralDfa8_40(active0, 0x200000000200000L, active1, 0L, active2, 0x208000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_40(active0, 0x2000000000L, active1, 0L, active2, 0x8L);
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_40(7, 5, 53);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_40(7, 124, 53);
         return jjMoveStringLiteralDfa8_40(active0, 0x2900000000200L, active1, 0x200020000181000L, active2, 0x800000000000003L);
      case 117:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_40(7, 61, 53);
         return jjMoveStringLiteralDfa8_40(active0, 0x4000000400L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_40(active0, 0xa0000000L, active1, 0x200000L, active2, 0L);
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_40(7, 73, 53);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_40(7, 89, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_40(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_40(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_40(active0, 0x2000L, active1, 0L, active2, 0x8000000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_40(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_40(8, 51, 53);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_40(8, 102, 53);
         return jjMoveStringLiteralDfa9_40(active0, 0x100000004000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_40(8, 33, 53);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_40(8, 84, 53);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_40(8, 85, 53);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_40(8, 105, 53);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_40(8, 129, 53);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_40(8, 173, 53);
         return jjMoveStringLiteralDfa9_40(active0, 0x212800000200000L, active1, 0L, active2, 0x8000000000L);
      case 104:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_40(8, 121, 53);
         return jjMoveStringLiteralDfa9_40(active0, 0x200L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_40(active0, 0x20a0000000L, active1, 0x100L, active2, 0x800000000000001L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_40(8, 28, 53);
         return jjMoveStringLiteralDfa9_40(active0, 0xc0001000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_40(8, 60, 53);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_40(8, 140, 53);
         return jjMoveStringLiteralDfa9_40(active0, 0x400000000L, active1, 0x88000L, active2, 0x4000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_40(active0, 0L, active1, 0x1000L, active2, 0x688L);
      case 114:
         return jjMoveStringLiteralDfa9_40(active0, 0x400000000400000L, active1, 0L, active2, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa9_40(active0, 0x4000000000L, active1, 0L, active2, 0x10000000000L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_40(8, 6, 53);
         return jjMoveStringLiteralDfa9_40(active0, 0x5000000000400L, active1, 0x120000000L, active2, 0x2000000000000000L);
      case 117:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_40(8, 62, 53);
         return jjMoveStringLiteralDfa9_40(active0, 0x20080800000000L, active1, 0L, active2, 0x42000000L);
      case 118:
         return jjMoveStringLiteralDfa9_40(active0, 0x140000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_40(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_40(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_40(active0, 0x4000L, active1, 0L, active2, 0x4000000000000L);
      case 98:
         return jjMoveStringLiteralDfa10_40(active0, 0x2000L, active1, 0L, active2, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa10_40(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_40(9, 52, 53);
         return jjMoveStringLiteralDfa10_40(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_40(9, 34, 53);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_40(9, 35, 53);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_40(9, 53, 53);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_40(9, 93, 53);
         return jjMoveStringLiteralDfa10_40(active0, 0x405000000400000L, active1, 0x80000L, active2, 0x2000000042004000L);
      case 103:
         return jjMoveStringLiteralDfa10_40(active0, 0L, active1, 0L, active2, 0x8000000000000L);
      case 104:
         return jjMoveStringLiteralDfa10_40(active0, 0x400L, active1, 0L, active2, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_40(active0, 0x4140000200L, active1, 0x100000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_40(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_40(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_40(9, 135, 53);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_40(9, 138, 53);
         return jjMoveStringLiteralDfa10_40(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_40(active0, 0x80000000000000L, active1, 0L, active2, 0x800000000000001L);
      case 112:
         return jjMoveStringLiteralDfa10_40(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_40(9, 76, 53);
         return jjMoveStringLiteralDfa10_40(active0, 0L, active1, 0L, active2, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa10_40(active0, 0xa0200000L, active1, 0L, active2, 0L);
      case 116:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_40(9, 79, 53);
         return jjMoveStringLiteralDfa10_40(active0, 0L, active1, 0x100L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_40(active0, 0x40101000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa10_40(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_40(8, active0, active1, active2);
}
private int jjMoveStringLiteralDfa10_40(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa11_40(active0, 0x4000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_40(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_40(10, 36, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_40(10, 54, 53);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_40(10, 179, 53);
         return jjMoveStringLiteralDfa11_40(active0, 0x2000200000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_40(active0, 0x2000000a0000400L, active1, 0L, active2, 0x10000000000L);
      case 106:
         return jjMoveStringLiteralDfa11_40(active0, 0L, active1, 0L, active2, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa11_40(active0, 0x80000002000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_40(active0, 0x4000000000000L, active1, 0L, active2, 0x4000000000200L);
      case 110:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_40(10, 128, 53);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_40(10, 187, 53);
         return jjMoveStringLiteralDfa11_40(active0, 0x80004000000000L, active1, 0L, active2, 0x8042000000L);
      case 111:
         return jjMoveStringLiteralDfa11_40(active0, 0x102800000000000L, active1, 0x100000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_40(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_40(10, 83, 53);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_40(10, 189, 53);
         break;
      case 115:
         return jjMoveStringLiteralDfa11_40(active0, 0x140400200L, active1, 0L, active2, 0x4000L);
      case 118:
         return jjMoveStringLiteralDfa11_40(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_40(10, 72, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_40(9, active0, active1, active2);
}
private int jjMoveStringLiteralDfa11_40(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_40(active0, 0L, active1, 0L, active2, 0x8000000200L);
      case 99:
         return jjMoveStringLiteralDfa12_40(active0, 0L, active1, 0L, active2, 0x42000000L);
      case 100:
         return jjMoveStringLiteralDfa12_40(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_40(11, 13, 53);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_40(11, 55, 53);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_40(11, 178, 53);
         return jjMoveStringLiteralDfa12_40(active0, 0x4000400000L, active1, 0L, active2, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa12_40(active0, 0x400080140000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_40(active0, 0x100000004000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_40(11, 96, 53);
         return jjMoveStringLiteralDfa12_40(active0, 0x100800000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_40(active0, 0x50000a0000000L, active1, 0L, active2, 0L);
      case 112:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_40(11, 168, 53);
         break;
      case 114:
         return jjMoveStringLiteralDfa12_40(active0, 0x200000L, active1, 0L, active2, 0L);
      case 115:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_40(11, 142, 53);
         return jjMoveStringLiteralDfa12_40(active0, 0x200002000000400L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_40(active0, 0x200L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_40(10, active0, active1, active2);
}
private int jjMoveStringLiteralDfa12_40(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(11, active0, 0L, active2);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_40(active0, 0x80000000000L, active2, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa13_40(active0, 0x4000000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_40(12, 14, 53);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_40(12, 56, 53);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_40(12, 153, 53);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_40(12, 158, 53);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_40(active0, 0x202100000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa13_40(active0, 0L, active2, 0x8000000000L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_40(12, 29, 53);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_40(12, 31, 53);
         return jjMoveStringLiteralDfa13_40(active0, 0x1800000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_40(active0, 0x140000200L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_40(active0, 0x400000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_40(active0, 0x400006000000000L, active2, 0L);
      case 116:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_40(12, 137, 53);
         return jjMoveStringLiteralDfa13_40(active0, 0x400L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa13_40(active0, 0x200000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_40(11, active0, 0L, active2);
}
private int jjMoveStringLiteralDfa13_40(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(11, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(12, active0, 0L, active2);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_40(active0, 0x80000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa14_40(active0, 0x100000000000L, active2, 0L);
      case 101:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_40(13, 167, 53);
         return jjMoveStringLiteralDfa14_40(active0, 0x800000200000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa14_40(active0, 0x2000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_40(active0, 0x404000000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_40(13, 30, 53);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_40(13, 32, 53);
         return jjMoveStringLiteralDfa14_40(active0, 0x1000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_40(active0, 0x200002000000400L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa14_40(active0, 0x200L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_40(active0, 0x4000000000L, active2, 0L);
      case 116:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_40(13, 131, 53);
         break;
      case 118:
         return jjMoveStringLiteralDfa14_40(active0, 0x400000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_40(12, active0, 0L, active2);
}
private int jjMoveStringLiteralDfa14_40(long old0, long active0, long old2, long active2){
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_40(12, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_40(active0, 0x100000200000L);
      case 98:
         return jjMoveStringLiteralDfa15_40(active0, 0x2000000000L);
      case 99:
         return jjMoveStringLiteralDfa15_40(active0, 0x800000000000L);
      case 101:
         return jjMoveStringLiteralDfa15_40(active0, 0x1000000400000L);
      case 102:
         return jjMoveStringLiteralDfa15_40(active0, 0x4000000000000L);
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_40(14, 57, 53);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_40(active0, 0x400004000000000L);
      case 114:
         return jjMoveStringLiteralDfa15_40(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa15_40(active0, 0x80000000000L);
      case 121:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_40(14, 9, 53);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_40(14, 49, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_40(13, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_40(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_40(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_40(active0, 0x400000L);
      case 98:
         return jjMoveStringLiteralDfa16_40(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa16_40(active0, 0x1000000200000L);
      case 101:
         return jjMoveStringLiteralDfa16_40(active0, 0x80000000000L);
      case 106:
         return jjMoveStringLiteralDfa16_40(active0, 0x2000000000L);
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_40(15, 58, 53);
         break;
      case 116:
         return jjMoveStringLiteralDfa16_40(active0, 0x900000000000L);
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_40(15, 10, 53);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_40(15, 50, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_40(14, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_40(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_40(14, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(15, active0, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa17_40(active0, 0x600000L);
      case 101:
         return jjMoveStringLiteralDfa17_40(active0, 0x102000000000L);
      case 105:
         return jjMoveStringLiteralDfa17_40(active0, 0x800000000000L);
      case 106:
         return jjMoveStringLiteralDfa17_40(active0, 0x4000000000L);
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_40(16, 43, 53);
         break;
      case 116:
         return jjMoveStringLiteralDfa17_40(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_40(15, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_40(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_40(15, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(16, active0, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_40(active0, 0x2000400000L);
      case 101:
         return jjMoveStringLiteralDfa18_40(active0, 0x4000200000L);
      case 105:
         return jjMoveStringLiteralDfa18_40(active0, 0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa18_40(active0, 0x800000000000L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_40(17, 44, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_40(16, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_40(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_40(16, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(17, active0, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa19_40(active0, 0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa19_40(active0, 0x400000L);
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_40(18, 47, 53);
         break;
      case 111:
         return jjMoveStringLiteralDfa19_40(active0, 0x1000000000000L);
      case 115:
         return jjMoveStringLiteralDfa19_40(active0, 0x200000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_40(18, 37, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_40(17, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa19_40(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_40(17, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(18, active0, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_40(19, 48, 53);
         break;
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_40(19, 21, 53);
         return jjMoveStringLiteralDfa20_40(active0, 0x400000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_40(19, 38, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_40(18, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa20_40(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_40(18, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_40(19, active0, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_40(20, 22, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_40(19, active0, 0L, 0L);
}
private int jjStartNfaWithStates_40(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_40(state, pos + 1);
}
private int jjMoveNfa_40(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 90;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 72:
               case 53:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 24:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 63:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 92:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  else if ((0x100000600L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 61:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 7:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 5:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 93:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  else if ((0x100000600L & l) != 0L)
                     { jjCheckNAddTwoStates(56, 59); }
                  break;
               case 60:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 39:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 37:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 43:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 78:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 32:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 17:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 67:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 91:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(88, 44); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(85, 40); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(82, 33); }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 6); }
                  break;
               case 64:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 62:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 90:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  else if ((0x100000600L & l) != 0L)
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 4:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 55:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 3:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 70:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(23, 25); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 38:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 36:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 42:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 79:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 31:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 25:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 8:
                  if ((0x100000600L & l) != 0L)
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 12:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(26, 27); }
                  break;
               case 20:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 45:
               case 49:
                  if (curChar == 34)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 46:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 47:
                  if (curChar == 34 && kind > 192)
                     kind = 192;
                  break;
               case 56:
                  if ((0x100000600L & l) != 0L)
                     { jjCheckNAddTwoStates(56, 59); }
                  break;
               case 65:
                  if ((0x100000600L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 71:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 6); }
                  break;
               case 74:
                  if ((0x100000600L & l) != 0L)
                     { jjAddStates(30, 31); }
                  break;
               case 82:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(82, 33); }
                  break;
               case 85:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(85, 40); }
                  break;
               case 88:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(88, 44); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 87;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 79;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 84;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 81;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 24:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 63:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 67;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 92:
               case 53:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 61:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 7:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 5:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 93:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 60:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 39:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 37:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 43:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 78:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 32:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 17:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 67:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 91:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 64:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 62:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 90:
                  if ((0xd7ffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 4:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 55:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 3:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 114)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  break;
               case 70:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 88;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 0:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 97)
                     { jjAddStates(32, 36); }
                  else if (curChar == 102)
                     { jjAddStates(37, 38); }
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 38:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 36:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 42:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 79:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 31:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 25:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (kind > 193)
                        kind = 193;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 6:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if (curChar == 123 && kind > 116)
                     kind = 116;
                  break;
               case 10:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if (curChar == 123 && kind > 118)
                     kind = 118;
                  break;
               case 14:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if (curChar == 123 && kind > 119)
                     kind = 119;
                  break;
               case 22:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 23:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 26:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 103 && kind > 123)
                     kind = 123;
                  break;
               case 28:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 33:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 100 && kind > 134)
                     kind = 134;
                  break;
               case 35:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 40:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 117 && kind > 155)
                     kind = 155;
                  break;
               case 44:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 48:
                  if (curChar == 92)
                     { jjAddStates(39, 42); }
                  break;
               case 50:
                  if (curChar == 92)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 51:
                  if (curChar == 123)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 52:
                  if (curChar == 125)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 54:
                  if (curChar == 102)
                     { jjAddStates(37, 38); }
                  break;
               case 57:
                  if (curChar == 108 && kind > 111)
                     kind = 111;
                  break;
               case 58:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 66:
                  if (curChar == 123 && kind > 115)
                     kind = 115;
                  break;
               case 68:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 97)
                     { jjAddStates(32, 36); }
                  break;
               case 73:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 75:
                  if (curChar == 123 && kind > 117)
                     kind = 117;
                  break;
               case 76:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 77:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 80:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 83:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 84:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 86:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 87:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 89:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 72:
               case 53:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 24:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 63:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 92:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 61:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 7:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 93:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 60:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 37:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 43:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 78:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 17:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 67:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 91:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 64:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 62:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 90:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 4:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 55:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 70:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 38:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 42:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 79:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 25:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 193)
                     kind = 193;
                  { jjCheckNAdd(53); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 46:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(23, 25); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 90 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_18(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_18(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_18(jjStopStringLiteralDfa_18(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_18(){
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa1_18(0x10000L);
      case 117:
         return jjMoveStringLiteralDfa1_18(0x20000L);
      default :
         return jjMoveNfa_18(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_18(long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(0, 0L, 0L, 0L, 0L, active4);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_18(active4, 0x20000L);
      case 111:
         if ((active4 & 0x10000L) != 0L)
            return jjStopAtPos(1, 272);
         break;
      default :
         break;
   }
   return jjStartNfa_18(0, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa2_18(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_18(0, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(1, 0L, 0L, 0L, 0L, active4);
      return 2;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa3_18(active4, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_18(1, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa3_18(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_18(1, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(2, 0L, 0L, 0L, 0L, active4);
      return 3;
   }
   switch(curChar)
   {
      case 116:
         if ((active4 & 0x20000L) != 0L)
            return jjStopAtPos(3, 273);
         break;
      default :
         break;
   }
   return jjStartNfa_18(2, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveNfa_18(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_14(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_14(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_14(jjStopStringLiteralDfa_14(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_14(){
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 288);
      default :
         return jjMoveNfa_14(0, 0);
   }
}
private int jjMoveNfa_14(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 287)
                     kind = 287;
                  { jjCheckNAdd(3); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_28(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_28(int pos, long active0){
   return jjMoveNfa_28(jjStopStringLiteralDfa_28(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_28(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_28(0, 0);
   }
}
private int jjMoveNfa_28(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffa00000000L & l) != 0L)
                  {
                     if (kind > 237)
                        kind = 237;
                     { jjCheckNAdd(10); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               case 3:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 4:
                  if ((0xfffffffb00000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 236)
                     kind = 236;
                  break;
               case 10:
                  if ((0xfffffffa00000000L & l) == 0L)
                     break;
                  if (kind > 237)
                     kind = 237;
                  { jjCheckNAdd(10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 237)
                     kind = 237;
                  { jjCheckNAdd(10); }
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 4:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(20, 22); }
                  break;
               case 8:
                  if (curChar == 123)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if (curChar == 125)
                     { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 10:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 237)
                     kind = 237;
                  { jjCheckNAdd(10); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_9(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_9(0x200000000000L);
      case 123:
         return jjStopAtPos(0, 302);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_9(long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, 0L, 0L, 0L, 0L, active4);
      return 1;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa2_9(active4, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_9(0, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa2_9(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_9(0, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(1, 0L, 0L, 0L, 0L, active4);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         if ((active4 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 301);
         break;
      default :
         break;
   }
   return jjStartNfa_9(1, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1, long active2, long active3, long active4){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0, long active1, long active2, long active3, long active4){
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_12(){
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa1_12(0x4000000000L);
      default :
         return jjMoveNfa_12(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_12(long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(0, 0L, 0L, 0L, 0L, active4);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa2_12(active4, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_12(0, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa2_12(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_12(0, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(1, 0L, 0L, 0L, 0L, active4);
      return 2;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa3_12(active4, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_12(1, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa3_12(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_12(1, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(2, 0L, 0L, 0L, 0L, active4);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa4_12(active4, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_12(2, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa4_12(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_12(2, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(3, 0L, 0L, 0L, 0L, active4);
      return 4;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa5_12(active4, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_12(3, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa5_12(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_12(3, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(4, 0L, 0L, 0L, 0L, active4);
      return 5;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa6_12(active4, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_12(4, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa6_12(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_12(4, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(5, 0L, 0L, 0L, 0L, active4);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_12(active4, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_12(5, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa7_12(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_12(5, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(6, 0L, 0L, 0L, 0L, active4);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_12(active4, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_12(6, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveStringLiteralDfa8_12(long old4, long active4){
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_12(6, 0L, 0L, 0L, 0L, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(7, 0L, 0L, 0L, 0L, active4);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active4 & 0x4000000000L) != 0L)
            return jjStopAtPos(8, 294);
         break;
      default :
         break;
   }
   return jjStartNfa_12(7, 0L, 0L, 0L, 0L, active4);
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 4); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   4, 5, 6, 1, 2, 7, 8, 9, 10, 4, 7, 16, 19, 32, 35, 4, 
   5, 7, 8, 9, 7, 8, 9, 46, 47, 48, 12, 13, 20, 21, 74, 75, 
   72, 80, 83, 86, 89, 63, 68, 49, 50, 51, 52, 7, 8, 9, 10, 11, 
   12, 13, 4, 5, 11, 12, 13, 6, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 39, 42, 48, 49, 57, 58, 75, 76, 190, 191, 80, 86, 92, 99, 
   106, 113, 120, 130, 141, 152, 164, 176, 188, 194, 55, 63, 66, 69, 72, 46, 
   51, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\141\142\163\164\162\141\143\164", 
"\41\141\142\163\164\162\141\143\164", "\141\143\164\151\166\145", "\41\141\143\164\151\166\145", 
"\143\150\145\143\153\157\165\164\150\151\163\164\157\162\171", "\41\143\150\145\143\153\157\165\164\150\151\163\164\157\162\171", 
"\143\165\163\164\157\155", "\41\143\165\163\164\157\155", 
"\144\157\167\156\154\157\141\144\141\142\154\145", "\41\144\157\167\156\154\157\141\144\141\142\154\145", "\145\155\141\151\154", 
"\41\145\155\141\151\154", "\145\156\141\142\154\145", "\41\145\156\141\142\154\145", 
"\145\156\146\157\162\143\145", "\41\145\156\146\157\162\143\145", 
"\145\156\146\157\162\143\145\162\145\163\145\162\166\145\141\143\143\145\163\163", 
"\41\145\156\146\157\162\143\145\162\145\163\145\162\166\145\141\143\143\145\163\163", "\147\154\157\142\141\154", "\41\147\154\157\142\141\154", 
"\150\151\144\144\145\156", "\41\150\151\144\144\145\156", "\151\143\157\156\155\141\151\154", 
"\41\151\143\157\156\155\141\151\154", "\155\141\152\157\162\162\145\166\151\163\151\157\156", 
"\41\155\141\152\157\162\162\145\166\151\163\151\157\156", "\155\151\156\157\162\162\145\166\151\163\151\157\156", 
"\41\155\151\156\157\162\162\145\166\151\163\151\157\156", "\155\165\154\164\151\154\151\156\145", 
"\41\155\165\154\164\151\154\151\156\145", "\155\165\154\164\151\166\141\154\165\145", 
"\41\155\165\154\164\151\166\141\154\165\145", 
"\156\145\145\144\163\142\165\163\151\156\145\163\163\157\142\152\145\143\164", 
"\41\156\145\145\144\163\142\165\163\151\156\145\163\163\157\142\152\145\143\164", "\160\151\160\145", "\41\160\151\160\145", "\160\157\157\154\145\144", 
"\41\160\157\157\154\145\144", "\160\162\145\166\145\156\164\144\165\160\154\151\143\141\164\145\163", 
"\41\160\162\145\166\145\156\164\144\165\160\154\151\143\141\164\145\163", "\160\162\157\155\157\164\145", "\41\160\162\157\155\157\164\145", 
"\160\162\157\160\141\147\141\164\145\143\157\156\156\145\143\164\151\157\156", 
"\41\160\162\157\160\141\147\141\164\145\143\157\156\156\145\143\164\151\157\156", "\160\162\157\160\141\147\141\164\145\155\157\144\151\146\171", 
"\41\160\162\157\160\141\147\141\164\145\155\157\144\151\146\171", "\160\165\142\154\151\163\150\145\144", 
"\41\160\165\142\154\151\163\150\145\144", "\162\141\156\147\145\166\141\154\165\145", 
"\41\162\141\156\147\145\166\141\154\165\145", "\162\145\163\145\164\157\156\143\154\157\156\145", 
"\41\162\145\163\145\164\157\156\143\154\157\156\145", "\162\145\163\145\164\157\156\162\145\166\151\163\151\157\156", 
"\41\162\145\163\145\164\157\156\162\145\166\151\163\151\157\156", "\162\145\166\151\163\151\157\156", "\41\162\145\166\151\163\151\157\156", 
"\164\162\145\145\155\145\156\165", "\41\164\162\145\145\155\145\156\165", "\164\162\165\163\164\145\144", 
"\41\164\162\165\163\164\145\144", "\165\156\151\161\165\145", "\41\165\156\151\161\165\145", 
"\166\145\162\163\151\157\156", "\41\166\145\162\163\151\157\156", "\141\154\154\163\164\141\164\145", 
"\141\156\143\145\163\164\157\162", "\141\156\171", "\143\141\162\144\151\156\141\154\151\164\171", 
"\143\141\164\145\147\157\162\171", "\143\154\157\156\145", "\143\157\156\164\145\170\164", 
"\143\157\156\164\162\141\143\164\157\162", "\143\165\163\164\157\155\145\162", "\144\145\146\145\162\162\145\144", 
"\144\145\163\143\145\156\144\141\156\164", "\145\170\145\143\165\164\145", "\146\154\157\141\164", "\146\162\157\155", 
"\147\157\154\144\160\141\162\164\156\145\162", "\151\155\155\145\144\151\141\164\145", 
"\151\156\143\154\165\163\151\166\145", "\154\157\143\141\154", "\154\157\147\151\156", "\155\141\156\171", 
"\155\141\164\165\162\151\164\171", "\156\145\167\162\157\167", "\156\157", "\156\157\156\145", 
"\156\157\164\160\162\151\166\141\164\145", "\157\156\145", "\157\145\155", 
"\157\162\147\141\156\151\172\141\164\151\157\156", "\157\167\156\145\162", "\160\141\162\164\156\145\162", "\160\160\160", 
"\160\162\151\166\141\164\145", "\160\162\157\152\145\143\164", "\160\162\157\164\145\143\164\145\144", 
"\160\165\142\154\151\143", "\162\145\154\141\164\145\144", "\162\145\160\154\151\143\141\164\145", 
"\162\145\163\145\162\166\145", "\162\145\166\157\153\145", "\163\151\156\147\154\145", 
"\163\165\160\160\154\151\145\162", "\164\157", null, null, "\173", "\175", null, null, null, null, null, 
"\150\145\151\147\150\164", "\155\141\170\154\145\156\147\164\150", "\163\151\172\145", null, 
"\141\162\147\165\155\145\156\164", "\141\143\164\151\157\156", "\141\144\144\162\145\163\163", "\141\154\164", 
"\141\160\160\154\151\143\141\164\151\157\156", "\141\164\164\162\151\142\165\164\145", "\142\162\141\156\143\150", 
"\142\165\163\151\156\145\163\163\157\142\152\145\143\164", "\143\150\141\156\156\145\154", "\143\150\145\143\153", null, 
"\143\157\156\156\145\143\164\151\157\156", "\143\165\162\162\145\156\164", 
"\144\145\146\141\165\154\164\146\157\162\155\141\164", "\144\145\146\151\156\151\164\151\157\156", "\144\145\162\151\166\145\144", 
"\144\151\155\145\156\163\151\157\156", "\145\144\151\164", "\145\155\141\151\154\141\144\144\162\145\163\163", 
"\146\141\170", "\146\151\145\154\144", "\146\151\154\145", "\146\157\162\155\141\164", 
"\146\165\154\154\156\141\155\145", "\147\162\157\165\160", "\150\162\145\146", "\151\156\160\165\164", 
"\153\145\171", "\154\141\142\145\154", 
"\155\141\152\157\162\163\145\161\165\145\156\143\145", "\155\145\141\156\151\156\147", null, "\155\145\164\150\157\144", 
"\155\151\155\145", "\155\151\156\157\162\163\145\161\165\145\156\143\145", "\156\141\155\145", 
"\160\141\143\153\141\147\145", "\160\141\162\145\156\164", "\160\141\164\150\164\171\160\145", 
"\160\141\164\164\145\162\156", "\160\150\157\156\145", "\160\162\151\156\164", "\162\141\156\147\145", 
"\162\145\147\151\163\164\145\162\145\144\156\141\155\145", "\162\145\154\141\164\151\157\156\163\150\151\160", "\162\157\154\145", 
"\162\165\154\145", "\163\145\154\145\143\164", "\163\145\161\165\145\156\143\145", 
"\163\151\147\156\141\164\165\162\145", "\163\151\164\145", "\163\164\141\164\145", "\163\164\157\162\145", 
"\163\165\146\146\151\170", "\163\171\155\142\157\154\151\143\156\141\155\145", 
"\165\163\145\163\160\141\143\153\141\147\145", "\165\165\151\144", "\166\141\165\154\164", "\166\151\145\167", 
"\143\157\144\145", "\143\157\155\155\145\156\164", "\143\157\156\164\145\156\164", 
"\144\145\146\141\165\154\164", "\144\145\163\143\162\151\160\164\151\157\156", "\146\151\154\164\145\162", 
"\154\157\143\141\154\146\151\154\164\145\162", null, null, null, null, null, null, null, null, "\175", null, 
"\160\162\157\160\145\162\164\171", "\166\141\154\165\145", "\153\151\156\144", "\142\151\156\141\162\171", 
"\142\157\157\154\145\141\156", "\144\141\164\145", "\151\156\164\145\147\145\162", "\162\145\141\154", 
"\163\164\162\151\156\147", "\145\153\154", "\145\170\164\145\162\156\141\154", "\152\141\166\141", 
"\155\161\154", "\157\162\147\141\156\151\172\141\164\151\157\156", 
"\160\162\157\152\145\143\164", "\162\157\154\145", "\142\141\163\151\143", 
"\143\157\155\160\157\163\151\164\151\157\156\141\154", "\143\157\155\160\157\163\145\144", "\164\162\151\147\147\145\162", null, 
"\141\143\164\151\157\156", "\143\150\145\143\153", "\157\166\145\162\162\151\144\145", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\151\156\143\154\165\163\151\166\145", "\145\170\143\154\165\163\151\166\145", null, null, null, null, 
"\151\156\143\154\165\163\151\166\145", "\145\170\143\154\165\163\151\166\145", "\165\156\151\164", null, null, 
"\173", "\175", "\165\165\151\144", "\144\145\146\141\165\154\164", 
"\41\144\145\146\141\165\154\164", "\144\145\163\143\162\151\160\164\151\157\156", "\154\141\142\145\154", 
"\155\165\154\164\151\160\154\151\145\162", "\157\146\146\163\145\164", "\163\145\164\164\151\156\147", 
"\160\162\157\160\145\162\164\171", "\166\141\154\165\145", "\164\157", "\163\171\163\164\145\155", null, null, 
null, null, null, null, null, "\164\157", "\165\156\151\164", null, null, 
"\146\157\162", null, "\160\141\164\150\164\171\160\145", null, 
"\162\145\154\141\164\151\157\156\163\150\151\160", null, "\164\171\160\145", "\144\145\154\151\155\151\164\145\162", null, null, 
null, null, "\175", null, null, null, "\175", "\167\151\164\150", 
"\151\156\164\145\162\146\141\143\145", "\141\143\143\145\163\163", "\141\154\154", "\173", "\175", null, 
"\141\144\155\151\156", "\141\154\154", "\173", "\175", null, "\160\162\157\144\165\143\164", "\173", 
"\175", null, "\164\171\160\145", "\173", "\175", 
"\141\160\160\154\151\143\141\164\151\157\156", "\146\165\154\154", "\142\165\163\151\156\145\163\163", 
"\163\171\163\164\145\155", "\143\157\154\165\155\156", "\173", "\175", "\156\141\155\145", 
"\154\141\142\145\154", "\163\145\154\145\143\164", 
"\142\165\163\151\156\145\163\163\157\142\152\145\143\164", "\162\145\154\141\164\151\157\156\163\150\151\160", "\162\141\156\147\145", 
"\150\162\145\146", "\141\154\164", "\150\151\144\144\145\156", "\41\150\151\144\144\145\156", 
"\165\163\145\162", "\163\157\162\164\164\171\160\145", "\163\145\164\164\151\156\147", null, null, 
null, null, "\141\154\160\150\141", "\156\165\155\145\162\151\143", 
"\157\164\150\145\162", "\156\157\156\145", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getEndLine();
      beginColumn = endColumn = input_stream.getEndColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 42;
int defaultLexState = 42;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
     case 10:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
     case 11:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_11();
       break;
     case 12:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_12();
       break;
     case 13:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_13();
       break;
     case 14:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_14();
       break;
     case 15:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_15();
       break;
     case 16:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_16();
       break;
     case 17:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_17();
       break;
     case 18:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_18();
       break;
     case 19:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_19();
       break;
     case 20:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 269;
       jjmatchedPos = -1;
       curPos = 0;
       curPos = jjMoveStringLiteralDfa0_20();
       break;
     case 21:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_21();
       break;
     case 22:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_22();
       break;
     case 23:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_23();
       break;
     case 24:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_24();
       break;
     case 25:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_25();
       break;
     case 26:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_26();
       break;
     case 27:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_27();
       break;
     case 28:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_28();
       break;
     case 29:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_29();
       break;
     case 30:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_30();
       break;
     case 31:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_31();
       break;
     case 32:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_32();
       break;
     case 33:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_33();
       break;
     case 34:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_34();
       break;
     case 35:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_35();
       break;
     case 36:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_36();
       break;
     case 37:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_37();
       break;
     case 38:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_38();
       break;
     case 39:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_39();
       break;
     case 40:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_40();
       break;
     case 41:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_41();
       break;
     case 42:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_42();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public MxParserTokenManager_mxJPO(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public MxParserTokenManager_mxJPO (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
	
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 195; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {
  
    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 43 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "COLUMN_SORTTYPE_EXPECTED",
   "COLUMN_SETTING_STRING_EXPECTED",
   "COLUMN_STRING_EXPECTED",
   "COLUMN_EXPECTED",
   "COLUMN_OPENEXPECTED",
   "TYPE_EXPECTED",
   "PRODUCT_EXPECTED",
   "PRODUCT_OPEN_EXPECTED",
   "ADMIN_EXPECTED",
   "ADMIN_OPEN_EXPECTED",
   "ACCESS_EXPECTED",
   "ACCESS_OPENEXPECTED",
   "WITH_EXPECTED",
   "ROUTEUSER_EXPECTED",
   "AC_ACCESS_STRING_EXPECTED",
   "DELIMITER_EXPECTED",
   "FOR_EXPECTED",
   "UNITDEF_SYSTEMUNIT_EXPECTED",
   "UNITDEF_SYSTEMDEF_EXPECTED",
   "UNITDEF_SYSTEMNAME_EXPECTED",
   "UNITDEF_DOUBLE_EXPECTED",
   "UNITDEF_STRINGSTRING_EXPECTED",
   "UNITDEF_STRING_EXPECTED",
   "UNITDEF_EXPECTED",
   "UNITNAME_EXPECTED",
   "BETW4_EXPECTED",
   "BETW3_EXPECTED",
   "BETW2_EXPECTED",
   "BETW1_EXPECTED",
   "TRIGKIND_EXPECTED",
   "TRIGEVENT_EXPECTED",
   "KIND_EXPECTED",
   "NATURALNUMBER_EXPECTED",
   "LISTOLD_EXPECTED",
   "MULTILINESTRING_EXPECTED",
   "TYPE_OPEN_EXPECTED",
   "FIELD_OPEN_EXPECTED",
   "AFTER_STRING_STRING_EXPECTED",
   "STRING_EXPECTED",
   "STRING_STRING_EXPECTED",
   "VERSION_EXPECTED",
   "USER_EXPECTED",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
   42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
   42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 40, 42, 42, 42, 42, 42, 42, 42, 
   42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
   42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 42, 42, 42, 42, 33, 33, 33, 32, 32, 32, 39, 39, 
   38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
   38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 
   38, 38, 38, 38, 38, 38, 38, 38, 34, 34, 34, 34, 34, 34, 34, 37, 37, 42, 42, 42, 42, -1, -1, 42, 42, 
   38, 38, 31, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 30, 29, 38, 38, 38, 38, 
   38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 28, 27, 27, -1, -1, 26, 26, 25, 25, -1, -1, 42, 42, 24, 23, 
   42, -1, 42, 22, -1, -1, 22, 22, 20, 20, 21, 22, 22, 21, 19, 23, 23, 22, 22, 23, 18, 18, -1, 17, 23, 
   23, 16, 42, 38, 42, 38, 42, 38, 15, 42, 42, -1, -1, 42, 13, -1, -1, 38, 12, 38, 11, 42, 10, 42, -1, 
   9, 42, 8, 42, -1, 7, 6, 42, -1, 35, 5, 42, -1, -1, -1, -1, 4, 3, 42, 2, 2, 2, 2, 2, 2, 
   2, 2, -1, -1, 2, 0, 1, 3, 3, 2, 2, 3, 3, 3, 3, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffcf3fffffffffffL, 
   0xffffffffbfffffffL, 0xfffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[195];
    private final int[] jjstateSet = new int[2 * 195];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected int curChar;
}
